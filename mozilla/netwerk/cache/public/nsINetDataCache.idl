/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"

interface nsIURI;
interface nsICachedNetData;
interface nsISimpleEnumerator;
interface nsIFileSpec;

/**
 * A network-data cache is used to cache the responses to network
 * retrieval commands.  Each cache entry may contain both content,
 * e.g. GIF image data, and associated metadata, e.g. HTTP headers.
 * Each entry in the cache is indexed by a key.  This key is a
 * combination of a URI string and opaque keyData.  The latter can be
 * used, for example, to contain HTTP form post key/value pairs.
 *
 * The nsINetDataCache interface is agnostic as to where the data is
 * stored and whether the storage is volatile or persistent.  The
 * memory cache, the disk cache and any extension caches must all
 * implement this interface.
 *
 */
[scriptable, uuid(ccfc58c0-6dde-11d3-90c8-000064657374)]
interface nsINetDataCache : nsISupports
{
	/**
	 * Human-readable description of the cache module, e.g. "Disk Cache"
	 */
	readonly attribute wstring Description;
  
    /**
     * Returns true if cached data is available for the given URI,
     * even if only partial data is stored.  The optionally-NULL
     * secondaryKey argument can be used for form post data in the
     * case of HTTP.
     */
    boolean Contains(in nsIURI uri, in string secondaryKey);

    /**
     * Fetch the cache entry record for the given URI.  If one does not exist,
     * create a new, empty record.
	 */
    nsICachedNetData GetCachedNetData(in nsIURI uri);

	/**
	 * False indicates that this cache is entirely bypassed.
	 */
    attribute boolean enabled;

	/**
	 * The least-recently-used (retrieved) cache entry.
	 */
	readonly attribute nsICachedNetData LRU;

	/**
	 * Contains the cache entry with the youngest expiration date
	 */
	readonly attribute nsICachedNetData NextToExpire;

	/**
	 * This attribute will be false for the memory cache and the disk cache,
	 * but will be true for all other cache modules.
	 */
	readonly attribute boolean ReadOnly;

    /**
     * Total number of unexpired URI entries stored in the cache.
     */
    readonly attribute unsigned long NumEntries;

    /**
     * Enumerate the unexpired URI entries stored in the cache.
     */
    nsISimpleEnumerator EnumerateCacheEntries();
	
	/**
	 * Contains a reference to the next cache in search order.  For the memory
	 * cache, this attribute always references the disk cache.  For the disk
	 * cache, it contains a reference to the first extension cache.
	 */
    attribute nsINetDataCache NextCache;

    /**
     * Set the maximum permitted size of the cache, in kB.  Setting the
     * capacity lower than the current amount of space currently in use may
     * cause cache entries to be evicted from the cache to accomodate the
     * requested capacity.
	 */
    attribute long Capacity;

    /**
     * An estimate of the amount of storage occupied by the cache, in kB.
     * Actual use may be slightly higher than reported due to cache overhead
     * and heap fragmentation (in the memory cache) or block quantization (in
     * the disk cache).
	 */
    readonly attribute long StorageInUse;

    /**
     * Remove all entries from a writable cache.  This could be used, for
     * example, after a guest ends a browser session.  This is equivalent to
     * setting the cache's Capacity to zero, except that all cache entries,
     * even those in active use, will be deleted.  Also, any global cache
     * database files will be deleted.
	 */
    void RemoveAll();
};

