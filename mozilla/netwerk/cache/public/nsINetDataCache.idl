/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"

interface nsIURI;
interface nsINetDataCacheRecord;
interface nsIEnumerator;
interface nsIFileSpec;

/**
 * The nsINetDataCache defines a network-data cache, used to cache the
 * responses to network retrieval commands.  This interface, along with
 * nsINetDataCacheRecord, is implemented by the memory cache, the disk cache
 * and, optionally, by some extension caches.
 *
 * Each cache entry may contain both content, e.g. GIF image data, and
 * associated metadata, e.g. HTTP headers.  Each entry is indexed by two
 * different keys: a record id number and a key created by combining the URI
 * with a "secondary key", e.g. HTTP post data.
 *
 * The nsINetDataCache interface is agnostic as to where the data is
 * stored and whether the storage is volatile or persistent.  The
 * memory cache, the disk cache and any extension caches must all
 * implement this interface.
 *
 */
[scriptable, uuid(ccfc58c0-6dde-11d3-90c8-000064657374)]
interface nsINetDataCache : nsISupports
{
	/**
	 * Human-readable description of the cache module, e.g. "Disk Cache"
	 */
	readonly attribute wstring Description;
  
    /**
     * Returns true if cached data is available for the given opaque key,
     * even if only partial data is stored.
     */
    boolean Contains([size_is(length)] in string key, in PRUint32 length);

    /**
     * Fetch the cache entry record for the given opaque key.  If one does not
     * exist, create a new, empty record.
     */
    nsINetDataCacheRecord GetCachedNetData([size_is(length)] in string key,
                                           in PRUint32 length);

    /**
     * Fetch the cache entry record for the given URI using the record ID as a key.
     */
    nsINetDataCacheRecord GetCachedNetDataByID(in PRInt32 RecordID);

	/**
	 * False indicates that this cache is entirely bypassed.
	 */
    attribute boolean enabled;

	/**
	 * This attribute will be false for the memory cache and the disk cache,
	 * but will be true for all other cache modules.
	 */
	readonly attribute boolean ReadOnly;

    /**
     * Total number of URI entries stored in the cache.
     */
    readonly attribute PRUint32 NumEntries;

    /**
     * Maximum number of URI entries that may be stored in the cache.
     */
    readonly attribute PRUint32 MaxEntries;

    /**
     * Enumerate the URI entries stored in the cache.
     */
    nsIEnumerator NewCacheEntryEnumerator();
	
	/**
	 * Contains a reference to the next cache in search order.  For the memory
	 * cache, this attribute always references the disk cache.  For the disk
	 * cache, it contains a reference to the first extension cache.
	 */
    attribute nsINetDataCache NextCache;

    /**
     * Set the maximum permitted size of the cache, in kB.  Setting the
     * capacity lower than the current amount of space currently in use may
     * cause cache entries to be evicted from the cache to accomodate the
     * requested capacity.
	 */
    attribute PRUint32 Capacity;

    /**
     * An estimate of the amount of storage occupied by the cache, in kB.
     * Actual use may be slightly higher than reported due to cache overhead
     * and heap fragmentation (in the memory cache) or block quantization (in
     * the disk cache).
	 */
    readonly attribute PRUint32 StorageInUse;

    /**
     * Remove all entries from a writable cache.  This could be used, for
     * example, after a guest ends a browser session.  This is equivalent to
     * setting the cache's Capacity to zero, except that all cache entries,
     * even those in active use, will be deleted.  Also, any global cache
     * database files will be deleted.
	 */
    void RemoveAll();
};
