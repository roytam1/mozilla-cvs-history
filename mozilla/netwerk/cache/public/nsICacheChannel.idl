/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is nsICacheChannel.idl, released January 19, 2001.
 * 
 * The Initial Developer of the Original Code is Netscape Communications
 * Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation.  All
 * Rights Reserved.
 * 
 * Contributor(s): 
 *    Gordon Sheridan, 19-January-2001
 */

#include "nsISupports.idl"
#include "nsIChannel.idl"


interface nsICacheMetaData;


/**
 * The nsICacheChannel provides restricted access to a cache object.
 * A nsICacheChannel is "returned" by the cache manager upon opening
 * a cache object.
 */
[scriptable, uuid(dc70e5a0-c65f-4925-8b6a-20354b9f6467)]
interface nsICacheChannel : nsIChannel
{
  // readonly attribute nsICacheEntry entry;

  /**
   * Channel access flags.
   */
  const unsigned long READ       = 1;
  const unsigned long WRITE      = 2;
  const unsigned long READ_WRITE = 3;

  /**
   * This channels current access flags.
   */
  readonly attribute unsigned long accessFlags;

  /**
   * Doom the cache entry this channel references in order to slate it for 
   * removal.  Once doomed a cache entry cannot be undoomed.
   */
  void doom();
  void doomAndFailPendingRequests(in nsresult status);

  /**
   * Data in an existing cache object may only be appended to.  Therefore,
   * a writer wishing to replace existing cache data should first truncate
   * the existing data to the appropriate length.
   */ 
  void truncateExistingData(in unsigned long newLength);
  
  /**
   * Set internal flag so we know more data is expected than what is there currently.
   *
   */
  void appendToExistingData();

  /**
   * A writer must validate this cache object before any readers are given
   * a channel to the object.
   */
  void markValid();

  /**
   * The meta data.
   */
  attribute nsICacheMetaData metaData;
};

