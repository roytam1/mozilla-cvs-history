/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsINetDataCacheRecord.idl"
#include "nsrootidl.idl"

interface nsIFileSpec;
interface nsIURI;

/**
 * The nsICachedNetData interface represents a single entry in a database that
 * caches data retrieved from the network. This interface is implemented by the
 * cache manager on top of the low-level nsINetDataCacheRecord and
 * nsINetDataCache interfaces that are implemented by the database.
 *
 * Each cache record may contain both content and metadata.  The content may
 * be, for example, GIF image data or HTML, and it is accessed through
 * nsIChannel's streaming API.  The opaque metadata, which may contain HTTP
 * headers among other things, is stored as a byte array.  Each entry in the
 * cache is indexed by two different keys: a record id number and a key created
 * by combining the URI with a "secondary key", e.g. HTTP post data.
 *
 * Though this interface inherits from nsIChannel, it is expected that the
 * following nsIChannel methods return NS_NOT_IMPLEMENTED:
 *    + GetContentType()
 *    + GetContentLength()
 *
 * Though nsIChannel provides for both async and synchronous I/O APIs,
 * nsIRawCachedNetData need not implement both.  If an async I/O method
 * returns NS_NOT_IMPLEMENTED, the cache manager will fall back to the
 * synchronous equivalent.
 *
 * @See nsICachedNetData
 * @See nsINetDataCache
 * @See nsINetDataDiskCache
 * @See nsINetDataCacheManager */
[scriptable, uuid(6aeb2a40-6d43-11d3-90c8-000064657374)]
interface nsICachedNetData : nsINetDataCacheRecord
{
    /**
     * Retrieve the secondary key passed into nsINetDataCache::GetCachedNetData()
     */
    [size_is(length)] string GetSecondaryKey(out unsigned long length);

    /**
     * This flag indicates that a protocol handler supports partial fetching of
     * data.  If so, the cache manager may truncate the content to accommodate other
     * cache entries rather than deleting it wholesale.
     */
    attribute boolean AllowPartial;
    
    /**
     * Indicates that the write stream supplying content data for the cache did
     * not complete normally, so the content may be truncated.
     */
    readonly attribute boolean Partial;

    /**
     * True, if a write stream is open for this cache entry or if no
     * stream data has ever been stored in this cache record.  There
     * can only be a single write stream open at a time for each cache
     * entry.
     */
    readonly attribute boolean UpdateInProgress;

    /* FIXME: Should use nsIDateTime interface, once it's created
     *  instead of PRTime, for improved scriptability ?
     */

    /**
     * Date/time of expiration for this record, at which point the content is
     * *likely* to be stale.  This heuristic date does not necessarily
     * correspond to the HTTP Expires header, as it does not determine when
     * cached network data must be validated with the origin server, but only
     * serves as a hint to the cache replacement policy.
     */
    readonly attribute PRTime ExpirationTime;

    /**
     * Date/time of last access (retrieval) of the data in this record.
     */
    readonly attribute PRTime LastRetrievalTime;

    /**
     * Number of times an output stream has been created for this cache entry
     * since it was first stored.
     */
    readonly attribute PRUint16 NumberRetrievals;

    /**
     * If the underlying cache database is persistent, flush this entry's data
     * to the database.
     */
    void Commit();
};
