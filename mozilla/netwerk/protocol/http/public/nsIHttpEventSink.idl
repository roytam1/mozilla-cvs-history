#include "nsISupports.idl"

interface nsIChannel;
interface nsIHttpChannel;
interface nsIURI;

/**
 * nsIHttpEventSink
 *
 * Implement this interface to receive control over various HTTP events.  The
 * HTTP channel will try to get this interface from its notificationCallbacks
 * attribute, and if it doesn't find it there it will look for it from its
 * loadGroup's notificationCallbacks attribute.
 *
 * These methods are called before onStartRequest, and should be handled
 * SYNCHRONOUSLY.
 */
[scriptable, uuid(9475a6af-6352-4251-90f9-d65b1cd2ea15)]
interface nsIHttpEventSink : nsISupports
{
    /**
     * Called when a redirect occurs due to a HTTP response like 302.  The
     * redirection may be to a non-http channel.
     *
     * @return failure cancels redirect
     */
    void onRedirect(in nsIHttpChannel httpChannel, 
                    in nsIChannel newChannel);

    /**
     * Called when authentication is required due to a HTTP response like 401.
     *
     * @return failure cancels authentication
     */
    void onAuthenticate(in nsIHttpChannel httpChannel,
                        in string host,
                        in long port,
                        in boolean isProxy,
                        in string realm,
                        inout string username,
                        inout string password);

    /**
     * Called when authentication failed, so username/password caches can be
     * cleared.
     */
    void onAuthenticationFailed(in nsIHttpChannel httpChannel,
                                in string host,
                                in long port,
                                in boolean isProxy,
                                in string realm,
                                in string username,
                                in string password);
};
