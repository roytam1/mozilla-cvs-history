/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is Mozilla.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications.  Portions created by Netscape Communications are
 * Copyright (C) 2001 by Netscape Communications.  All
 * Rights Reserved.
 * 
 * Contributor(s): 
 *   Darin Fisher <darin@netscape.com> (original author)
 */

#include "nsISupports.idl"

interface nsIHttpChannel;

[scriptable, uuid(5c6a8dda-0417-4694-807d-aa504699224e)]
interface nsIHttpAuthenticator : nsISupports
{
    /**
     * Called to generate the authentication credentials for a particular
     * server/proxy challenge.
     *
     * @param channel   - the http channel requesting credentials
     * @param challenge - the server specified auth challenge
     * @param username  - the username from which to generate credentials
     * @param password  - the password from which to generate credentials
     * @param extra     - additional information stored in the auth cache
     */
    string generateCredentials(in nsIHttpChannel channel,
                               in string challenge,
                               in wstring username,
                               in wstring password,
                               in nsISupports metadata);

    /**
     * indicates if credentials returned from GenerateCredentials can be reused
     */
    boolean areCredentialsReusable();

    /**
     * indicates if the challenge requires a new username/password (e.g.,
     * if the response was invalid because the nonce has timed out, then
     * the old username/password is still valid).
     */
    boolean challengeRequiresUserPass(in string challenge);

    /**
     * allocate authenticator specific metadata implementation.  implementations
     * that don't need to store extra data in the auth cache can simply return NULL.
     */
    nsISupports allocateMetaData();
};

%{C++
#define NS_HTTP_AUTHENTICATOR_CONTRACTID_PREFIX \
    "@mozilla.org/network/http-authenticator;1?scheme="
%}
