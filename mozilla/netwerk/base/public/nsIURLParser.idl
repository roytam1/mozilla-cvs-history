/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Andreas Otte
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

/**
 * nsIURLParser is the abstract base class for parsing URLs
 */

[scriptable, uuid(4b4975f9-f128-47fd-b11e-88402233cbdf)]
interface nsIURLParser : nsISupports
{

    /**
     * Parses a URL and thinks it is parsing the scheme
     */
    void ParseAtScheme(in  string i_Spec, 
                       out string o_Scheme, 
                       out string o_Username,
                       out string o_Password,
                       out string o_Host, 
                       out long o_Port, 
                       out string o_Path);

    /**
     * Parses a URL and thinks it is parsing the prehost
     */
    void ParseAtPreHost(in  string i_Spec, 
                        out string o_Username,
                        out string o_Password,
                        out string o_Host,
                        out long o_Port, 
                        out string o_Path);

    /**
     * Parses a URL and thinks it is parsing the host
     */
    void ParseAtHost(in  string i_Spec, 
                     out string o_Host,
                     out long o_Port, 
                     out string o_Path);

    /**
     * Parses a URL and thinks it is parsing the port
     */
    void ParseAtPort(in  string i_Spec, 
                     out long o_Port, 
                     out string o_Path);

    /**
     * Parses a URL and thinks it is parsing the path
     */
    void ParseAtPath(in  string i_Spec, 
                     out string o_Path);

    /**
     * Parses a URL-path and thinks it is parsing the directory
     */
    void ParseAtDirectory(in  string i_Path, 
                          out string o_Directory, 
                          out string o_FileBaseName,
                          out string o_FileExtension,
                          out string o_Param, 
                          out string o_Query, 
                          out string o_Ref);

    /**
     * Parses the URL-PreHost into its components
     */
    void ParsePreHost(in  string i_PreHost, 
                      out string o_Username, 
                      out string o_Password);

    /**
     * Parses the URL-Filename into its components
     */
    void ParseFileName(in  string i_FileName, 
                       out string o_FileBaseName, 
                       out string o_FileExtension);

};
