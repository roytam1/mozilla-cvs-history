/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsIStreamObserver.idl"

interface nsIBufferInputStream;
interface nsIInputStream;
interface nsIBufferOutputStream;
interface nsIEventQueue;

[scriptable, uuid(1a637020-1482-11d3-9333-00104ba0fd40)]
interface nsIStreamListener : nsIStreamObserver
{
    void onDataAvailable(in nsIChannel channel,
                         in nsISupports ctxt, 
                         in nsIInputStream inStr,
                         in unsigned long sourceOffset,
                         in unsigned long count);
};

%{C++

// An asynchronous stream listener is used to ship data over to another thread specified
// by the thread's event queue. The receiver stream listener is then used to receive
// the data on the other thread.
extern NS_NET nsresult
NS_NewAsyncStreamListener(nsIStreamListener* *result,
                          nsIEventQueue* eventQueue,
                          nsIStreamListener* receiver);

// A synchronous stream listener pushes data through a pipe that ends up
// in an input stream to be read by another thread.
extern NS_NET nsresult
NS_NewSyncStreamListener(nsIInputStream **inStream,
                         nsIBufferOutputStream **outStream,
                         nsIStreamListener **listener);

%}
