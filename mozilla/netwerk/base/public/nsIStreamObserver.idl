/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsIEventQueue;
interface nsIChannel;

[scriptable, uuid(fd91e2e0-1481-11d3-9333-00104ba0fd40)]
interface nsIStreamObserver : nsISupports
{
    /**
     * Called to signify the beginning of an asyncronous request.
     */
    void onStartRequest(in nsIChannel channel,
                        in nsISupports ctxt);

    /**
     * Called to signify the end of an asyncronous request.
     * @param notif - a notification object containing any error code and error parameters
     *                (may be null if the notification status is NS_OK)
     */
    void onStopRequest(in nsIChannel channel,
                       in nsISupports ctxt,
                       in nsresult status,
                       in wstring statusArg);
};

/**
 * An asynchronous stream observer is used to ship data over to another thread specified
 * by the thread's event queue. The receiver stream observer is then used to receive
 * the notifications on the other thread. 
 *
 * This interface only provides the initialization needed after construction. Otherwise,
 * these objects are used simply as nsIStreamObservers.
 */
[scriptable, uuid(a28dc590-91b3-11d3-8cd9-0060b0fc14a3)]
interface nsIAsyncStreamObserver : nsIStreamObserver
{
    /**
     * Initializes an nsIAsyncStreamObserver. 
     * @param eventQueue - may be null indicating the calling thread's event queue
     */
    void init(in nsIStreamObserver receiver,
              in nsIEventQueue eventQueue);
};

%{C++

// Use this CID to construct an nsIAsyncStreamObserver
#define NS_ASYNCSTREAMOBSERVER_CID                   \
{ /* fcc7c380-91b3-11d3-8cd9-0060b0fc14a3 */         \
    0xfcc7c380,                                      \
    0x91b3,                                          \
    0x11d3,                                          \
    {0x8c, 0xd9, 0x00, 0x60, 0xb0, 0xfc, 0x14, 0xa3} \
}

////////////////////////////////////////////////////////////////////////////////
// Generic status codes for OnStopRequest:

#define NS_BINDING_SUCCEEDED    NS_OK
#define NS_BINDING_FAILED       NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 1)
#define NS_BINDING_ABORTED      NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 2)

%}

