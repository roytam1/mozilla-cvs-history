/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsIChannel;
interface nsIEventQueue;

[scriptable, uuid(fd91e2e0-1481-11d3-9333-00104ba0fd40)]
interface nsIStreamObserver : nsISupports
{
    /**
     * Called to signify an asynchronous request that failed before it
     * could be started.  This corresponds to an error condition being
     * reached after AsyncRead/Write has returned but before the first
     * onStartRequest has been called.
     *
     * @param channel - channel being observed
     * @param ctxt - user specified data passed to AsyncRead/Write
     */
    // PENDING API REVIEW
    //void onFailRequest(in nsIChannel channel,
    //                   in nsISupports ctxt,
    //                   in nsresult errorCode);

    /**
     * Called to signify the beginning of an asynchronous request.
     *
     * @param channel - channel being observed
     * @param ctxt - user specified data passed to AsyncRead/Write
     */
    void onStartRequest(in nsIChannel channel,
                        in nsISupports ctxt);

    /**
     * Called to signify the end of an asynchronous request.  This
     * call is always preceded by a call to onStartRequest.
     *
     * @param channel - channel being observed
     * @param ctxt - user specified data passed to AsyncRead/Write
     * @param statusCode - reason for stopping (NS_OK if completed successfully)
     * @param statusText - human readable reason for stopping (can be NULL)
     */
    void onStopRequest(in nsIChannel channel,
                       in nsISupports ctxt,
                       in nsresult statusCode,
                       in wstring statusText);
};

/**
 * A stream observer proxy is used to ship data over to another thread specified
 * by the thread's event queue. The "true" stream observer's methods are 
 * invoked on the other thread.
 *
 * This interface only provides the initialization needed after construction. Otherwise,
 * these objects are used simply as nsIStreamObserver's.
 */
[scriptable, uuid(a28dc590-91b3-11d3-8cd9-0060b0fc14a3)]
interface nsIStreamObserverProxy : nsIStreamObserver
{
    /**
     * Initializes an nsIStreamObserverProxy.
     *
     * @param observer - receives observer notifications on the other thread
     * @param eventQ - may be NULL indicating the calling thread's event queue
     */
    void init(in nsIStreamObserver observer,
              in nsIEventQueue eventQ);
};

%{C++
// Generic status codes for OnStopRequest:
#define NS_BINDING_SUCCEEDED NS_OK
#define NS_BINDING_FAILED    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 1)
#define NS_BINDING_ABORTED   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 2)
%}
