/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

/* The nsINetModuleMgr singleton service allows external module to register
 * themselves with the networking library to receive events they want to
 * receive.
 *
 * An external module that is interested in being notified when a particular 
 * networking level event occurs would register with this service, and 
 * implement the appropriate interface(s) that correspond to the events they
 * want to receive. These interfaces are defined by networking internal
 * components (for example, http would define a notification interface that
 * the external cookies module would implement).
 */

#include "nsISupports.idl"
#include "nsIEnumerator.idl"
#include "nsINetNotify.idl"

interface nsIEventQueue;

%{ C++

// {4EBDAFE0-13BA-11d3-A15A-0050041CAF44}
#define NS_NETMODULEMGR_CID \
{ 0x4ebdafe0, 0x13ba, 0x11d3, { 0xa1, 0x5a, 0x0, 0x50, 0x4, 0x1c, 0xaf, 0x44 } }

// The list of available PROGIDS to register for notification on.
#define NS_NETWORK_MODULE_MANAGER_HTTP_REQUEST_PROGID          "component://netscape/network/moduleMgr/http/request"
#define NS_NETWORK_MODULE_MANAGER_HTTP_RESPONSE_PROGID         "component://netscape/network/moduleMgr/http/response"
%}

[scriptable, uuid(ff9ead40-0ef2-11d3-9de6-0010a4053fd0)]
interface nsINetModuleMgr : nsISupports {
	
    // Register the external module to receive notifications.
    // 
    // ARGUMENTS:
    // aTopic: The internal component that the external module wants to monitor.
    // aNotify: The external module interface methods to be called when an event is fired.
    //
    // RETURNS: nsresult
	void registerModule(in string aTopic, in nsINetNotify aNotify);

    // Unregister the external module. Removes the nsINetModuleMgr binding between
    // internal component and external module.
    //
    // ARGUMENTS:
    // aTopic: The internal component being monitored.
    // aNotify: The external modules notification module.
    //
    // RETURNS: nsresult
    void unregisterModule(in string aTopic, in nsINetNotify aNotify);

    // Enumerates all the registered modules for the specified topic.
    //
    // ARGUMENTS:
    // aTopic: the component to get all the notifiers for.
    // aEnumerator: the array of notifiers.
    void enumerateModules(in string aTopic, out nsISimpleEnumerator aEnumerator);
};
