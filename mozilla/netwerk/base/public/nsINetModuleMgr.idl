/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

/* The nsINetModuleMgr singleton service allows external module to register
 * themselves with the networking library to receive events they want to
 * receive.
 *
 * An external module that is interested in being notified when a particular 
 * networking level event occurs would register with this service, and 
 * implement the appropriate interface(s) that correspond to the events they
 * want to receive. These interfaces are defined by networking internal
 * components (for example, http would define a notification interface that
 * the external cookies module would implement).
 */

#include "nsISupports.idl"

[scriptable, uuid(ff9ead40-0ef2-11d3-9de6-0010a4053fd0)]
interface nsINetModuleMgr : nsISupports {
	
    // Register the external module to receive notifications.
    // 
    // ARGUMENTS:
    // aComponent: The internal component that the external module wants to monitor.
    // aEventQueue: The event queue to receive the events.
    // aNotify: The external module interface methods to be called when an event is fired.
    //
    // RETURNS: nsresult
	void RegisterModule(in string aComponent, in nsIEventQueue* aEventQueue, in nsINetNotify aNotify);

    // Unregister the external module. Removes the nsINetModuleMgr binding between
    // internal component and external module.
    //
    // ARGUMENTS:
    // aComponent: The internal component being monitored.
    // aNotify: The external modules notification module.
    //
    // RETURNS: nsresult
    void UnregisterModule(in string aComponent, in nsINetNotify aNotify);

    // Enumerates all the registered modules for the specified component.
    //
    // ARGUMENTS:
    // aComponent: the component to get all the notifiers for.
    // aNotifiers: the array of notifiers.
    void EnumerateModules(in string aComponent, out nsINetNotify* ** aNotifiers);
};