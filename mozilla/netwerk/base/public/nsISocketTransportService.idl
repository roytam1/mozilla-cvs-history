/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is 
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or 
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsITransport;
interface nsIEventSinkGetter;
interface nsIChannel;
interface nsIProxyInfo;

[scriptable, uuid(05331390-6884-11d3-9382-00104ba0fd40)]
interface nsISocketTransportService : nsISupports 
{
    /**
     * Creates a transport for a specified host and port.
     *
     * @param proxyInfo Information about any transport-layer proxying. Used
     * for communicating information about proxies like socks.
     * This can either be the proxyInfo attribute on an
     * nsISupportsTransparentProxy (or from the protocolProxyService),
     * or null for no proxying.
     *
     * @see nsISupportsTransparentProxy
     * @see nsIProtocolProxyService::GetProxyInfo
     */
    nsITransport createTransport(in string host,
                                 in long port,
                                 in nsIProxyInfo proxyInfo,
                                 in unsigned long bufferSegmentSize,
                                 in unsigned long bufferMaxSize);
    
    nsITransport createTransportOfType(in string socketType,
                                       in string host, 
                                       in long port,
                                       in nsIProxyInfo proxyInfo,
                                       in unsigned long bufferSegmentSize,
                                       in unsigned long bufferMaxSize);

    nsITransport createTransportOfTypes(in unsigned long typeCount,
				      [array, size_is(typeCount)] in string socketTypes,
                                        in string host, 
                                        in long port,
                                        in nsIProxyInfo proxyInfo,
                                        in unsigned long bufferSegmentSize,
                                        in unsigned long bufferMaxSize);

    /**
     * Returns true if the specified transport is good enough for 
     * being used again. The situations in which this may return false
     * include- an error including server resets, an explicit 
     * Connection: close header (for HTTP) and timeouts! 
     */
    boolean reuseTransport(in nsITransport i_Transport);

    void init	 ();
    void shutdown();
    void wakeup  (in nsITransport i_Transport);

	/**
	 * Total number of nsSocketTransport objects currently alive
	 */
	readonly attribute unsigned long totalTransportCount;
	/**
	 * A number of nsSocketTransport objects with I/O operation currently in-progress
	 */
	readonly attribute unsigned long inUseTransportCount;
	/**
	 * A number of nsSocketTransport objects connected (this may include keep-alive idle connections)
	 */
	readonly attribute unsigned long connectedTransportCount;

    /**
	 * Autodial helper is enabled via pref.
     */
    attribute boolean autodialEnabled;

};

%{C++
#define NS_SOCKETTRANSPORTSERVICE_CID                \
{ /* c07e81e0-ef12-11d2-92b6-00105a1b0d64 */         \
    0xc07e81e0,                                      \
    0xef12,                                          \
    0x11d2,                                          \
    {0x92, 0xb6, 0x00, 0x10, 0x5a, 0x1b, 0x0d, 0x64} \
}

// if a socket connection attempt fails (eg. no server listening at specified host:port)
#define NS_ERROR_CONNECTION_REFUSED NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 13)

// if a socket connection was lost due to a timeout error (eg. PR_Poll times out)
#define NS_ERROR_NET_TIMEOUT NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 14)

// if a socket connection was lost due to a network reset (eg. PR_Poll sets PR_POLL_ERR)
#define NS_ERROR_NET_RESET NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 20)

/**
 * Status nsresult codes: used with nsIProgressEventSink::OnStatus 
 */
#define NS_NET_STATUS_RESOLVING_HOST  NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 3)
#define NS_NET_STATUS_CONNECTED_TO    NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 4)
#define NS_NET_STATUS_SENDING_TO      NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 5)
#define NS_NET_STATUS_RECEIVING_FROM  NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 6)
#define NS_NET_STATUS_CONNECTING_TO   NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 7)

%}
