/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsIChannel;
interface nsIEventSinkGetter;

[scriptable, uuid(05331390-6884-11d3-9382-00104ba0fd40)]
interface nsISocketTransportService : nsISupports 
{
    /**
     * Creates a transport for a specified host and port. 
     * The eventSinkGetter is used to get the appropriate callbacks
     * for the socket activity from the application. These include
     * the progress and the status messages like "Contacting host.."
     * etc. The printHost contains the actual hostname (and not the 
     * proxy) for displaying in status messages. 
     */
    nsIChannel createTransport(in string host,
                               in long port,
                               in string printHost,
                               in unsigned long bufferSegmentSize,
                               in unsigned long bufferMaxSize);
    nsIChannel createTransportOfType(in string socketType,
                                     in string host, 
                                     in long port,
                                     in string printHost,
                                     in unsigned long bufferSegmentSize,
                                     in unsigned long bufferMaxSize);

    /**
     * Returns true if the specified transport is good enough for 
     * being used again. The situations in which this may return false
     * include- an error including server resets, an explicit 
     * Connection: close header (for HTTP) and timeouts! 
     */
    boolean reuseTransport(in nsIChannel i_Transport);
    void init     ();
    void shutdown ();
	void wakeup   (in nsIChannel i_Transport);
};

%{C++
#define NS_SOCKETTRANSPORTSERVICE_CID                \
{ /* c07e81e0-ef12-11d2-92b6-00105a1b0d64 */         \
    0xc07e81e0,                                      \
    0xef12,                                          \
    0x11d2,                                          \
    {0x92, 0xb6, 0x00, 0x10, 0x5a, 0x1b, 0x0d, 0x64} \
}

#define NS_ERROR_CONNECTION_REFUSED NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 13)

#define NS_ERROR_NET_TIMEOUT NS_ERROR_GENERATE_FAILURE(NS_ERROR_MODULE_NETWORK, 14)

%}
