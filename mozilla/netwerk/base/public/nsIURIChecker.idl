/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is 
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Akkana Peck <akkana@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or 
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIRequest.idl"

interface nsIRequest;
interface nsIRequestObserver;

%{C++
#include "nsAString.h"
%}

[scriptable,uuid(0ce148b2-1dd2-11b2-ba70-af918b44b323)]
interface nsIURIChecker : nsISupports
{
  /**
   * Begin asynchronous check for validity.
   * Notification will be asynchronous through the callback.
   *
   * Our interpretations of the nsIRequestObserver errors:
   *   NS_BINDING_SUCCEEDED:   link is valid
   *   NS_BINDING_FAILED:      link is invalid (gave an error)
   *   NS_BINDING_ABORTED:     timed out, or cancelled
   *
   * @param aURI        The URI to be checked.
   * @param aObserver   The object to notify when the link is verified.
   *                    We will call aObserver.OnStartRequest followed
   *                    immediately by aObserver.OnStopRequest.
   *                    It is recommended that the caller use
   *                    OnStopRequest to act on the link's status.
   *                    The underlying request will not be cancelled
   *                    until after OnStopRequest has been called.
   * @param aCtxt       A closure that will be passed back to the
   *                    nsIRequestObserver methods
   * @param aLoadFlags  Load flags to set on the base request.
   */
  nsIRequest asyncCheckURI(in AUTF8String uri, in nsIRequestObserver aObserver,
                           in nsISupports aCtxt, in nsLoadFlags aLoadFlags);

  readonly attribute nsIRequest baseRequest;
};

