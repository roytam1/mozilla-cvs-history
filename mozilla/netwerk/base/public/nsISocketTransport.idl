/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

[scriptable, uuid(785CA0F0-C39E-11d3-9ED6-0010A4053FD0)]
interface nsISocketTransport : nsISupports 
{
    attribute boolean reuseConnection;

    /**
     * socket read/write timeout in seconds; 0 = no timeout
     */
    attribute unsigned long socketTimeout;

    /**
     * socket   connect  timeout in seconds; 0 = no timeout
     */
    attribute unsigned long socketConnectTimeout;

    /**
     * Is used to tell the channel to stop reading data after a certain point;
     * needed by HTTP/1.1
     */
    attribute long bytesExpected;
    attribute unsigned long reuseCount;

    /**
     * Checks if the socket is still alive
     *
     * @param seconds   amount of time after which the socket is always deemed to be
     *                  dead (no further checking is done in this case); seconds = 0
     *                  will cause it not to do the timeout checking at all
     */
    boolean isAlive (in unsigned long seconds);

    /**
     * maximum amount of time in seconds the transport is allowed to stay alive
     * while connected (0 - default; no maximum idle timeout)
     */
    attribute unsigned long idleTimeout;

	/**
	 * the string representation of the underlying ip address. Caller 
	 * is responsible for de-allocating the returned string.
	 */
	[noscript] string GetIPStr(in unsigned long aStrLen);
};
