/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is 
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or 
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsITransport.idl"

[scriptable, uuid(785CA0F0-C39E-11d3-9ED6-0010A4053FD0)]
interface nsISocketTransport : nsITransport 
{
    /**
     * Destination host and port. These are used for reporting status messages
     * Since the end server may change at any time (eg persistent connections
     * through proxies), a client can update this to get correct results.
     * There is no other effect of setting these attributes, and if a proxy
     * server is not being used, NS_ERROR_FAILURE is returned.
     */
    attribute string host;
    attribute long port;

    /**
     *
     */
    attribute boolean reuseConnection;
    
    /**
     * socket read/write timeout in seconds; 0 = no timeout
     */
    attribute unsigned long socketTimeout;
    
    /**
     * socket   connect  timeout in seconds; 0 = no timeout
     */
    attribute unsigned long socketConnectTimeout;
    
    /**
     * Is used to tell the channel to stop reading data after a certain point;
     * needed by HTTP/1.1
     */
    attribute long bytesExpected;
    attribute unsigned long reuseCount;
    
    /**
     * Checks if the socket is still alive
     *
     * @param seconds   amount of time after which the socket is always deemed to be
     *                  dead (no further checking is done in this case); seconds = 0
     *                  will cause it not to do the timeout checking at all
     */
    boolean isAlive (in unsigned long seconds);
    
    /**
     * maximum amount of time in seconds the transport is allowed to stay alive
     * while connected (0 - default; no maximum idle timeout)
     */
    attribute unsigned long idleTimeout;
    
	/**
	 * the string representation of the underlying ip address. Caller 
	 * is responsible for de-allocating the returned string.
	 */
	[noscript] string GetIPStr(in unsigned long aStrLen);
};
