#
# The contents of this file are subject to the Netscape Public
# License Version 1.1 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://www.mozilla.org/NPL/
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
# implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code is mozilla.org code.
#
# The Initial Developer of the Original Code is Netscape
# Communications Corporation.  Portions created by Netscape are
# Copyright (C) 1998 Netscape Communications Corporation. All
# Rights Reserved.
#
# Contributor(s): 
#

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

include $(DEPTH)/config/autoconf.mk

ifdef MOZ_STATIC_COMPONENTS
MODULE		= staticmod
LIBRARY_NAME	= staticmod
SHORT_LIBNAME	= statcmod
endif

IS_COMPONENT	= 1

include $(topsrcdir)/config/config.mk

REQUIRES	= xpcom \
		  $(NULL)

ifdef MOZ_STATIC_COMPONENTS
CPPSRCS		= nsStaticModule.cpp
endif

LOCAL_INCLUDES	= -I$(srcdir)

#
# _COMPONENT_BASE is the base name of the meta component library
# that we are building in the current pass of this makefile
#
# mozcomps is a special name used to specify that we want to link all
# of the non-meta components into this special meta component
#
ifdef _COMPONENT_BASE
ifeq ($(_COMPONENT_BASE),mozcomps)
_FINAL_COMPONENT_NAMES := $(shell cat $(FINAL_LINK_COMP_NAMES))
_FINAL_COMPONENT_LIBS := $(shell cat $(FINAL_LINK_COMPS))
_FINAL_LINK_LIBS := $(shell cat $(FINAL_LINK_LIBS))
_META_COMPONENT_NAMES := _FINAL_COMPONENT_NAMES
_META_COMPONENT_LIBS := _FINAL_COMPONENT_LIBS
_META_DEP_LIBS := _FINAL_LINK_LIBS
else
ifeq ($(_COMPONENT_BASE),embed_mozcomps)
_FINAL_COMPONENT_NAMES := $(shell cat embed-link-comp-names)
_FINAL_COMPONENT_LIBS := $(shell cat embed-link-comps)
_FINAL_LINK_LIBS := $(shell cat $(FINAL_LINK_LIBS))
_META_COMPONENT_NAMES := _FINAL_COMPONENT_NAMES
_META_COMPONENT_LIBS := _FINAL_COMPONENT_LIBS
_META_DEP_LIBS := _FINAL_LINK_LIBS
else
_META_COMPONENT_NAMES := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)
_META_COMPONENT_LIBS := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)_comps
_META_DEP_LIBS := MOZ_META_COMPONENTS_$(_COMPONENT_BASE)_libs
endif # embed_mozcomps
endif # mozcomps
endif # _COMPONENT_BASE

ifdef MOZ_STATIC_COMPONENTS
SHARED_LIBRARY_LIBS = \
		$(foreach m, $(MOZ_STATIC_COMPONENTS), $(DIST)/lib/components/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
endif

ifdef _COMPONENT_BASE
ifneq ($(_COMPONENT_BASE),mozcomps)
SHARED_LIBRARY_LIBS = $(foreach m,$($(_META_COMPONENT_LIBS)), $(DIST)/lib/components/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
EXTRA_DSO_LDOPTS += $(foreach m,$($(_META_DEP_LIBS)), $(DIST)/lib/$(LIB_PREFIX)$(m).$(LIB_SUFFIX))
endif
endif

#
# Create each meta component by calling this makefile recursively
# and forcing it to built a shared library meta component library
#
ifndef NO_RECURSE
ifneq (,$(filter embed_mozcomps,$(MOZ_META_COMPONENTS)))
export:: embed-link-comps embed-link-comp-names trim-final-lists
endif

libs clean distclean clobber realclean clobber_all::
	+set -e; \
	for f in $(MOZ_META_COMPONENTS); do \
		$(MAKE) NO_RECURSE=1 BUILD_SHARED_LIBS=1 BUILD_STATIC_LIBS= LIBRARY_NAME=meta_$$f CPPSRCS=nsMetaModule_$$f.cpp _COMPONENT_BASE=$$f $@ ; \
	done
endif

ifneq (,$(findstring mozcomps, $(LIBRARY_NAME)))
include $(topsrcdir)/config/static-config.mk
endif

include $(topsrcdir)/config/rules.mk

ifneq (,$(findstring mozcomps, $(LIBRARY_NAME)))
include $(topsrcdir)/config/static-rules.mk
endif

ifdef MOZ_STATIC_COMPONENTS
EXTRA_DSO_LDOPTS += \
		$(ZLIB_LIBS) \
		$(XPCOM_LIBS) \
		$(MOZ_JS_LIBS) \
		$(NSPR_LIBS) \
		$(PNG_LIBS) \
		-ljsdom
endif

ifdef MOZ_META_COMPONENTS
# Force XPCOM_TRANSLATE_NSGM_ENTRY_POINT to be defined so the macros
# in nsIGenericFactory.h will come out in the wash.
DEFINES += -DMETA_MODULE=\"$(LIBRARY_NAME)\" -DXPCOM_TRANSLATE_NSGM_ENTRY_POINT

ifeq ($(LIBRARY_NAME),meta_mail)
EXTRA_DSO_LDOPTS += \
	$(LIBS_DIR) \
	$(call EXPAND_MOZLIBNAME,xpcom_compat gkgfx rdfutil_s) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(NULL)
endif # meta_mail

ifeq ($(LIBRARY_NAME),meta_crypto)
EXTRA_DSO_LDOPTS += \
	$(MOZ_JS_LIBS) \
	$(NSS_LIBS) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(NULL)
endif # meta_crypto

#ifeq ($(LIBRARY_NAME),meta_mozcomps)
ifneq (,$(findstring mozcomps, $(LIBRARY_NAME)))

# We don't want to link mozcomps against NSS if not necessary
ifneq (,$(findstring crypto,$(MOZ_META_COMPONENTS)))
STATIC_EXTRA_LIBS := $(filter-out $(NSS_LIBS),$(STATIC_EXTRA_LIBS))
endif

EXTRA_DSO_LDOPTS += \
	$(LIBS_DIR) \
	$(STATIC_EXTRA_DSO_LIBS) \
	$(STATIC_EXTRA_LIBS) \
	$(MOZ_JS_LIBS) \
	$(MOZ_UNICHARUTIL_LIBS) \
	$(MOZ_COMPONENT_LIBS) \
	$(TK_LIBS) \
	$(NULL)
endif # meta_mozcomps

endif # MOZ_META_COMPONENTS

ifeq ($(OS_ARCH),WINNT)
OS_LIBS	+= ole32.lib shell32.lib
endif

GARBAGE += $(CPPSRCS) embed-link-comps embed-link-comp-names components

list:
	echo $(MOZ_STATIC_COMPONENTS)

ifdef _NO_AUTO_VARS
_TARGET = $(srcdir)/$(@F)
GARBAGE	+= $(addprefix $(srcdir)/,$(CPPSRCS))
else
_TARGET = $@
endif

# This is so sick! We'll work backwards from the embedding manifest to
# produce the set of components that we need to link in to a
# ``minimal'' embedding harness.
ifeq ($(OS_ARCH),WINNT)
EMBED_MANIFEST	= \
	$(topsrcdir)/embedding/config/basebrowser-win \
	$(topsrcdir)/embedding/config/basebrowser-win-supp \
	$(topsrcdir)/embedding/config/gre-win \
	$(topsrcdir)/embedding/config/gre-win-supp \
	$(NULL)
else
EMBED_MANIFEST	= \
	$(topsrcdir)/embedding/config/basebrowser-unix \
	$(NULL)
endif
ifeq ($(LIBRARY_NAME),meta_embed_mozcomps)
_EMBED_DEPS = $(EMBED_MANIFEST) embed-link-comps embed-link-comp-names
endif

ifdef MOZ_STATIC_COMPONENTS
nsStaticModule.cpp: nsMetaModule.cpp.in Makefile Makefile.in $(DEPTH)/config/autoconf.mk
	rm -f $@
	cat $< | \
	sed -e "s|%DECLARE_SUBMODULE_INFOS%|$(foreach m, $(MOZ_STATIC_COMPONENTS), extern nsModuleInfo NSMODULEINFO($(m));)|" | \
	sed -e "s|%SUBMODULE_INFOS%|$(foreach m, $(MOZ_STATIC_COMPONENTS), \\& NSMODULEINFO($(m)),)|" \
	> $(_TARGET)
endif

nsMetaModule_%.cpp: nsMetaModule.cpp.in Makefile Makefile.in $(topsrcdir)/config/config.mk $(_EMBED_DEPS)
	rm -f $@
	cat $< | \
	sed -e "s|%DECLARE_SUBMODULE_INFOS%|$(foreach m, $($(_META_COMPONENT_NAMES)), extern nsModuleInfo NSMODULEINFO($(m));)|" | \
	sed -e "s|%SUBMODULE_INFOS%|$(foreach m, $($(_META_COMPONENT_NAMES)), \\& NSMODULEINFO($(m)),)|" \
	> $(_TARGET)

# Create a map that we can use to go from library name to component
# symbol. N.B. that this will break if the $(FINAL_LINK_COMP_NAMES)
# and $(FINAL_LINK_COMPS) somehow get out-of-sync and aren't in
# _exactly_ the same order. (Hey, this is a hack!)
components: $(FINAL_LINK_COMPS) $(FINAL_LINK_COMP_NAMES) Makefile Makefile.in
	paste $(FINAL_LINK_COMPS) $(FINAL_LINK_COMP_NAMES) | sort -k 1,1 > $@

# Compute the embedding libs by extracting them from the embedding
# manifest.
#
# We start by selecting anything that starts with `components/', as
# these are the component libraries. We print the `first' field to
# strip off any crap after the library name. Next, we select for files
# ending with `.so' so we end up with only the libraries. We then rip
# off the `components/lib' prefix and the `.so' suffix, leaving just
# the library name. This list is sorted, and joined with the list of
# components that were actually _built_ to cull out anything that's
# included in the manifest, but wasn't built.
ifeq ($(OS_ARCH),WINNT)
_FILE_SEP:=\\
else
_FILE_SEP:=/
endif
embed-link-comps: $(EMBED_MANIFEST) components Makefile Makefile.in
	awk '{ if (/^components/) { print $$1 } }' \
		$(filter-out components %Makefile %Makefile.in,$^) | \
		grep '$(DLL_SUFFIX)$$' | \
		sed -e 's|^components$(_FILE_SEP)$(LIB_PREFIX)||' -e 's|$(DLL_SUFFIX)$$||' | \
		sort | \
		join -o 1.1 - components > $@

# Compute the symbols we'll need for the ``minimal embedding client''
# by joining the compoent list with the sorted list of embedding
# components.
embed-link-comp-names: embed-link-comps components
	sort embed-link-comps | join -o 2.2 - components > $@

#
# Remove components that are linked into the embed_mozembed shared lib
# from the final list of libs
#
trim-final-lists: embed-link-comps embed-link-comp-names
	$(PERL) $(topsrcdir)/config/trim-list.pl $(FINAL_LINK_COMPS) embed-link-comps
	$(PERL) $(topsrcdir)/config/trim-list.pl $(FINAL_LINK_COMP_NAMES) embed-link-comp-names
	touch components embed-link-comps embed-link-comp-names
