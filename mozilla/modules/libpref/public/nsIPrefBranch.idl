/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * The Initial Developer of the Original Code is Netscape Communications
 * Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 * Alec Flett <alecf@netscape.com>
 * Brian Nesse <bnesse@netscape.com>
 */

#include "nsISupports.idl"

interface nsIObserver;

[scriptable, uuid(56c35506-f14b-11d3-99d3-ddbfac2ccf65)]
interface nsIPrefBranch : nsISupports
{
  const long ePrefInvalid = 0;
  const long ePrefLocked = 1;
  const long ePrefUserset = 2;
  const long ePrefConfig = 4;
  const long ePrefRemote = 8;
  const long ePrefLilocal = 16;
  const long ePrefString = 32;
  const long ePrefInt = 64;
  const long ePrefBool = 128;
  const long ePrefValuetypeMask = (ePrefString | ePrefInt | ePrefBool);

  /*
   * the root of this branch, such as "browser."
   */
  readonly attribute string root;

  /*
   * standard methods for accessing preferences
   */
  long    getPrefType(in string prefName);

  boolean getBoolPref(in string prefName);
  void    setBoolPref(in string prefName, in long value);

  string  getCharPref(in string prefName);
  void    setCharPref(in string prefName, in string value);

  long    getIntPref(in string prefName);
  void    setIntPref(in string prefName, in long value);

  /*
   * methods for accessing complex preferences (i.e. items beyond the simple bool, char, and int)
   */
  void getComplexValue(in string prefname, in nsIIDRef type, [iid_is(type), retval] out nsQIResult value);
  void setComplexValue(in string prefname, in nsIIDRef type, in nsISupports value);

  /*
   * methods for preference state manipulation
   */
  void    clearUserPref(in string prefName);
  void    lockPref(in string pref);
  boolean prefIsLocked(in string pref);
  void    unlockPref(in string pref);


  /*
   * branch-level operations
   */

  /*
   * clearBranch
   * 
   * clears all user preferences starting at the given preference prefix
   * pass in null or "" to clear this branch
   */
  void clearBranch(in string startingAt);

  /*
   * deleteBranch
   * 
   * removes all preferences starting at the given preference prefix
   * pass in null or "" to remove this branch
   */
  void deleteBranch(in string startingAt);

  /*
   * getChildList
   *
   * Returns an array of strings representing the child preferences of the branch root
   * 
   * @param startingAt pass in null or "" to enumerate the entire branch
   * @param count Receives the number of elements in the array.
   * @param childArray Receives the array of child preferences.
   */
  void getChildList(in string startingAt,
                    out unsigned long count,
                    [array, size_is(count), retval] out string childArray);


  /*
   * Listeners
   */

  /*
   * The observers have their |Observe| methods called with
   * ([the observer], "nsPref:changed", [pref name]).
   */
  void addObserver(in string domain, in nsIObserver observer);
  void removeObserver(in string domain, in nsIObserver observer);

};

