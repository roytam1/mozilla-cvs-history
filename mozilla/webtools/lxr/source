#!/usr/bin/perl
# $Id$
# source --	Present sourcecode as html, complete with references
#
#	Arne Georg Gleditsch <argggh@ifi.uio.no>
#	Per Kristian Gjermshus <pergj@ifi.uio.no>
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

######################################################################

use Local;
use lib 'lib';
use SimpleParse;
use LXR::Common;
use LXR::Config;
use File::Basename;

sub diricon {
    my $img, $link;
    if ($filename eq '..') {
	$img = "/icons/back.gif";
	$link = $parentdir;
    } else {
	my $dir =  $Path->{'real'}.$filename;
	$dir =~ s#/$##;
	if (-l $dir) {
	    $img = "/icons/forward.gif";
        } else {
	    $img = "/icons/folder.gif";
#	    $img = "internal-gopher-menu";
	}
	$link = $Path->{'virt'}.$filename;
    }
    return(&fileref("<IMG ALIGN=ABSBOTTOM BORDER=0 SRC=\"$img\">", $link));
}

sub dirname {
    if ($filename eq '..') {
	return(&fileref("Parent directory", $parentdir));
    } else {
	return(&fileref($filename, $Path->{'virt'}.$filename));
    }
}


sub fileicon {
    my $img;

    if ($filename =~ /^.*\.[ch]$/) {
	$img = "/icons/c.gif";
#	$img = "internal-gopher-text";
    } elsif ($filename =~ /^.*\.(idl|cpp?|cc|java)$/) {
	# TODO: Find a nice icon for c++ files (KDE?)
	$img = "/icons/c.gif";
#	$img = "internal-gopher-text";
    } else {		
	$img = "/icons/text.gif";
#	$img = "internal-gopher-unknown";
    }

    return(&fileref("<IMG ALIGN=ABSBOTTOM BORDER=0 SRC=\"$img\">",
		    $Path->{'virt'}.$filename));
}


sub filename {
    my $string =
        &fileref($filename, $Path->{'virt'}.$filename);
    if (isHTML($filename) || isCSS($filename)) {
        $string =~ s/(a href=".*)(")/$1?force=1$2/g;
    }
    return $string;
}


sub filesize {
    my $templ = shift;
    my $s = (-s $Path->{'real'}.$filename);
    my $str;
    if ($s < 1<<10) {
	$str = "$s";
    } else {
#	if ($s < 1<<20) {
	    $str = ($s>>10) . "k";
#	} else {
#	    $str = ($s>>20) . "M";
#	}
    }
    return(&expandtemplate($templ,
			   ('bytes',	sub {return($str)}),
			   ('kbytes',	sub {return($str)}),
			   ('mbytes',	sub {return($str)})
			   ));
}


sub modtime {

    my $current_time = time;
    my $file_time = (stat($Path->{'real'}.$filename))[9];

    my @t = gmtime($file_time);

    my @months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun",
		  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
    my ($sec, $min, $hour, $mday, $mon, $year) = @t;
    $year += 1900;
    $mon = $months[$mon];

    my $one_hour = (60 * 60);
    my $six_months = $one_hour * 24 * int(365/2);

    if ($file_time <= ($current_time - $six_months) ||
	$file_time >= ($current_time + $one_hour)) {
	return sprintf("%s %2d  %04d", $mon, $mday, $year);
    } else {
	return sprintf("%s %2d %02d:%02d", $mon, $mday, $hour, $min);
    }
}

sub bgcolor {
    if (!($line % 3)) {
	$color = ($color eq "#EEEEEE")? "#FFFFFF": "#EEEEEE";
    }
    return($color);
}


sub direxpand {
    my $templ = shift;
    my $direx = '';
    local $line = 0;
    local $filename;
    local $filestat;
    local $color="#FFFFFF";
    my $virtpath = $Path->{'virt'};
    my $realpath = $Path->{'real'};

    foreach $filename (@dirs) {
	$line++;
	$direx .= &expandtemplate($templ,
	    ('iconlink',		\&diricon),
	    ('namelink',		\&dirname),
	    ('filesize',		sub {return('-')}),
	    ('modtime',		\&modtime),
	    ('bgcolor',		\&bgcolor),
	    ('description',	\&descexpand));
    }
	
    foreach $filename (@files) {
	$line++;
	next if $filename =~ /^.*\.[oa]$|^core$|^00-INDEX$/;
	$direx .= &expandtemplate($templ,
	    ('iconlink',	\&fileicon),
	    ('namelink',	\&filename),
	    ('filesize',	\&filesize),
	    ('modtime',		\&modtime),
	    ('bgcolor',		\&bgcolor),
	    ('description',	\&fdescexpand));
    }

    return($direx);
}

sub printdir {
    my $template;
    my $index;
    local %index;
    local @dirs;
    local @files;
    local $parentdir;

{
my $q;
print "<!--
";
foreach $q (keys %ENV) {
print "export $q='$ENV{$q}'
";
}
print "
-->
";
}
    $template = "<ul>\n\$files{\n<li>\$iconlink \$namelink\n}</ul>\n";
    if ($Conf->htmldir) {
	unless (open(TEMPL, $Conf->htmldir)) {
	    &warning("Template ".$Conf->htmldir." does not exist.");
	} else {
	    $save = $/; undef($/);
	    $template = <TEMPL>;
	    $/ = $save;
	    close(TEMPL);
	}
    }
	
    if (opendir(DIR, $Path->{'real'})) {
	foreach $f (sort(grep/^[^\.]/,readdir(DIR))) {
	    if ($f eq "CVS") {
		# skip it
	    } elsif ($f eq ".svn") {
		# skip it
	    } elsif (-d $Path->{'real'}.$f) {
		push(@dirs,"$f/");
	    } else {
		push(@files,$f);
	    }
	}
	closedir(DIR);
    } else {
	print("<p align=center>\n<i>This directory does not exist.</i>\n");
	if ($Path->{'real'} =~ m#(.+[^/])[/]*$#) {
	    if (-e $1) {
		&warning("Unable to open ".$Path->{'real'});
	    }
	}
	return;
    }
 
    if (-f $Path->{'real'}."00-INDEX") {
	open(INDEX,$Path->{'real'}."00-INDEX") ||
	    &warning("Existing \"00-INDEX\" could not be opened.");
	$save = $/; undef($/);
	$index = <INDEX>;
	$/ = $save;
	
	%index = $index =~ /\n(\S*)\s*\n\t-\s*([^\n]*)/gs;
    }

    if ($Path->{'virt'} =~ m#^(.*/)[^/]*/$#) {
	$parentdir = $1;
	unshift(@dirs, '..');
    }

    # print the description of the current directory
    dirdesc($Path->{'virt'});

    #print the listing itself
    print(&expandtemplate($template,
			  ('files',	\&direxpand)));
}

sub isHTML {
my $file = shift;
    return ($file =~ /\.html?$/);
}

sub isCSS {
my $file = shift;
    return ($file =~ /stylesheet\.(css)$/) ||
          (($file =~ /\.(css)$/) && $ENV{HTTP_ACCEPT} !~ 'text/html');
}

sub isImage {
my $file = shift;
    return 
          (($file =~ /\.([jmp][pnm]e?g|gif)$/) && $ENV{HTTP_ACCEPT} !~ 'text/html');
}

sub noWrap {
my $file = shift;
    return isHTML($file) ||
           isImage($file) ||
           isCSS($file);
}

sub printfile {
    my $string;

    unless ($Path->{'file'}) {
	&printdir;
    } else {
	if (open(SRCFILE, $Path->{'realf'})) {
	    if (isHTML($Path->{'file'})) {
                local $/ = undef;
		print <SRCFILE>;
	    } elsif (isCSS($Path->{'file'})) {
$head = "Content-Type: text/css\r\n\r\n";
                print $head;
                local $/ = undef;
my $body = <SRCFILE>;
                print $body;
            } elsif (isImage($Path->{'file'})) {
                my $kind = 'x-unknown';
                $kind = 'jpeg' if $Path->{'file'} =~ /\.jpe?g$/;
                $kind = 'gif' if $Path->{'file'} =~ /\.gif$/; 
                $kind = 'png' if $Path->{'file'} =~ /\.[jp]ng$/;
                print 
$head = "Content-Type: image/$kind\r\n\r\n";
                local $/ = undef;
my $body = <SRCFILE>;
                print $body;
	    } elsif ($Path->{'file'} =~ /README$/i) {
		print("<pre lang='en'>");
		while(<SRCFILE>) {
            	    $string = $string . $_;
        	}
                print(markupstring($string, $Path->{'virt'}));
		print("</pre>");
	    } else {
	        if (($Path->{'file'} =~ /nsI\w*\.idl$/)) {
	          my $base = basename($Path->{'file'}, ".idl"); 
                  my $dir = $Path->{'virt'};
                  $dir =~ s#^/([^/]+)(.*)#$1#;
                  my $doxRoot = "http://unstable.elemental.com/mozilla/build/latest/mozilla/" . $dir . "/dox/";
                  print("<p>Inheritance diagram for " . $base . ":</P>\n");
                  print("<p align=\"center\">\n");
                  print("<img src=\"" . $doxRoot . "interface" . $base . "__inherit__graph.gif\"");
		  print(" align=\"center\" border=\"0\" alt=\"Inheritance graph\">\n");
                  print("</p>\n");
                  print("<p>Collaboration diagram for " . $base . ":</p>\n");
                  print("<p align=\"center\">\n");
                  print("<Iimg src=\"" . $doxRoot . "interface" . $base . "__coll__graph.gif\"");
		  print(" align=\"center\" border=\"0\" alt=\"Collaboration graph\">\n");
                  print("</p>\n");
                  print("<p align=\"center\">\n");
                  print("[ <a href=\"" .$doxRoot . "interface" . $base . ".html\">\n");
                  print("<i>" . $base . "</i> Interface Reference</a> |");
                  print(" <a href=\"" . $doxRoot . "graph_legend.htm l\">Graph Legend</a> ]\n");
                  print("</p>\n");
                }
		print("<pre lang='en'>");
		&markupfile(\*SRCFILE, $Path->{'virt'}, $Path->{'file'},
                             sub { print shift });
		print("</pre>");
	    }
	    close(SRCFILE);
	} else {

	    print("<p align=center>\n<i>This file does not exist.</i>\n");
            print("<p>Maybe you can <a href='".$Conf->baseurl."/find?string=".$Path->{'file'}."'>find it elsewhere</a>.\n");
	    if (-f $Path->{'real'}.$Path->{'file'}) {
		&warning("Unable to open ".$Path->{'realf'});
	    }
	}
    }
}

($Conf, $HTTP, $Path, $head) = &init($0);
my $exit = 0;

#only allow access to registered roots
#for anything else redirect to the directory containing source
unless (defined $Path->{'root'}) {
    #if we're accessed as source/ then we need to be a bit more directed.
    my $path = $ENV{'PATH_INFO'};
    $path =~ s|[^/]+||g;
    $path =~ s{/}{../}g;
    my $prefix = $path || './';
    my $refresh = "Refresh: 0; url=$prefix
";
    $head .= "$refresh
";
    $exit = 1;
}

#if the file is html then don't print a header because the file
#has its own -dme
if (($ENV{'PATH_INFO'} !~ m|/$|) && (-d $Path->{'realf'})) {
 my @dirs = split m|/|, $Path->{'realf'};
 my $entryname = $dirs[$#dirs];
 my $refresh = "Refresh: 0; url=$entryname/
";
    $head .= "$refresh
";

 $exit = 1;
} 

my $strange_inexplicable_check = (-f $Path->{'real'}.$Path->{'file'});
my $skip_wrap = $Path->{'file'} && noWrap($Path->{'file'});
print "$head
" if (!$Path->{'file'} || isHTML($Path->{'file'}) || !$skip_wrap);
exit if $exit;

if (
    !$skip_wrap
   ) {
    if ($Path->{'file'}) {
	&makeheader('source');
    } else {
	&makeheader('sourcedir');
    }
}

&printfile;

if (
    !$skip_wrap
   ) {
    if ($Path->{'file'}) {
	&makefooter('source');
    } else {
	&makefooter('sourcedir');
    }
}
