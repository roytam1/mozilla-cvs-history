[%# The contents of this file are subject to the Mozilla Public
  # License Version 1.1 (the "License"); you may not use this file
  # except in compliance with the License. You may obtain a copy of
  # the License at http://www.mozilla.org/MPL/
  #
  # Software distributed under the License is distributed on an "AS
  # IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  # implied. See the License for the specific language governing
  # rights and limitations under the License.
  #
  # The Original Code is Litmus.
  #
  # The Initial Developer of the Original Code is Netscape Communications
  # Corporation. Portions created by Netscape are
  # Copyright (C) 1998 Netscape Communications Corporation. All
  # Rights Reserved.
  #
  # Contributor(s): Zach Lipton <zach@zachlipton.com>
#%]
  
[%# INTERFACE:
  # none
#%]

[% # Create js enabled select boxen for sysconfig and
   # product/group/subgroup categories. %]

[% # javascript to allow for the editing of tests and the submission of 
   # test results 
%]
[% BLOCK edittestsscript %]
var editedtests = new Array();
var fields = ["product", "summary", "testgroup", "subgroup", 
    "communityenabled_row"];
function showEdit(testid) { 
    for (var i=0; i<fields.length; i++) {
        show(getField(fields[i]+"_edit",testid));
        hide(getField(fields[i]+"_text",testid));
    }
    
    hide(getField("editlink", testid));
    show(getField("canceleditlink", testid));
    
    MM_findObj("Submit").value = "Submit Results and Edits";
    editedtests.push(testid);
}

function findEdited() {
    MM_findObj("editingTestcases").value = editedtests.toString();
}

function cancelEdit(testid) {
    for (var i=0; i<fields.length; i++) {
        hide(getField(fields[i]+"_edit",testid));
        show(getField(fields[i]+"_text",testid));
    }
    
    show(getField("editlink", testid));
    hide(getField("canceleditlink", testid));
    
    // remove testid from the editedtests array:
    var newarray = new Array();
    for (var i=0; i<editedtests.length; i++) {
        if (editedtests[i] != testid) {
            newarray.push(testid);    
        }
    }
    editedtests=newarray;
    
    if (! editedtests[0]) {
        MM_findObj("Submit").value = "Submit Results";
    }
}

// fields are in the format fieldname_testid
function getField(fieldname, testid) {
    return MM_findObj(fieldname+"_"+testid);    
}

function show(obj) {
    if (obj) {
        obj.style.display = "";
    }
}

function hide(obj) {
    if (obj) {
        obj.style.display = "none";
    }
}
[% END %]


[% # platform dropdown box
   # defaultplatform - the object for the default platform selection 
   #                   (can be either a single object or a list)
   # test (optional) - if present, the selection name will be platform_testid
%]
[% BLOCK platformbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    
    [% IF defaultplatform %]
    [% valuelist = defaultplatform.list.join(',') %]
    <input name="platform[%testidflag FILTER html %]_default" 
        id="platform[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%valuelist FILTER html%]">
    [% END %]
    <select name="platform[%testidflag%]" id="platform[%testidflag FILTER html%]" 
        onchange="changePlatform([%test.testid FILTER js%])"
        class="select_platform">
    </select>
[% END %]


[% # opsys dropdown box
   # test (optional) - if given, the select name will be opsys_testid
   # defaultopsys - the default opsys to select
   #                (can be either a single object or a list)
%]
[% BLOCK opsysbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    [% IF defaultopsys %]
    [% valuelist = defaultopsys.list.join(',') %]
    <input name="opsys[%testidflag FILTER html %]_default" 
        id="opsys[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%valuelist FILTER html%]">
    [% END %]
    <select name="opsys[%testidflag FILTER html%]" id="opsys[%testidflag FILTER html%]" 
        class="select_opsys">
    </select>
[% END %]

[% # branch dropdown box
   # defaultbranch - default branch selection
   #                  (can be either a single object or a list)
   # test (optional) - if given, the select name will be branch_branchid
%]
[% BLOCK branchbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    [% IF defaultbranch %]
    [% valuelist = defaultbranch.list.join(',') %]
    <input name="branch[%testidflag FILTER html %]_default" 
        id="branch[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%valuelist FILTER html%]">
    [% END %]
    <select name="branch[%testidflag FILTER html%]" id="branch[%testidflag FILTER html%]" 
        class="select_branch">
    </select>
[% END %]

[% # testgroup drowndown box
   # default (optional) - the default selection
   #                     (can be either a single object or a list)
   # testid (optional) - the current testid. If given, 
   #    the selname will be testgroup_testid
%]
[% BLOCK testgroupbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    [% IF default %]
    [% valuelist = default.list.join(',') %]
    <input name="testgroup[%testidflag FILTER html %]_default" 
        id="testgroup[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%default FILTER html%]">
    [% END %]
    <select name="testgroup[%testidflag FILTER html%]" id="testgroup[%testidflag FILTER html%]" 
        onchange="changeTestgroup([%test.testid FILTER js%])"
        class="select_testgroup">
    </select>
[% END %]

[% # subgroup drowndown box
   # default (optional) - the default selection
   #                     (can be either a single object or a list)
   # testid (optional) - the current testid. If given, 
   #    the selname will be subgroup_testid
%]
[% BLOCK subgroupbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    [% IF default %]
    [% valuelist = default.list.join(',') %]
    <input name="subgroup[%testidflag FILTER html %]_default" 
        id="subgroup[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%valuelist FILTER html%]">
    [% END %]
    <select name="subgroup[%testidflag FILTER html%]" id="subgroup[%testidflag FILTER html%]" 
        class="select_subgroup">
    </select>
[% END %]


[% # product dropdown box 
   # selected (optional) - product for the default selection
   #                     (can be either a single object or a list)
   # test (optional) - the current test object. If given, 
   #    the selname will be product_testid
%]
[% BLOCK productbox %]
    [% IF test %] [% testidflag = "_$test.testid" %] 
    [% ELSE %] [% testidflag = "" %][% END %]
    [% IF selected %]
    [% valuelist = selected.list.join(',') %]
    <input name="product[%testidflag FILTER html %]_default" 
        id="product[%testidflag FILTER html %]_default" 
        type="hidden" 
        value="[%valuelist FILTER html%]">
    [% END %]
    <select name="product[%testidflag FILTER html%]" id="product[%testidflag FILTER html%]" 
        onchange="changeProduct([%test.testid FILTER js%])"
        class="select_product">
    </select>
[% END %]

[% BLOCK selectscripts %]
<script>
function selects_onload() {
    load_products(getElementByClass("select_product"));
    load_testgroups(getElementByClass("select_testgroup"));
    load_subgroups(getElementByClass("select_subgroup"));
    
    load_platforms(getElementByClass("select_platform"));
    load_opsyses(getElementByClass("select_opsys"));
    load_branches(getElementByClass("select_branch"));
}

function load_products(selects) {
    if (!selects) { return; }
    // for each select box in selects, load in the list of products
    for (var select=0; select<selects.length; select++) {
        var productbox = selects[select];
        clearSelect(productbox);
        addNullEntry(productbox);
        for (var i=0; i<litmusconfig.length; i++) {
            var option = makeOption(litmusconfig[i]);
            productbox.add(option, null);
            // handle the default selection
            if (isDefault(document.getElementById(productbox.name+"_default"), litmusconfig[i]['id'])) {
                 productbox.selectedIndex = i+1;
            }
        }
    }
}

function load_testgroups(selects) {
    if (!selects[0]) { return; }
    // load the proper list of testgroups for the 
    // currently selected product for each testgroup
    // select:
    for (var select=0; select<selects.length; select++) {
        var groupbox = selects[select];
        clearSelect(groupbox);
        addNullEntry(groupbox);
        // find the currently selected product that goes with this select
        var productbox = document.getElementById("product"+groupbox.name.substr(9));
        var productid = productbox.options[productbox.selectedIndex].value;
        var product = getProductById(productid);
        if (!product) {
            return;
        }
        // now get the list of testgroups that goes with that product:
        var testgroups = product['testgroups'];
        for (var group=0; group<testgroups.length; group++) {
            var option = makeOption(testgroups[group])
            groupbox.add(option, null);
            // handle the default selection
            if (isDefault(document.getElementById(groupbox.name+"_default"), testgroups[group]['id'])) {
                    groupbox.selectedIndex = group+1;
            }     
        }
    }
}

function load_subgroups(selects) {
    if (!selects[0]) { return; }
    for (var select=0; select<selects.length; select++) {
        var subgroupbox = selects[select];
        clearSelect(subgroupbox);
        addNullEntry(subgroupbox);
        // find the currently selected testgroup that goes with this select
        var testgroupbox = document.getElementById("testgroup"+subgroupbox.name.substr(8));
        var testgroupid = testgroupbox.options[testgroupbox.selectedIndex].value;
        var testgroup = getTestgroupById(testgroupid);
        if (!testgroup) {
            // no testgroup set
            return;
        }
        // now get the list of subgroups that goes with that testgroup
        var subgroups = testgroup['subgroups'];
        for (var i=0; i<subgroups.length; i++) {
            var option = makeOption(subgroups[i]);
            subgroupbox.add(option, null);
            if (isDefault(document.getElementById(subgroupbox.name+"_default"), subgroups[i]['id'])) {
                    subgroupbox.selectedIndex = i+1;
            }
        }
    }
} // wow, that was fun


function load_platforms(selects) {
    if (!selects[0]) { return; }
    for (var select=0; select<selects.length; select++) {
        var platformbox = selects[select];
        clearSelect(platformbox);
        addNullEntry(platformbox);
        // find the currently selected product that goes with this select
        var productbox = document.getElementById("product"+platformbox.name.substr(8));
        var productid = productbox.options[productbox.selectedIndex].value;
        var product = getProductById(productid);
        if (!product) {
            // no product set
            return;
        }
        var platforms = product['platforms'];
        for (var i=0; i<platforms.length; i++) {
            var option = makeOption(platforms[i]);
            platformbox.add(option, null);
            if (isDefault(document.getElementById(platformbox.name+"_default"), platforms[i]['id'])) {
                    platformbox.selectedIndex = i+1;
            }
        }
    }
}

function load_branches(selects) {
    if (!selects[0]) { return; }
    for (var select=0; select<selects.length; select++) {
        var branchbox = selects[select];
        clearSelect(branchbox);
        addNullEntry(branchbox);
        // find the currently selected product that goes with this select
        var productbox = document.getElementById("product"+branchbox.name.substr(6));
        var productid = productbox.options[productbox.selectedIndex].value;
        var product = getProductById(productid);
        if (!product) {
            // no product set
            return;
        }
        var branches = product['branches'];
        for (var i=0; i<branches.length; i++) {
            var option = makeOption(branches[i]);
            branchbox.add(option, null);
            if (isDefault(document.getElementById(branchbox.name+"_default"), branches[i]['id'])) {
                 branchbox.selectedIndex = i+1;
            }
        }
    }
}

function load_opsyses(selects) {
    if (!selects[0]) { return; }
    for (var select=0; select<selects.length; select++) {
        var opsysbox = selects[select];
        clearSelect(opsysbox);
        addNullEntry(opsysbox);
        // find the currently selected platform
        var platformbox = document.getElementById("platform"+opsysbox.name.substr(5));
        var platformid = platformbox.options[platformbox.selectedIndex].value;
        var platform = getPlatformById(platformid);
        if (!platform) {
            return;
        }
        var opsyses = platform['opsyses'];
        for (var i=0; i<opsyses.length; i++) {
            var option = makeOption(opsyses[i]);
            opsysbox.add(option, null);
           if (isDefault(document.getElementById(opsysbox.name+"_default"), opsyses[i]['id'])) {
                 opsysbox.selectedIndex = i+1;
            }
        }
    }
}

function changeProduct(testid) {
    var testidflag = "";
    if (testid) { testidflag = "_"+testid; }
    
    load_testgroups([document.getElementById("testgroup"+testidflag)]);    
    changeTestgroup(testid);
    
    load_platforms([document.getElementById("platform"+testidflag)]);
    changePlatform(testid);
    
    load_branches([document.getElementById("branch"+testidflag)]);
}

function changeTestgroup(testid) {
    var testidflag = "";
    if (testid) { testidflag = "_"+testid; }
    
    load_subgroups([document.getElementById("subgroup"+testidflag)]);
}

function changePlatform(testid) {
    var testidflag = "";
    if (testid) { testidflag = "_"+testid; }
    
    load_opsyses([document.getElementById("opsys"+testidflag)]);
}

function addNullEntry(select) {
    // add a blank entry to the current select:
    select.add(new Option("---", "---", false, false), null);
}

function clearSelect(select) {
    // remove all options from a select:
    while (select.options[0]) {
        select.remove(0);
    }
}

function getProductById(prodid) {
    for (var i=0; i<litmusconfig.length; i++) {
        if (litmusconfig[i]['id'] == prodid) {
                return(litmusconfig[i]);
        }
    }    
}

function getTestgroupById(testgroupid) {
    for (var i=0; i<litmusconfig.length; i++) {
        for (var j=0; j<litmusconfig[i]['testgroups'].length; j++) {
            if (litmusconfig[i]['testgroups'][j]['id'] == testgroupid) {
                return(litmusconfig[i]['testgroups'][j]);
            }
        }
    }    
}


function getPlatformById(platformid) {
    for (var i=0; i<litmusconfig.length; i++) {
        for (var j=0; j<litmusconfig[i]['platforms'].length; j++) {
            if (litmusconfig[i]['platforms'][j]['id'] == platformid) {
                return(litmusconfig[i]['platforms'][j]);
            }
        }
    }    
}


// pass this the <input> containing the list of possible default values
// and the current value, returns true if the current value appears in 
// defaultInput, otherwise returns false
function isDefault(defaultInput, curvalue) {
    if (! defaultInput) { return false; }
    var defaultarray = defaultInput.value.split(',');
    for (var i=0; i<defaultarray.length; i++) {
        if (defaultarray[i] == curvalue) { 
        return true; 
        }
    }
    return false;
}

function makeOption(obj) {
    return new Option(obj['name'], obj['id'], false, false)
}

function getElementByClass(theClass) {
    var elements = new Array();
    var all = document.getElementsByTagName("*"); 
    for (var i=0; i<all.length; i++) {
        if (all[i].className == theClass) {
            elements.push(all[i]);
        }
    }
    return elements;
}
</script>
[% END %]