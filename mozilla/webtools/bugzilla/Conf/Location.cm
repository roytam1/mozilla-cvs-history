package Conf::Location;
use Conf;
use File::Spec;
no warnings;

# Our job is to find out where they want to install bugzilla
# we do this by preseting one or more 'installtypes.' These are basically 
# mappings which assign each class of files to a directory. 
# In turn, we consult the installtypes file, which gives us mappings from 
# filenames to file classes. Once this whole mess is done, we write out a 
# shell script that will go in the Makefile (built in Finish.cm from Makefile.in)

# here we go...

output "\nChecking for a working cp command: ";
my $copyout = `cp -vR Configure.pl a.pl 2>&1`; # do a dummy copy just to test
unlink('a.pl');
if ($copyout =~ /\`Configure.pl\' -> \`a.pl\'/) {
	output "found\n";
} else {
	output "not found\n";
	die "Your cp command does not appear to function correctly. Do you have one?";
}

output <<EOF;

Bugzilla (or this package containing Bugzilla) includes one or more 
installation layouts that you can use. Please select the layout that you 
would like to use. For assistance, please consult the Bugzilla Guide or 
simply select the default option if you are not sure what to choose.

EOF

my $count = 1;
my $told;
my $installtypes;
open(TYPES,"Conf/Supplies/installtypes") ||
	die "couldn't open installtypes";
while (<TYPES>) {
	my $line = $_;
	chomp($line);
	if ($line =~ /^\@(\w+):(.+)$/) { # begining of a entry
		if ($count ne 1) {
			$count++;
		}
		output "$count) $1\n";
		output "    $2\n";
		push @{$installtypes[$count-1]},$1;
		next;
	} elsif ($line =~ /^\^(\w+):(.+)\|(.+)$/) { # begining of a var def
		output "    Variable: $1: $2\n";
		push @{$installtypes[$count-1]},'$'.$1.'|'.$2.'|'.$3;
		next;
	} elsif ($line =~ /^(\w+)\|(.+)$/) { # begining of a mapping
		output "    The following type of file goes to the following location:\n" unless $told;
		$told = 1;
		output "    $1 -> $2\n";
		push @{$installtypes[$count-1]},'!'.$1.'|'.$2;
		next;
	}
}

print "\n";
ask('layoutchoice','Please select an installation layout','1');
if (getConf('layoutchoice') > $count) {
	die "invalid option\n";
}

close(TYPES);

# yes, that is is a rather nasty data structure we made in $installtyples
# for the record, it looks like this:
#
# installtype1 $var1 $a{b} etc...
# installtype2 $var1 $a{b} etc...
# etc...

# that probably didn't make it any more clear, but anyway
# now we get to go construct a shell script to handle the installation

# but first, we need to know about any variables to define
# on the way through, we setup the loc_foo hashes as well
# and we add mkdir lines to the script

my $count = 0;
my $script;
my $layoutchoice = getConf('layoutchoice');
while ($count-1 ne $#{$installtypes[$layoutchoice-1]}) {
	my $line = $installtypes[layoutchoice][$count];
	$count++;
	if ($line =~ /^\$(\w+)\|(.+)\|(.+)/) {
		output "You will need to choose a location for the following variable:\n";
		output "A directory will be created if it does not already exist\n\n";
		output "$1: $2\n";
		ask("locvar_$1","Please specify a full path (begining with a /):",$3);
		next;
	} elsif ($line =~ /^\!(.*)\|(.*)$/) { # it's a mapping line
		my $name = $1;
		my $loc = $2;
		if ($loc =~ /\$(\w+)/) { # it has a var to substitute
			$var = $1;
			my $varvalue = getConf('locvar_'.$var);
			$loc =~ s/\$$var/$varvalue/;
			setConf("loc_$name",$loc);
			$script .= "mkdir $loc\n";
			next;
		} else {
			setConf("loc_$name",$loc);
			$script .= "mkdir $loc\n";
		}
		
	}
}

# generate the shell script

output "generating installation script\n";
open(FILES,'Conf/Supplies/filemappings') ||
	die "can't open filemappings";

while (<FILES>) {
	my $line = $_;
	chomp($line);
	@line = split('\|',$line);
	# $line[0] has the file and $line[1] has the filetype
	my $type = $line[1];
	my $loc = getConf("loc_$type");
	$script .= "cp -R ".$line[0]." $loc\n";
}

close(FILES);

setConf('installscript',$script);

output "installation script generated\n";

1;
