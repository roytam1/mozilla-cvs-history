package Conf::NewConfiguration;
use Conf;
no warnings;

# Here is where we ask localconfig-like questions
# it's called "NewConfiguration" because it's only for new installations

output <<EOF;

Now, I have a series of questions to ask about how you would like 
your Bugzilla installation configured. In some cases, 
you may need to ask your system administrator about certain 
questions or consult some documentation. If this is the case, 
you can just answer 'stop' to any of the questions and I will 
save your settings so you can come back where you were next time.

First of all, what is your prefered text editor of choice?
I will use this editor to allow you to easially give answers 
to some of the longer configuration questions. 

EOF

ask('editor','Favorite text editor?',$ENV{'EDITOR'});


my @databases = qw(mysql);

output "\nI need to know what type of database you would like to use.\n";
output "Your choices are:\n";
foreach $cur (@databases) { output $cur."\n" }
output "\n";

storeData();

my $found;

{ # bare blocks are really annoying but it works, thanks to
    # Randle L Schwartz in http://perlmonks.org/index.pl?node_id=239614
    ask('databasetype','Database type?','mysql');
    
    
    foreach $cur (@databases) {
        if (getConf('databasetype') eq $cur) {
            $found = 1;
            last;
        }
    }
    
    unless ($found) {
        output "Sorry, invalid option\n\n";
        redo;
    }
}

storeData();

output "Now that you have selected your database type,\n";
output "we will need to configure your database information\n\n";

output "Please enter the name of the database you wish to use.\n";
output "If it does not already exist, it will be created for you and\n";
output "Any existing data in this database may be deleted.\n";
output "Remember that you can answer 'stop' at any time to save your settings\n";
ask('db_name','Database name?','bugs');

output "Now configuring other database access configuration settings\n";
ask('db_port',"Database port?",3306);
ask('db_user',"Database username?",'bugs');
ask('db_pass',"Database password (leave blank if none)?",'');
storeData();

output "Now configuring database options\n";
output "Remember you can answer 'stop' for any question to save your settings and exit\n\n";
ask('db_sock',"Please select the database socket you wish to use. Leaving this option blank is almost always the right choice:",'');

storeData();

if (getConf('databasetype') eq 'mysql') {
	# If we are using mysql, we need the path to the binaries
	# Code snipped from checksetup to find a default
	my $mysql_binaries = `which mysql`;
	my $defauttext;
	if ($mysql_binaries =~ /no mysql/) {
    	# If which didn't find it, just provide a reasonable default
    	$mysql_binaries = "/usr/bin";
	} else {
    	$mysql_binaries =~ s:/mysql\n$::;
    	$defaulttext = " A suitable default was autodetected on your system."
	}

	ask ('mysqlpath',"Please specify only the directory name, with no trailing slash to the MySQL binaries on your system.$defaulttext",$mysql_binaries);
}


output "Server configuration questions\n\n";

output <<EOF;
If you are using Apache for your web server, Bugzilla can create .htaccess
files for you that will instruct Apache not to serve files that shouldn't
be accessed from the web (like your local configuration data and non-cgi
executable files).  For this to work, the directory your Bugzilla
installation is in must be within the jurisdiction of a <Directory> block
in the httpd.conf file that has 'AllowOverride Limit' in it.  If it has
'AllowOverride All' or other options with Limit, that's fine.
(Older Apache installations may use an access.conf file to store these
<Directory> blocks.) See the Bugzilla Guide for more information.
EOF

ask('create_htaccess','Create .htaccess files?','y');

# normalize the input so we don't have to do this later in the makefile
normalizeYN('create_htaccess');

output <<EOF;

Bugzilla uses index.cgi for it's homepage instead of the traditional 
index.html. Some web servers ship pre-configured to use index.cgi files 
automatically, but it may not be possible to configure your server 
in this way. Bugzilla can generate an index.html file to automatically redirect 
users to your index.cgi file. See the Bugzilla Guide for more information.
EOF

ask('index_html',"Create index.html file?",'n');
normalizeYN('index_html');

output "Security related settings\n";
if ($^O !~ /MSWin32/i) { # no webservergroup for win
		output <<EOF;
You will now need to set the group your web server runs on.
If you do not have access to the group your web server runs under,
set this to "". However, if you do set this to "", then your Bugzilla 
installation will be _VERY_ insecure, because some files will be world 
readable/writable,and so anyone who can get local access to your machine 
can do whatever theywant. You should only have this set to "" if this is 
a testing installation and you cannot set this up any other way. 
YOU HAVE BEEN WARNED. If you set this to anything besides "", 
you will need to run make as root, or as a user who is a 
member of the specified group.
EOF
	
	{ # we redo to here if they give an invalid name
		ask('webservergroup','Web server group?','nobody');
		unless (getgrnam(getConf('webservergroup'))) {
			# if we got here, the group doesn't exist
			output "Invalid group name on your system\n";
			redo;
		}
	}
	
}

output "Installation configuration\n\n";
# ZLL: note that currently this has not been adjusted to allow distributors to customize
# this should be done if there is demand

# we use File::Temp to get a secure temp file for the user to edit
use File::Temp;
my ($fh,$tempname) = File::Temp::tempfile(); 

print $fh <<EOF;
# Configuration of additional settings
# These settings would be too difficult to set in the normal 
# configuration interface, so you can set them here instead.

# If you need to change these settings later, simply rerun Configure.pl, 
# selecting the option to upgrade or change your settings. Change these settings
# as you desire and Configure.pl will adjust your database as needed. It is not 
# recomended to attempt to change your settings manually

# IMPORTANT: do not change this line:
package EditorSettings;

###############################
# Begin configuration section #
###############################
\@severities = (
        "blocker",
        "critical",
        "major",
        "normal",
        "minor",
        "trivial",
        "enhancement"
);

\@priorities = (
        "P1",
        "P2",
        "P3",
        "P4",
        "P5"
);

\@opsys = (
        "All",
        "Windows 3.1",
        "Windows 95",
        "Windows 98",
        "Windows ME",  # Millenium Edition (upgrade of 98)
        "Windows 2000",
        "Windows NT",
        "Windows XP",
        "Mac System 7",
        "Mac System 7.5",
        "Mac System 7.6.1",
        "Mac System 8.0",
        "Mac System 8.5",
        "Mac System 8.6",
        "Mac System 9.x",
        "Mac OS X 10.0",
        "Mac OS X 10.1",
        "Mac OS X 10.2",
        "Linux",
        "BSDI",
        "FreeBSD",
        "NetBSD",
        "OpenBSD",
        "AIX",
        "BeOS",
        "HP-UX",
        "IRIX",
        "Neutrino",
        "OpenVMS",
        "OS/2",
        "OSF/1",
        "Solaris",
        "SunOS",
        "other"
);

\@platforms = (
        "All",
        "DEC",
        "HP",
        "Macintosh",
        "PC",
        "SGI",
        "Sun",
        "Other"
);

\$contenttypes = {
  "html" => "text/html" , 
   "rdf" => "application/xml" , 
   "xml" => "text/xml" , 
    "js" => "application/x-javascript" , 
   "csv" => "text/plain" ,
   "png" => "image/png" ,
};
EOF

close($fh);

output "In order to finish configuring your Bugzilla install, I will need\n";
output "to open your editor of choice. If this fails, please run the following commands\n";
output "manually and set your settings in the config file:\n";
output getConf('editor')." $tempname\n";
output "perl Configure.pl --perl=".getConf('perl')." --tempfile=$tempname\n";

output "\nLaunching your editor, this may take a moment...\n";
sleep(4); # wait a bit so they can read this or at least know it's here
	      # probably should ask them to hit return instead

system(getConf('editor')." ".$tempname); # run the editor

do($fh);

storeData();

1;
