# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This Source Code Form is "Incompatible With Secondary Licenses", as
# defined by the Mozilla Public License, v. 2.0.

package Bugzilla::Extension::Testopia::Reports::Case;

use strict;
use warnings;

use Bugzilla::Constants;
use Bugzilla::Error;
use Bugzilla::Util;

use Bugzilla::Extension::Testopia::Report;
use Bugzilla::Extension::Testopia::TestCase;
use Bugzilla::Extension::Testopia::TestCaseRun;

sub report {
    my ($vars) = @_;
    my $input = Bugzilla->input_params;
    my $template = Bugzilla->template;
    my $cgi = Bugzilla->cgi;

    Bugzilla->login(LOGIN_REQUIRED);
 
    my $type = $input->{'type'} || '';

    if ($type eq 'status-breakdown') {
        my $case_id = trim($input->{'case_id'} || '');

        unless ($case_id) {
            print $cgi->header;
            $vars->{'form_action'} = 'page.cgi?id=tr_case_reports.html';
            $template->process("testopia/case/choose.html.tmpl", $vars)
                || ThrowTemplateError($template->error());
            exit;
        }
        validate_test_id($case_id, 'case');

        my $case = Bugzilla::Extension::Testopia::TestCase->new($case_id);
        return unless $case->canview;

        my @data;
	my $caserun = Bugzilla::Extension::Testopia::TestCaseRun->new({});

        my @names;
        my @values;
        foreach my $status (@{$caserun->get_status_list}) {
            push @names, $status->{'name'};
            push @values, $case->get_caserun_count($status->{'id'});
        }
        push @data, \@names;
        push @data, \@values;

        $vars->{'width'} = 200;
        $vars->{'height'} = 150;
        $vars->{'data'} = \@data;
        $vars->{'chart_title'} = 'Historic Status Breakdown';
        $vars->{'colors'} = (['#858aef', '#56e871', '#ed3f58', '#b8eae1', '#f1d9ab', '#e17a56']);
        print $cgi->header;
        $template->process("testopia/reports/report-pie.png.tmpl", $vars)
            || ThrowTemplateError($template->error());
    }

    else {
        $input->{'current_tab'} = 'case';
        $input->{'viewall'} = 1;
        ### FIXME - tr_list_cases.cgi must be replaced by new code.
        my $report = Bugzilla::Extension::Testopia::Report->new('case', 'tr_list_cases.cgi', $cgi);
        $vars->{'report'} = $report;
        $vars->{'qname'} = $input->{'qname'};

        ### From Bugzilla report.cgi by Gervase Markham
        my $formatparam = $input->{'format'};
        my $report_action = $input->{'report_action'};
        if ($report_action eq "data") {
            # So which template are we using? If action is "wrap", we will be using
            # no format (it gets passed through to be the format of the actual data),
            # and either report.csv.tmpl (CSV), or report.html.tmpl (everything else).
            # report.html.tmpl produces an HTML framework for either tables of HTML
            # data, or images generated by calling report.cgi again with action as
            # "plot".
            $formatparam =~ s/[^a-zA-Z\-]//g;
            trick_taint($formatparam);
            $vars->{'format'} = $formatparam;
            $formatparam = '';
        }
        elsif ($report_action eq "plot") {
            # If action is "plot", we will be using a format as normal (pie, bar etc.)
            # and a ctype as normal (currently only png.)
            $vars->{'cumulate'} = $input->{'cumulate'} ? 1 : 0;
            $vars->{'x_labels_vertical'} = $input->{'x_labels_vertical'} ? 1 : 0;
            $vars->{'data'} = $report->{'image_data'};
        }
        else {
            ThrowUserError("unknown_action", {action => $input->{'report_action'}});
        }

        my $format = $template->get_format("testopia/reports/report", $formatparam,
        scalar($input->{'ctype'}));

        my @time = localtime(time());
        my $date = sprintf "%04d-%02d-%02d", 1900+$time[5],$time[4]+1,$time[3];
        my $filename = "report-" . $date . ".$format->{extension}";

        my $disp = "inline";
        # We set CSV files to be downloaded, as they are designed for importing
        # into other programs.
        if ( $format->{'extension'} eq "csv" || $format->{'extension'} eq "xml" ) {
            $disp = "attachment";
        }

        print $cgi->header( -type => $format->{'ctype'},
                            -content_disposition => "$disp; filename=$filename");

        $vars->{'time'} = $date;
        $template->process("$format->{'template'}", $vars)
            || ThrowTemplateError($template->error());

        exit;
    }
}

1;
