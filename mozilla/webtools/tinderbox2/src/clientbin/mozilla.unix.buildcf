# -*- Mode: perl; indent-tabs-mode: nil -*-

# mozilla.unix.buildcf - this is an example buildcf which looks
# similar to the way in which the original tinderbox build clients
# work.  It is untested and may not actually work but gives an idea
# how I envision the buildcf working.  This configuration file shows
# what I believe belongs in the the build script and what part of the
# original build script should be moved to the Makefile. Run --test to
# see the completed build script which has all the variables
# substituted.


# $Revision$ 
# $Date$ 
# $Author$ 
# $Source$ 
# $Name$ 


# The contents of this file are subject to the Mozilla Public
# License Version 1.1 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://www.mozilla.org/NPL/
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
# implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code is the Tinderbox build tool.
#
# The Initial Developer of the Original Code is Netscape Communications
# Corporation. Portions created by Netscape are
# Copyright (C) 1998 Netscape Communications Corporation. All
# Rights Reserved.
#

# complete rewrite by Ken Estes, Mail.com (kestes@staff.mail.com).
# Contributor(s): 



package UserDef;

# User configurable variables live in their own namespace so that they
# will not contaminate the build script.  The buildscript will get the
# values it needs via well known functions.  This package may also set
# %ENV to effect the build programs.



$BUILD_DIR = "/home/build";
$BUILD_DIR = "/tmp/build";

$CVSROOT = ":pserver:kestes\@charzard:/export/home/cvsroot/libs";

# This is a non standard function and may not be needed for other
# build requirments.  The mozilla/netscape people wish to see the OS
# name in a particular form and this function parses the uname to
# return that string.  This function is called by the function
# build_environment() which is needed in every buildcf file.

sub GetSystemInfo {
    $OS = `uname -s`;
    $OSVer = `uname -r`;
    
    chop($OS, $OSVer);
    
    if ( $OS eq 'AIX' ) {
	$OSVer = `uname -v`;
	chop($OSVer);
	$OSVer = $OSVer . "." . `uname -r`;
	chop($OSVer);
    }
        
    if ( $OS eq 'IRIX64' ) {
	$OS = 'IRIX';
    }
    
    if ($OS eq 'QNX') {
        $OSVer = `uname -v`;
        chomp($os_ver);
        $OSVer =~ s/^([0-9])([0-9]*)$/$1.$2/;
    }

    if ( $OS eq 'SCO_SV' ) {
	$OS = 'SCOOS';
	$OSVer = '5.0';
    }
    
    if ( $OS eq 'HP-UX' ) {
	$OSVer = substr($OSVer,0,4);
    }
    
    if ( $OS eq 'Linux' ) {
	$OSVer = substr($OSVer,0,3);
    }


    return 1;
}


# The environmental variables for building at mozilla/netscape are
# quite complicated, your needs may be much simpler. Putting all
# environmental variable differences into a single function makes it
# clearer exactly how the environment differs on different platforms.

sub build_environment{
  
  GetSystemInfo();
  #print "Path before: $ENV{PATH}\n";
  $ENV{PATH} .= ":$BaseDir/$DirName/mozilla/${ObjDir}/dist/bin";
  if ($OS eq 'AIX') {
    $ENV{PATH} = "/builds/local/bin:$ENV{PATH}:/usr/lpp/xlC/bin";
    $ConfigureArgs   .= '--x-includes=/usr/include/X11 '
      . '--x-libraries=/usr/lib --disable-shared';
    $ConfigureEnvArgs = 'CC=xlC_r CXX=xlC_r';
    $Compiler = 'xlC_r';
    $NSPRArgs .= 'NS_USE_NATIVE=1 USE_PTHREADS=1';
  }
  
  if ($OS eq 'BSD_OS') {
    $ENV{PATH}        = "/usr/contrib/bin:/bin:/usr/bin:$ENV{PATH}";
    $ConfigureArgs .= '--disable-shared';
    $ConfigureEnvArgs = 'CC=shlicc2 CXX=shlicc2';
    $Compiler = 'shlicc2';
    $mail = '/usr/ucb/mail';
    # Because ld dies if it encounters -include
    $MakeOverrides = 'CPP_PROG_LINK=0 CCF=shlicc2';
    $NSPRArgs .= 'NS_USE_GCC=1 NS_USE_NATIVE=';
  }
  
  if ($OS eq 'FreeBSD') {
    $ENV{PATH} = "/bin:/usr/bin:$ENV{PATH}";
    if ($ENV{HOST} eq 'angelus.mcom.com') {
      $ConfigureEnvArgs = 'CC=egcc CXX=eg++';
      $Compiler = 'egcc';
    }
    $mail = '/usr/bin/mail';
  }
  
  if ($OS eq 'HP-UX') {
    $ENV{PATH} = "/opt/ansic/bin:/opt/aCC/bin:/builds/local/bin:"
      . "$ENV{PATH}";
    $ENV{LPATH} = "/usr/lib:$ENV{LD_LIBRARY_PATH}:/builds/local/lib";
    $ENV{SHLIB_PATH} = $ENV{LPATH};
    $ConfigureArgs   .= '--x-includes=/usr/include/X11 '
      . '--x-libraries=/usr/lib --disable-gtktest ';
    $ConfigureEnvArgs = 'CC="cc -Ae" CXX="aCC -ext"';
    $Compiler = 'cc/aCC';
    # Use USE_PTHREADS=1 instead of CLASSIC_NSPR if DCE is installed.
    $NSPRArgs .= 'NS_USE_NATIVE=1 CLASSIC_NSPR=1';
  }
  
  if ($OS eq 'IRIX') {
    $ENV{PATH} = "/opt/bin:$ENV{PATH}";
    $ENV{LD_LIBRARY_PATH}   .= ':/opt/lib';
    $ENV{LD_LIBRARYN32_PATH} = $ENV{LD_LIBRARY_PATH};
    $ConfigureEnvArgs = 'CC=cc CXX=CC CFLAGS="-n32 -O" CXXFLAGS="-n32 -O"';
    $Compiler = 'cc/CC';
    $NSPRArgs .= 'NS_USE_NATIVE=1 USE_PTHREADS=1';
  }
  
  if ($OS eq 'NetBSD') {
    $ENV{PATH} = "/bin:/usr/bin:$ENV{PATH}";
    $ENV{LD_LIBRARY_PATH} .= ':/usr/X11R6/lib';
    $ConfigureEnvArgs = 'CC=egcc CXX=eg++';
    $Compiler = 'egcc';
    $mail = '/usr/bin/mail';
  }
  
  if ($OS eq 'OSF1') {
    $ENV{PATH} = "/usr/gnu/bin:$ENV{PATH}";
    $ENV{LD_LIBRARY_PATH} .= ':/usr/gnu/lib';
    $ConfigureEnvArgs = 'CC="cc -readonly_strings" CXX="cxx"';
    $Compiler = 'cc/cxx';
    $MakeOverrides = 'SHELL=/usr/bin/ksh';
    $NSPRArgs .= 'NS_USE_NATIVE=1 USE_PTHREADS=1';
    $ShellOverride = '/usr/bin/ksh';
  }
  
  if ($OS eq 'QNX') {
    $ENV{PATH} = "/usr/local/bin:$ENV{PATH}";
    $ENV{LD_LIBRARY_PATH} .= ':/usr/X11/lib';
    $ConfigureArgs .= '--x-includes=/usr/X11/include '
      . '--x-libraries=/usr/X11/lib --disable-shared ';
    $ConfigureEnvArgs = 'CC="cc -DQNX" CXX="cc -DQNX"';
    $Compiler = 'cc';
    $mail = '/usr/bin/sendmail';
  }
  
  if ($OS eq 'SunOS') {
    if ($OSVerMajor eq '4') {
      $ENV{PATH} = "/usr/gnu/bin:/usr/local/sun4/bin:/usr/bin:$ENV{PATH}";
      $ENV{LD_LIBRARY_PATH} = "/home/motif/usr/lib:$ENV{LD_LIBRARY_PATH}";
      $ConfigureArgs .= '--x-includes=/home/motif/usr/include/X11 '
	. '--x-libraries=/home/motif/usr/lib';
      $ConfigureEnvArgs = 'CC="egcc -DSUNOS4" CXX="eg++ -DSUNOS4"';
      $Compiler = 'egcc';
    } else {
      $ENV{PATH} = '/usr/ccs/bin:' . $ENV{PATH};
    }
    if ($CPU eq 'i86pc') {
      $ENV{PATH} = '/opt/gnu/bin:' . $ENV{PATH};
      $ENV{LD_LIBRARY_PATH} .= ':/opt/gnu/lib';
      $ConfigureEnvArgs = 'CC=egcc CXX=eg++';
      $Compiler = 'egcc';
      
      # Possible NSPR bug... If USE_PTHREADS is defined, then
      #   _PR_HAVE_ATOMIC_CAS gets defined (erroneously?) and
      #   libnspr21 does not work.
      $NSPRArgs .= 'CLASSIC_NSPR=1 NS_USE_GCC=1 NS_USE_NATIVE=';
    } else {
      # This is utterly lame....
      if ($ENV{HOST} eq 'fugu') {
	$ENV{PATH} = "/tools/ns/workshop/bin:/usrlocal/bin:$ENV{PATH}";
	$ENV{LD_LIBRARY_PATH} = '/tools/ns/workshop/lib:/usrlocal/lib:'
	  . $ENV{LD_LIBRARY_PATH};
	$ConfigureEnvArgs = 'CC=cc CXX=CC';
	my $comptmp   = `cc -V 2>&1 | head -1`;
	chomp($comptmp);
	$Compiler = "cc/CC \($comptmp\)";
	$NSPRArgs .= 'NS_USE_NATIVE=1';
      } else {
	$NSPRArgs .= 'NS_USE_GCC=1 NS_USE_NATIVE=';
      }
      if ($OSVerMajor eq '5') {
	$NSPRArgs .= ' USE_PTHREADS=1';
      }
    }
  }

  #print "Path after: $ENV{PATH}\n";
  
  
  return 1;
}



sub build_scripts {
 
  my ($argv) = "@ARGV";

  # the deps_target depends on a command line option.  If the user runs
  # this script with --depend then we run 'make depend' otherwise we run
  # 'make realclean'
  
  my ($deps_target);


  if ($argv =~ m/--depend/) {
    $deps_target = 'depend';
  } else {
    $deps_target = 'realclean';
  }
  
  
  my($tag);
  if ($argv =~ m/--tag\s*=?\s*(\w+)/) {
    $tag= $1;
  }
  
  $BUILD_DIR =  join('_',
		     $OS,
		     $OSVer,
		     ($BuildDepend?'Depend':'Clobber')
		    );
  
  $Make = 'gmake';
  $Autoconf = 'autoconf -l build/autoconf';
  $CVS = 'cvs -z3';
  $CVSCO_FLAGS = 'co -P';
  ($tag) && ($CVSCO_FLAGS .= " -r $tag");

  $CVS_Module ='';

  $Make_flags = " MAKE='$Make -j $cpus' CVSCO='$CVS $CVSCO_FLAGS' ";
  $ConfigureArgs .= '--cache-file=/dev/null';




# builds describe a sequence of steps needed to perform a "build".
# Each build either succeeds or fails.  Builds can be used for running
# tests and checking source code style in addition to creating binaries.

# Builds may depend on the environment, the OS or special arguments
# passed to the program.  Arguments which are passed after the '--'
# are assumed to be build specific and are ignored by the build
# harness and can be used in defining the build sequence.

# Builds can be architecture dependent (one build name can be used for
# all architectures) or independent (each OS uses a different
# buildname) depending on your application.


# each build can have as many phases as
# are needed (sample: checkout, configure, build, test)


# Each phase must have the following entries:

#	 phase_name: describes what the phase is.

#	 error_status: the tinderbox status which should be returned
#	 if the phase fails.

#	 script: a list of shell commands to be executed in order
#	 until one fails (each command in a separate shell, similar to make).

#	 dir: the directory which will be local while the script is
#	 executing.




$BUILDS = { 
	   'seamonkey' => [
			   {
			    'phase_name' => "print_environment",
			    'error_status' => "build_failed",
			    'dir' => "/",
			    'script' => [
					 "show_env",
					 "rpm -qa",
					 "showref -p",
					],
			   },
			   {
			    'phase_name' => "checkout",
			    'error_status' => "build_failed",
			    'dir' => "$BUILD_DIR",
			    'script' => [
					 "$CVS $CVSCO_FLAGS $CVS_Module",
					 "$Make $Make_flags -f mozilla/client.mk checkout",
					],
			   },
			   {
			    'phase_name' => "configure",
			    'error_status' => "build_failed",
			    'dir' => "$BUILD_DIR/mozilla",
			    'script' => [
					 "$Topsrcdir/$Autoconf",
					 "$ConfigureEnvArgs $Topsrcdir/../configure $ConfigureArgs",
					],
			   },
			    {
			     'phase_name' => "build",
			     'error_status' => "build_failed",
			     'dir' => "$BUILD_DIR/mozilla",
			     'script' => [
					  "$Make $Make_flags $deps_target",
					  "rm -rf dist",
					  "rm -f webshell",
					  "$Make $Make_flags all",
					  "ls -l ./webshell/tests/viewer/viewer",
					 ],
			    },
			   {
			    'phase_name' => "test",
			    'error_status' => "test_failed",
			    'dir' => "$BUILD_DIR/mozilla/test",
			    'script' => [
					 "$Make $Make_flags test",
					],
			   },
			  ],  # end seamonkey
	   
   
	  }; # end %BUILDS

return $BUILDS;
}


# If we are using this build script the tinderbox server should always
# use the "unix" error parser to process the build logs.

sub error_parser_name {
  my (%args) = @_;

  return 'unix';
}


# Our build names on the tinderbox server (column names) are the
# hostname and OS name (and a few other details). We are running the
# same build instructions on each architecture so it makes sense to
# speak of the 'Solaris Build'.  Other users who do not worry about
# porability may use the buildscript buildname.  These users will have
# tinderbox colums with names like: "seamonkey", "grendel", "aurora"
# (these are the names of the 'type' of build).

sub build_name {
  my (%args) = @_;

  my ($argv) = "@ARGV";
  my ($depend) = ($argv =~ m/--depend/);
  
  my ($build_name) = join('.', 
			  $args{'hostname'}, $args{'os'}, 
			  $ENV{'OS'}, $ENV{'OSVer'}, 
			  ($depend?'Depend':'Clobber'));
  $build_name =~ s/\.\.+/\./g;

  return $build_name;
}



# person responsible for the build machines.

sub build_administrator {
  return "your.mailing.addres\@company.com";
}

# addressing information for the build messages

sub mail_to {
  return "tinderbox_builds\@cvs-mirror.mozilla.org";
}


sub mail_from {
  return "tinderbox-build-daemon";
}


# Tell the tinderbox webserver what page to display the build
# information.  In our case we use the same build instructions for
# several different products so this information must be passed in on
# the command line.  We must have this information or the build can
# not be displayed on the webserver, so it is a fatal error not to
# provide it.


sub tree_name {
  my (%args) = @_;
  my ($tree);

  my ($argv) = "@ARGV";
  if ($argv =~ m/--tree\s*=?\s*(\w+)/) {
    $tree= $1;
  } else {
    die("no tree specified on command line\n");
  }

  return $1;
}


1;

