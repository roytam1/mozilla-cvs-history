   interface Node {
     // NodeType
     const int                 DOCUMENT           = 1;
     const int                 ELEMENT            = 2;
     const int                 ATTRIBUTE          = 3;
     const int                 PROCESSING_INSTRUCTION = 4;
     const int                 COMMENT            = 5;
     const int                 TEXT               = 6;
     const int                 CDATA_SECTION      = 7;
     const int                 DOCUMENT_FRAGMENT  = 8;
     const int                 ENTITY_DECLARATION = 9;
     const int                 ENTITY_REFERENCE   = 10;

     readonly attribute wstring nodeName;
     attribute wstring         nodeValue;
     readonly attribute int    nodeType;
     readonly attribute Node   parentNode;
     readonly attribute NodeList childNodes;
     readonly attribute boolean  hasChildNodes;
     readonly attribute Node   firstChild;
     readonly attribute Node   lastChild;
     readonly attribute Node   previousSibling;
     readonly attribute Node   nextSibling;
     readonly attribute NamedNodeMap attributes;
     Node                      insertBefore(in Node newChild, 
                                            in Node refChild)
                                            raises DOMException;
     Node                      replaceChild(in Node newChild, 
                                            in Node oldChild)
                                            raises DOMException;
     Node                      removeChild(in Node oldChild)
                                           raises DOMException;
     Node                      cloneNode();
     boolean                   equals(in Node node, 
                                      in boolean deep);
   };


