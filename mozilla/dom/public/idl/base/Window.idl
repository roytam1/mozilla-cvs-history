interface Window {
/* IID: { 0xa6cf906b, 0x15b3, 0x11d2, \
  { 0x93, 0x2e, 0x00, 0x80, 0x5f, 0x8a, 0xdd, 0x32 } } */
        
        readonly attribute  Window window;
        readonly attribute  Window self;
        readonly attribute  Document document;
        readonly attribute  Navigator navigator;
        readonly attribute  Screen screen;
        readonly attribute  History history;
        readonly attribute  Window parent;
        readonly attribute  Window top;
        readonly replaceable attribute  Window _content;
        readonly replaceable attribute  xpidl nsISidebar sidebar;
        readonly replaceable attribute  xpidl nsIPrompt prompt;

        readonly attribute  BarProp menubar;
        readonly attribute  BarProp toolbar;
        readonly attribute  BarProp locationbar;
        readonly attribute  BarProp personalbar;
        readonly attribute  BarProp statusbar;
        readonly attribute  BarProp scrollbars;
        readonly attribute  BarProp directories;
        readonly attribute  boolean closed;
        readonly attribute  WindowCollection frames;
        readonly attribute  Crypto crypto;
        readonly attribute  Pkcs11 pkcs11;
        readonly replaceable attribute  xpidl nsIControllers controllers;
                 attribute  Window opener;
                 attribute  wstring status;
                 attribute  wstring defaultStatus;
                 attribute  wstring name;
                 attribute  long innerWidth;
                 attribute  long innerHeight;
                 attribute  long outerWidth;
                 attribute  long outerHeight;
                 attribute  long screenX;
                 attribute  long screenY;
                 attribute  long pageXOffset;
                 attribute  long pageYOffset;
        readonly attribute  long scrollX;
        readonly attribute  long scrollY;
		readonly attribute  unsigned long length;

        void  dump(in wstring str);
        void  alert(/* ... */);
	      boolean  confirm(/* ... */);
        // XXX prompt() should be changed back to return a string once
        // the DOM APIs allow us to return null js values for a string.
        // in the meantime, this is the only way to do that:
        jsval  prompt(/* ... */);
        void  focus();
        void  blur();
        void  back();
        void  forward();
        void  home();
        void  stop();
        void  print();

        void  moveTo(in long xPos, in long yPos);
        void  moveBy(in long xDif, in long yDif);
        void  resizeTo(in long width, in long height);
        void  resizeBy(in long widthDif, in long heightDif);
        void  sizeToContent();
        void  GetAttention();
				void  scroll(in long xScroll, in long yScroll);
        void  scrollTo(in long xScroll, in long yScroll);
        void  scrollBy(in long xScrollDif, in long yScrollDif);

        void clearTimeout(in long timerID);
        void clearInterval(in long timerID);
        long setTimeout(/* ... */);
        long setInterval(/* ... */);

        void captureEvents(in long eventFlags);
        void releaseEvents(in long eventFlags);
        void routeEvent(in Event evt);
        void enableExternalCapture();
        void disableExternalCapture();
        void setCursor(in DOMString cursor);

        Window open(/* ... */);
        Window openDialog(/* ... */);
        noscript void  close();
        void  close(/* ... */);

		void updateCommands(in DOMString action);

		DOMString escape(in DOMString str);
        DOMString unescape(in DOMString str);
        Selection getSelection();
        
};

interface EventTarget {
 /* IID: { 0x1c773b30, 0xd1cf, 0x11d2, \
  { 0xbd, 0x95, 0x00, 0x80, 0x5f, 0x8a, 0xe3, 0xf4 } } */

	   void	addEventListener(in DOMString type, in function EventListener listener, in boolean useCapture);
	   void	removeEventListener(in DOMString type, in function EventListener listener, in boolean useCapture);
	   void	dispatchEvent(in Event evt);
};

// Introduced in DOM Level 2:
interface AbstractView {
 /* IID: { 0xf51ebade, 0x8b1a, 0x11d3, \
  { 0xaa, 0xe7, 0x00, 0x10, 0x83, 0x01, 0x23, 0xb4 } } */

  readonly attribute DocumentView     document;
};

// Introduced in DOM Level 2:
interface ViewCSS : AbstractView {
 /* IID: { 0x0b9341f3, 0x95d4, 0x4fa4, \
  { 0xad, 0xcd, 0xe1, 0x19, 0xe0, 0xdb, 0x28, 0x89 } } */

  CSSStyleDeclaration getComputedStyle(in Element elt, 
                                       in DOMString pseudoElt);
};
