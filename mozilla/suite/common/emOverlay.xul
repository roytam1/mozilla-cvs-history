<?xml version="1.0"?>

<!DOCTYPE overlay [
<!ENTITY % tasksDTD SYSTEM "chrome://communicator/locale/tasksOverlay.dtd">
%tasksDTD;
]>

<overlay id="emOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script><![CDATA[
    function toEM()
    {
      toOpenWindowByType("Extension:Manager",
          "chrome://mozapps/content/extensions/extensions.xul");
    }

    function OpenBrowserWindow()
    {
      if (document.documentElement.getAttribute("windowtype") ==
          "navigator:browser" && window.content && window.content.document)
      {
        // if and only if the current window is a browser window and
        // it has a document with a character set, then extract the
        // current charset menu setting from the current document
        // and use it to initialize the new browser window
        window.openDialog(getBrowserURL(), "_blank",
                          "chrome,all,dialog=no", null,
                          "charset=" + window.content.document.characterSet);
      } else if (Components.classes["@mozilla.org/appshell/window-mediator;1"]
                           .getService(Components.interfaces.nsIWindowMediator)
                           .getMostRecentWindow("navigator:browser")) {
        // if a browser window already exists then set startpage to null so
        // navigator.js can check pref for how new window should be opened
        window.openDialog(getBrowserURL(), "_blank",
                          "chrome,all,dialog=no", null);
      } else {
        // open the first browser window as if we were starting up
        var cmdLine = {
          handleFlagWithParam: function handleFlagWithParam(flag, caseSensitive) {
            return flag == "remote" ? "xfeDoCommand(openBrowser)" : null;
          },
          handleFlag: function handleFlag(flag, caseSensitive) {
            return false;
          },
          preventDefault: true
        };
        const clh_prefix = "@mozilla.org/commandlinehandler/general-startup;1";
        Components.classes[clh_prefix + "?type=browser"]
                  .getService(Components.interfaces.nsICommandLineHandler)
                  .handle(cmdLine);
      }
    }
  ]]></script>

  <menupopup id="taskPopup">
    <menuitem id="addonsmgr" insertafter="downloadmgr"
              label="&addonsManagerCmd.label;"
              accesskey="&addonsManagerCmd.accesskey;"
              oncommand="toEM();"/>
  </menupopup>
</overlay>
