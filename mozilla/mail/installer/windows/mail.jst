function registerProgramFolderKey(winreg, fFolderPath)
{
  var subkey;
  var err;

  /* set the Program Folder Path in the Mozilla key in the Windows Registry */
  winreg.createKey("SOFTWARE\\$CompanyName$","");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$";
  winreg.createKey(subkey,"");
  err     = winreg.setValueString(subkey, "CurrentVersion", "$UserAgent$");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$";
  winreg.createKey(subkey,"");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$\\Main";
  winreg.createKey(subkey,"");
  err     = winreg.setValueString(subkey, "Program Folder Path", fFolderPath);
}

function createShortcuts() 
{
  var subkey;
  var valname;
  var szStartMenuPrograms;
  var szStartMenu;
  var szFolderDesktop;
  var szFolderQuickLaunch;
  var szFolderSendTo;
  var szFolderAppData;
  var szStartupFolder;
  var winreg;
  var fWindows;
  var fTemp;
  var fProgram;
  var fDefShortcuts;
  var fileExe;
  var fileReadme;
  var fileLicense;
  var scExeDesc;
  var scReadmeDesc;
  var scLicenseDesc;
  var scProfileDesc;
  var scProfileDescParam;
  var scFolderName;
  var fFolderDesktop;
  var fFolderPath;
  var fFolderPathStr;
  var fFolderQuickLaunch;
  var is_winnt;
  var szCurrentVersion;
  var folderQuickLaunchExists;

  winreg               = getWinRegistry();
  fWindows             = getFolder("Windows");
  fProgram             = getFolder("Program");
  fDefShortcuts        = getFolder("Program","defaults/shortcuts");
  fTemp                = fProgram + "$MainExeFile$";
  fileExe              = getFolder("file:///", fTemp);
  fileReadme           = getFolder("file:///", fProgram + "readme.txt");
  fileLicense          = getFolder("file:///", fProgram + "license.txt");
  scExeDesc            = "$ProductName$";
  scReadmeDesc         = "Readme";
  scLicenseDesc        = "License";
  scProfileDesc        = "Profile Manager";
  scProfileDescParam   = "-ProfileManager";
  scFolderName         = "$ProductName$";

  fileMailIcon              = getFolder("Chrome", "icons/default/messengerWindow.ico");

  if(winreg != null) 
  {
    /* determine if the script is running under NT or not */
    winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
    subkey              = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
    szCurrentVersion    = winreg.getValueString(subkey, "CurrentVersion");
    logComment("szCurrentVersion: " + szCurrentVersion);
    if((szCurrentVersion == "") || (szCurrentVersion == null))
    {
      is_winnt = false;
    }
    else
    {
      is_winnt = true;
    }

    logComment("is_winnt value: " + is_winnt);
    logComment("restrictedAccess value: " + restrictedAccess);
    if(!is_winnt || restrictedAccess)
    {
      winreg.setRootKey(winreg.HKEY_CURRENT_USER);
      subkey              = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders";
      szStartMenuPrograms = winreg.getValueString(subkey, "Programs");
      szStartMenu         = winreg.getValueString(subkey, "Start Menu");
      szFolderDesktop     = winreg.getValueString(subkey, "Desktop");
      szStartupFolder     = winreg.getValueString(subkey, "Startup");
	  }
    else
    {
      winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
      subkey              = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders";
      szStartMenuPrograms = winreg.getValueString(subkey, "Common Programs");
      szStartMenu         = winreg.getValueString(subkey, "Common Start Menu");
      szFolderDesktop     = winreg.getValueString(subkey, "Common Desktop");
      szStartupFolder     = winreg.getValueString(subkey, "Common Startup");
   }

    winreg.setRootKey(winreg.HKEY_CURRENT_USER);
    subkey              = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders";
    szFolderSendTo      = winreg.getValueString(subkey, "SendTo");

    subkey              = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders";
    szFolderAppData     = winreg.getValueString(subkey, "AppData");

    // locate the Quick Launch folder
    szFolderQuickLaunch     = szFolderAppData + "\\Microsoft\\Internet Explorer\\Quick Launch";
    fFolderQuickLaunch      = getFolder("file:///", szFolderQuickLaunch);
    folderQuickLaunchExists = File.isDirectory(fFolderQuickLaunch);
    if(!folderQuickLaunchExists)
    {
      subkey                  = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GrpConv\\MapGroups";
      szFolderQuickLaunch     = winreg.getValueString(subkey, "Quick Launch");
      folderQuickLaunchExists = File.isDirectory(fFolderPath);
      if(folderQuickLaunchExists)
        fFolderQuickLaunch = getFolder("file:///", szFolderQuickLaunch);
    }
    logComment("folderQuickLaunchExists: " + folderQuickLaunchExists);

    subkey              = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$\\Main";
    fFolderPathStr      = winreg.getValueString(subkey, "Program Folder Path");
    if((fFolderPathStr == "") || (fFolderPathStr == null))
    {
      fTemp       = szStartMenuPrograms + "\\" + scFolderName;
      fFolderPath = getFolder("file:///", fTemp);
    }
    else
    {
      /* convert the path string to a path folder object */
      fFolderPath = getFolder("file:///", fFolderPathStr);
    }
    /* convert the path string to a path folder object */
    fFolderDesktop = getFolder("file:///", szFolderDesktop);

    logComment("Folder StartMenuPrograms: " + szStartMenuPrograms);
    logComment("Folder StartMenu        : " + szStartMenu);
    logComment("Folder FolderDesktop    : " + szFolderDesktop);
    logComment("Folder FolderSendTo     : " + szFolderSendTo);
    logComment("Folder FolderQuickLaunch: " + szFolderQuickLaunch);
    logComment("fileExe                 : " + fileExe);
    logComment("fFolderPath             : " + fFolderPath);
    logComment("scExeDesc               : " + scExeDesc);
    logComment("fProgram                : " + fProgram);

    /* explicitly create the fFolderPath even though the windowsShortcut function creates the folder.
     * This is so that the folder creation gets logged for uninstall to remove it. */
    if(!File.exists(fFolderPath))
      File.dirCreate(fFolderPath);
    if(!File.exists(fDefShortcuts))
      File.dirCreate(fDefShortcuts);

    /* create the shortcuts */
    File.windowsShortcut(fileExe, fFolderDesktop, scExeDesc,     fProgram,  "",                 fileExe, 0);
    File.windowsShortcut(fileExe, fFolderPath,    scExeDesc,     fProgram,  "",                 fileExe, 0);
    File.windowsShortcut(fileExe, fDefShortcuts,  scExeDesc,     fProgram,  "",                 fileExe, 0);
    File.windowsShortcut(fileExe, fFolderPath,    scProfileDesc, fProgram,  scProfileDescParam, fileExe, 0);
    File.windowsShortcut(fileReadme,  fFolderPath, scReadmeDesc,  fProgram, "",                 fileReadme, 0);
    File.windowsShortcut(fileLicense, fFolderPath, scLicenseDesc, fProgram, "",                 fileLicense, 0);

    // create shortcut in the Quick Launch folder
    if(folderQuickLaunchExists)
      File.windowsShortcut(fileExe, fFolderQuickLaunch, scExeDesc, fProgram,  "", fileExe, 0);

    if(!restrictedAccess)
    {
      winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
      registerProgramFolderKey(winreg, fFolderPath);
    }

    winreg.setRootKey(winreg.HKEY_CURRENT_USER);
    registerProgramFolderKey(winreg, fFolderPath);

    // Register as a windows XP mail application
    if( IsWinnt() )
    {
      subkey = "Software\\Clients\\Mail\\$ProductNameInternal$";
      winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);

      winreg.createKey(subkey,"");
      winreg.createKey(subkey + "\\DefaultIcon", "");
      winreg.createKey(subkey + "\\shell", "");
      winreg.createKey(subkey + "\\shell\\open", "");
      winreg.createKey(subkey + "\\shell\\open\\command", "");
      winreg.createKey(subkey + "\\InstallInfo","");

      winreg.setValueString(subkey, "", "$ProductName$");

      // path does not need to be quoted per MS doc
      data = fProgram + "chrome\\icons\\default\\messengerWindow.ico,0";
      winreg.setValueString(subkey + "\\DefaultIcon", "", data);

      data = "\"" + fProgram + "$MainExeFile$\"";
      winreg.setValueString(subkey + "\\shell\\open\\command", "", data);

      data = "\"" + fProgram + "uninstall\\$UninstallFile$\" /ua \"$UserAgent$\" /hs";
      winreg.setValueString(subkey + "\\InstallInfo", "HideIconsCommand", data);

      // set this value to 0 because we're not creating the mail shortcuts yet.
      winreg.setValueNumber(subkey + "\\InstallInfo", "IconsVisible", 0);

      data = "\"" + fProgram + "$MainExeFile$\" -silent -nosplash -setDefaultMail";
      winreg.setValueString(subkey + "\\InstallInfo", "ReinstallCommand", data);

      data = "\"" + fProgram + "uninstall\\$UninstallFile$\" /ua \"$UserAgent$\" /ss mail";
      winreg.setValueString(subkey + "\\InstallInfo", "ShowIconsCommand", data);
    }
  }
  else
  {
    logComment("winreg is null");
  }
}

function updateMapi()
{
  var winreg;
  var szValue;
  var szMapiBackupDll;
  var szDefaultMailClient;
  var programMozMapi32File;
  var mainExePath;
  var sfpProgramMozMapi32File;
  var sfpMainExePath;
  var winsysMapi32File;
  var mapiProxyFile;
  var subkey;
  var mailDefaultDescription = "$ProductName$";

  winreg = getWinRegistry();
  if(winreg != null) 
  {
    mainExePath = getFolder("Program", "$MainExeFile$");
    programMozMapi32File = getFolder("Program", "mozMapi32.dll");
    winsysMapi32File = getFolder("Win System", "Mapi32.dll");
    winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);

    // If Mapi_backup_dll *and* the default var of
    // HKEY_LOCAL_MACHINE\Software\Clients\Mail is set, then install
    // mozMapi32.dll to the windows system dir as Mapi32.dll.
    szMapiBackupDll = winreg.getValueString("SOFTWARE\\Mozilla\\Desktop", "Mapi_backup_dll");
    szDefaultMailClient = winreg.getValueString("SOFTWARE\\Clients\\Mail", "");
    logComment("szMapiBackupDll: " + szMapiBackupDll);
    logComment("szDefaultMailClient: " + szDefaultMailClient);
    if((szMapiBackupDll != null) && (szMapiBackupDll != "") &&
       (szDefaultMailClient != null) && (szDefaultMailClient == "$ProductName$"))
    {
      // We do not want to log this file to be uninstalled because the
      // uninstaller already has a special way to deal with restoring the
      // appropriate previous Mapi32.dll.
      addFile("",
              "$Version$",
              "thunderbird/mozMapi32.dll",           // file name in jar to extract 
              getFolder("Win System"),       // Where to put this file (Returned from getFolder) 
              "Mapi32.dll",                  // new name when installed
              DO_NOT_UNINSTALL);
    }

    sfpProgramMozMapi32File = File.windowsGetShortName(programMozMapi32File);
    sfpMainExePath = File.windowsGetShortName(mainExePath);

    subkey  = "SOFTWARE\\Clients\\Mail\\$ProductName$";
    winreg.createKey(subkey, "");
    winreg.setValueString(subkey, "", mailDefaultDescription);
    winreg.setValueString(subkey, "DLLPath", sfpProgramMozMapi32File);

    winreg.createKey(subkey      + "\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\DefaultIcon", "", sfpMainExePath + ",0");

    // Register mailto protocol handler

    winreg.createKey(subkey      + "\\protocols", "");
    winreg.createKey(subkey      + "\\protocols\\mailto", "");
    winreg.setValueString(subkey + "\\protocols\\mailto", "", "URL:MailTo Protocol");
    winreg.setValueString(subkey + "\\protocols\\mailto", "URL Protocol", "");
    winreg.createKey(subkey      + "\\protocols\\mailto\\shell", "");
    winreg.createKey(subkey      + "\\protocols\\mailto\\shell\\open", "");
    winreg.createKey(subkey      + "\\protocols\\mailto\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\protocols\\mailto\\shell\\open\\command", "", sfpMainExePath + " -compose \"%1\"");
    winreg.createKey(subkey      + "\\protocols\\mailto\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\protocols\\mailto\\DefaultIcon", sfpMainExePath + ",0");

    // register shell open command for Mozilla Thunderbird product key under \Mail
    winreg.createKey(subkey      + "\\shell", "");
    winreg.createKey(subkey      + "\\shell\\open", "");
    winreg.createKey(subkey      + "\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\shell\\open\\command", "", sfpMainExePath);

    // Register Thunderbird as a News Reader
    subkey  = "SOFTWARE\\Clients\\News\\$ProductName$";
    winreg.createKey(subkey, "");
    winreg.setValueString(subkey, "", mailDefaultDescription);
    winreg.setValueString(subkey, "DLLPath", sfpProgramMozMapi32File);

    winreg.createKey(subkey      + "\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\DefaultIcon", "", sfpMainExePath + ",0");

    // register shell open command for Mozilla Thunderbird product key under \News
    winreg.createKey(subkey      + "\\shell", "");
    winreg.createKey(subkey      + "\\shell\\open", "");
    winreg.createKey(subkey      + "\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\shell\\open\\command", "", sfpMainExePath);

    // Register News protocol handlers (news, snews, nntp)
    winreg.createKey(subkey      + "\\protocols", "");
    winreg.createKey(subkey      + "\\protocols\\news", "");
    winreg.setValueString(subkey + "\\protocols\\news", "", "URL:News Protocol");
    winreg.setValueString(subkey + "\\protocols\\news", "URL Protocol", "");
    winreg.createKey(subkey      + "\\protocols\\news\\shell", "");
    winreg.createKey(subkey      + "\\protocols\\news\\shell\\open", "");
    winreg.createKey(subkey      + "\\protocols\\news\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\protocols\\news\\shell\\open\\command", "", sfpMainExePath + " -mail \"%1\"");
    winreg.createKey(subkey      + "\\protocols\\news\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\protocols\\news\\DefaultIcon", sfpMainExePath + ",0");

    winreg.createKey(subkey      + "\\protocols\\nntp", "");
    winreg.setValueString(subkey + "\\protocols\\nntp", "", "URL:NNTP Protocol");
    winreg.setValueString(subkey + "\\protocols\\nntp", "URL Protocol", "");
    winreg.createKey(subkey      + "\\protocols\\nntp\\shell", "");
    winreg.createKey(subkey      + "\\protocols\\nntp\\shell\\open", "");
    winreg.createKey(subkey      + "\\protocols\\nntp\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\protocols\\nntp\\shell\\open\\command", "", sfpMainExePath + " -mail \"%1\"");
    winreg.createKey(subkey      + "\\protocols\\nntp\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\protocols\\nntp\\DefaultIcon", sfpMainExePath + ",0");

    winreg.createKey(subkey      + "\\protocols\\snews", "");
    winreg.setValueString(subkey + "\\protocols\\snews", "", "URL:Snews Protocol");
    winreg.setValueString(subkey + "\\protocols\\snews", "URL Protocol", "");
    winreg.createKey(subkey      + "\\protocols\\snews\\shell", "");
    winreg.createKey(subkey      + "\\protocols\\snews\\shell\\open", "");
    winreg.createKey(subkey      + "\\protocols\\snews\\shell\\open\\command", "");
    winreg.setValueString(subkey + "\\protocols\\snews\\shell\\open\\command", "", sfpMainExePath + " -mail \"%1\"");
    winreg.createKey(subkey      + "\\protocols\\snews\\DefaultIcon", "");
    winreg.setValueString(subkey + "\\protocols\\snews\\DefaultIcon", sfpMainExePath + ",0");

    // Register MapiProxy.dll
    mapiProxyFile = getFolder("Program", "MapiProxy.dll");
    err = File.windowsRegisterServer(mapiProxyFile);
    logComment("File.windowsRegisterServer(" + mapiProxyFile + ") returned: " + err);
  }
}

function updateWinIni()
{
  var fWinIni  = getWinProfile(getFolder("Windows"), "win.ini");
  if(fWinIni != null)
  {
    fWinIni.writeString("Mail", "MAPI", "1");
    fWinIni.writeString("Mail", "MAPIX", "1");
  }
}

function IsWinnt()
{
  /* Determines if the script is running under NT or not.
   *
   */
  var winreg = getWinRegistry();
  var subkey;
  var szCurrentVersion;

  winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
  subkey              = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
  szCurrentVersion    = winreg.getValueString(subkey, "CurrentVersion");
  logComment("szCurrentVersion: " + szCurrentVersion);
  if((szCurrentVersion == "") || (szCurrentVersion == null))
  {
    return false;
  }
  else
  {
    return true;
  }
}

function registerMainKeys(winreg)
{
  var subkey;  //the name of the subkey you are poking around in
  var data;
  var err;

  winreg.createKey("SOFTWARE\\$CompanyName$","");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$";
  winreg.createKey(subkey,"");
  err     = winreg.setValueString(subkey, "CurrentVersion", "$UserAgent$");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$";
  winreg.createKey(subkey,"");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$\\Main";
  winreg.createKey(subkey,"");

  err     = winreg.setValueString(subkey, "Install Directory", fProgram);

  // now set Mozilla\Mozilla Thunderbird\bin\PathToExe so 3rd party vendors can find our app
  subkey  = "SOFTWARE\\Mozilla\\$ProductName$ $UserAgentShort$\\bin";
  winreg.createKey(subkey,"");
  err     = winreg.setValueString(subkey, "PathToExe", fProgram + "$MainExeFile$");

  subkey  = "SOFTWARE\\$CompanyName$\\$ProductName$\\$UserAgent$\\Main";
  err     = winreg.setValueString(subkey, "PathToExe", fProgram + "$MainExeFile$");
}

function updateWinReg()
{
  //Notes:
  // can't use a double backslash before subkey - Windows already puts it in.
  // subkeys have to exist before values can be put in.
  var winreg = getWinRegistry();
  var subkey;  //the name of the subkey you are poking around in
  var err;
  var ikwDefined;

  if(winreg != null) 
  {
    /* This will check to see if the user has restricted access or not.
     * It checks to see if HKEY_LOCALMACHINE\SOFTWARE is writable.  If
     * it is, then access is not restricted.  This is only used to
     * determine which Desktop, Programs, and Start Menu folders
     * are to used: common or per user
     */
    restrictedAccess = false;
    ikwDefined = typeof(winreg.isKeyWritable);
    logComment("winreg.isKeyWritable(): " + ikwDefined);
    if(ikwDefined == "function")
    {
      winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
      if(!winreg.isKeyWritable("SOFTWARE"))
        restrictedAccess = true;
    }

    logComment("restrictedAccess value: " + restrictedAccess);
    if(!restrictedAccess)
    {
      winreg.setRootKey(winreg.HKEY_LOCAL_MACHINE);
      registerMainKeys(winreg);

      // set the App Paths key here
      subkey  = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\$MainExeFile$";
      winreg.createKey(subkey,"");
      err     = winreg.setValueString(subkey, "", fProgram + "$MainExeFile$");
      err     = winreg.setValueString(subkey, "Path", fProgram);
    }

    winreg.setRootKey(winreg.HKEY_CURRENT_USER);
    registerMainKeys(winreg);
  }
}

function upgradeCleanup()
{ 
  // For now, since we're new, we have no such files. 
}

// main
var srDest;
var err;
var err2;
var fProgram;
var fWindowsSystem;
var fileComponentRegStr;
var fileComponentReg;
var restrictedAccess;
var fileToRegister;
var args;
var gGreLocal = false;

args = new String(Install.arguments);
logComment("args: " + args);

// If -gGreLocal is passed in, then we need to *not* cleanup GRE files if they
// exist in the browser dir.
// The default is to delete any GRE files because we default GRE will be global.
if(args == "-greLocal")
  gGreLocal = true;

srDest = $SpaceRequired$:thunderbird;
err    = initInstall("$ProductName$", "Mail", "$Version$"); 
logComment("initInstall: " + err);

fProgram  = getFolder("Program");
fWindowsSystem = getFolder("Win System");
logComment("fProgram: " + fProgram);

if(verifyDiskSpace(fProgram, srDest))
{
  setPackageFolder(fProgram);

  upgradeCleanup();
  err = addDirectory("",
                     "$Version$",
                     "thunderbird",              // dir name in jar to extract 
                     fProgram,           // Where to put this file (Returned from GetFolder) 
                     "",                 // subdir name to create relative to fProgram
                     true);              // Force Flag 
  logComment("addDirectory() of Program returned: " + err);

  // check return value
  if( err == SUCCESS )
  {
    fileToRegister = getFolder(fProgram, "AccessibleMarshal.dll");
    err2           = File.windowsRegisterServer(fileToRegister);
    logComment("windowsRegisterServer() returned: " + err2);
    updateWinReg();  // Finish registering above marshalling dll's

    createShortcuts();
    updateWinIni();
    updateMapi();

    // we don't want to fail on errors for the above two
    resetError();

    // register chrome
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome", "mail.jar"), "content/mozapps/");
    
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/autoconfig/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/necko/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/wallet/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/xbl-marquee/");

    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/global/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/global-region/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/global-platform/");

    // XXXben Stuff that will become obsolete
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/navigator/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/navigator-region/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/navigator-platform/");

    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/communicator/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/communicator-region/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"),"content/communicator-platform/");

    // register chrome

    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/editor/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/editor-region/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/help/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/mozldap/");

    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger-smime/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger-region/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger-mdn/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger-views/");
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/messenger-mapi/");

    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/communicator/downloadmanager/");  
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/pippki/"); 
    registerChrome(CONTENT | DELAYED_CHROME, getFolder("Chrome","mail.jar"), "content/pipnss/");  

    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/global/");
    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/communicator/");
    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/mozapps/");
    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/navigator/");
    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/editor/");
    registerChrome(SKIN | DELAYED_CHROME, getFolder("Chrome","qute.jar"), "skin/classic/messenger/");

    // Create the uninstall folder. 
    err = File.dirCreate(getFolder("Program", "uninstall"));
    logComment("dirCreate() of Program/uninstall returned: " + err);

    /* Log files that are created after the installer is done, so they can be uninstalled */
    logComment("Installing: "    + fProgram + ".autoreg");
    logComment("Installing: "    + fProgram + "Xpcs Registry.dat");
    logComment("Installing: "    + fProgram + "xpcom.log");
    logComment("Create Folder: " + fProgram + "components");
    logComment("Installing: "    + fProgram + "components\\xpti.dat");
    logComment("Installing: "    + fProgram + "components\\xptitemp.dat");
    logComment("Installing: "    + fProgram + "components\\compreg.dat");
    logComment("Create Folder: " + fProgram + "chrome");
    logComment("Installing: "    + fProgram + "chrome\\installed-chrome.txt");
    logComment("Installing: "    + fProgram + "chrome\\chrome.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\communicator");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\communicator\\content");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\communicator\\content\\overlays.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\editor");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\editor\\content");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\editor\\content\\overlays.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\messenger");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\messenger\\content");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\messenger\\content\\overlays.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\cookie");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\cookie\\content");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\cookie\\content\\overlays.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\navigator");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\navigator\\content");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\navigator\\content\\overlays.rdf");
    logComment("Create Folder: " + fProgram + "chrome\\overlayinfo\\navigator\\skin");
    logComment("Installing: "    + fProgram + "chrome\\overlayinfo\\navigator\\skin\\stylesheets.rdf");
    logComment("Create Folder: " + fProgram + "uninstall");

    // log comments for uninstalling the registry keys created by mail for setting
    // itself up in WinXP's Start menu
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$ []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$ []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$ [DLLPath]");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\DefaultIcon []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\protocols\\mailto\\shell\\open\\command []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail\\$ProductName$\\shell\\open\\command []");

    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$ []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$ []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$ [DLLPath]");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\DefaultIcon []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\news\\shell\\open\\command []");

    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\snews\\shell\\open\\command []");


    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp\\DefaultIcon []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\protocols\\nntp\\shell\\open\\command []");

    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\shell []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\shell\\open []");
    logComment("Create Registry Key: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\shell\\open\\command []");
    logComment("Store Registry Value: HKEY_LOCAL_MACHINE\\Software\\Clients\\News\\$ProductName$\\shell\\open\\command []");

    err = getLastError();
    if (err == SUCCESS)
    {
      err = performInstall();
      logComment("performInstall() returned: " + err);
      if (! ('buildID' in Install))
      {
        logComment("Running Pre-Mozilla 0.9.1");
        initInstall("Post-install Cleanup Utility", "Mail/xpicleanup", "$Version$");
        cleanupUtility = getFolder(fProgram, "xpicleanup.exe");
        err = File.execute(cleanupUtility);
        logComment("execute() returned: " + err);
        err = performInstall();
      }
    }
    else
      cancelInstall(err);
  }
  else
    cancelInstall(err);
}
else
  cancelInstall(INSUFFICIENT_DISK_SPACE);


// end main
