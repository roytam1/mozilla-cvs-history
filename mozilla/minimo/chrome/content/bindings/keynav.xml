<?xml version="1.0"?> <!-- -*- Mode: HTML -*- -->
<!-- ***** BEGIN LICENSE BLOCK *****
     - Version: MPL 1.1/GPL 2.0/LGPL 2.1
     -
     - The contents of this file are subject to the Mozilla Public License Version
     - 1.1 (the "License"); you may not use this file except in compliance with
     - the License. You may obtain a copy of the License at
     - http://www.mozilla.org/MPL/
     -
     - Software distributed under the License is distributed on an "AS IS" basis,
     - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
     - for the specific language governing rights and limitations under the
     - License.
     -
     - The Original Code is Minimo.
     -
     - The Initial Developer of the Original Code is
     - Marcio S. Galli <mgalli@geckonnection.com>
     - Portions created by the Initial Developer are Copyright (C) 2005
     - the Initial Developer. All Rights Reserved.
     -
     - Contributor(s):
     -   Marcio S. Galli <mgalli@geckonnection.com>
     -
     - Alternatively, the contents of this file may be used under the terms of
     - either the GNU General Public License Version 2 or later (the "GPL"), or
     - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
     - in which case the provisions of the GPL or the LGPL are applicable instead
     - of those above. If you wish to allow use of your version of this file only
     - under the terms of either the GPL or the LGPL, and not to allow others to
     - use your version of this file under the terms of the MPL, indicate your
     - decision by deleting the provisions above and replace them with the notice
     - and other provisions required by the LGPL or the GPL. If you do not delete
     - the provisions above, a recipient may use your version of this file under
     - the terms of any one of the MPL, the GPL or the LGPL.
     -
     - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="keynav">
	<content></content>
    <implementation>

      <constructor>
      <![CDATA[
		this.currentState = this.getAttribute("default");
		this.lambdaRef = null; // stores the call back event function handler. 

		document.staticReferenceKeynav = this;

      ]]>
      </constructor>

	<property name="default" />

	<property name="preferencelist">
		<getter>
			return this.prefArray;
		</getter>
	</property>

	<field name="allArrays">
		new Array()
	</field>

	<field name="_counter">0</field>

	<method name="addLine">
		<parameter name="fromElement" />
		<parameter name="roundMap" />
		<body>
		  <![CDATA[ 

			this.allArrays[fromElement]=roundMap;

		  ]]>
		</body>
	</method>

	<field name="stateArray">
		new Array()
	</field>

	<method name="addState">

		<parameter name="navid" />
		<parameter name="highlight" />
		<parameter name="focus" />
		<body>
		  <![CDATA[ 

			var newObject = {
	
					    refHighlight: highlight,
                                  refFocus: focus						

					    } 
		
				
			this.stateArray[navid]=newObject;

 			//alert("added state="+navid+", created object ="+newObject+" and obj.refHighlight="+this.stateArray[navid].refHighlight);

			
		  ]]>
		</body>
	</method>

	<method name="run">
		<parameter name="elementName" />
		<body>
		  <![CDATA[ 

			//alert("roundmap for "+elementName+" is "+this.allArrays[elementName]);
			this.captureKeys();
			this.inState();

		  ]]>
		</body>
	</method>

	<method name="captureKeys"> 
		<body>
		  <![CDATA[ 

			  document.addEventListener("keypress",this.eventCapture,true);
			  
		  ]]>
		</body>
	</method>

	<method name="eventCapture"> 

		<parameter name="event" />

		<body>

		  <![CDATA[ 


			event.stopPropagation();
			event.preventDefault();


			document.staticReferenceKeynav.outState();
			var statesList = document.staticReferenceKeynav.allArrays[document.staticReferenceKeynav.currentState];
			statesSplitted = statesList.split(",");

			if(event.keyCode == event.DOM_VK_UP) {
				document.staticReferenceKeynav.currentState=statesSplitted[0];
				document.staticReferenceKeynav.inState();
			}

			if(event.keyCode == event.DOM_VK_RIGHT) {
				document.staticReferenceKeynav.currentState=statesSplitted[1];
				document.staticReferenceKeynav.inState();
			}

			if(event.keyCode == event.DOM_VK_DOWN) {
				document.staticReferenceKeynav.currentState=statesSplitted[2];
				document.staticReferenceKeynav.inState();
			}

			if(event.keyCode == event.DOM_VK_LEFT) {
				document.staticReferenceKeynav.currentState=statesSplitted[3];
				document.staticReferenceKeynav.inState();
			}

			if(event.keyCode == 13) {
				//document.staticReferenceKeynav.currentState=statesSplitted[3];
				document.staticReferenceKeynav.doState();
			}

		  ]]>

		</body>
	</method>

	<field name="currentState"></field>


	<method name="doState"> 

		<body>

		  <![CDATA[ 

			try {

			var stateObject = document.staticReferenceKeynav.stateArray[document.staticReferenceKeynav.currentState];

			var doObj;
	
				if(stateObject.refFocus.indexOf("#")>-1) {
	
					if(stateObject.refFocus.indexOf("urlbarInputField")>-1) {
						doObj = document.getElementById("urlbar").inputField;
					}

					if(stateObject.refFocus.indexOf("mTabContainer")>-1) {
						doObj = document.getElementById("content").mTabContainer;
					}	
					if(stateObject.refFocus.indexOf("selectedTab")>-1) {
						doObj = document.getElementById("content").selectedTab;
					}	
					if(stateObject.refFocus.indexOf("contentDocument")>-1) {
						doObj = document.getElementById("content").contentDocument;
					}
					if(stateObject.refFocus.indexOf("contentWindow")>-1) {
						doObj = document.getElementById("content").contentWindow;
					}			
	
				} else {
				
					doObj = document.getElementById(stateObject.refFocus);
	
				}
	
                doObj.focus();
                document.removeEventListener("keypress",this.eventCapture,true);
	
			} catch(i) { alert(i) }

		  ]]>

		</body>
	</method>



	<method name="inState"> 

		<body>

		  <![CDATA[ 

			try {

			var stateObject = document.staticReferenceKeynav.stateArray[document.staticReferenceKeynav.currentState];

			var doObj;
	
				if(stateObject.refHighlight.indexOf("#")>-1) {
	
					if(stateObject.refHighlight.indexOf("InputField")>-1) {
						doObj = document.getElementById("urlbar").inputField;
					}

					if(stateObject.refHighlight.indexOf("browserTabs")>-1) {
						doObj = document.getElementById("content");
					}	
					if(stateObject.refHighlight.indexOf("contentDocument.body")>-1) {
						doObj = document.getElementById("content").contentDocument.body;
					}		
	
				} else {
				
					doObj = document.getElementById(stateObject.refHighlight);
	
				}
	
			doObj.style.backgroundColor="yellow";
			
	
			} catch(i) { alert(i) }

		  ]]>

		</body>
	</method>


	<method name="outState"> 

		<body>

		  <![CDATA[ 

			var stateObject = document.staticReferenceKeynav.stateArray[document.staticReferenceKeynav.currentState];

			var doObj;
	
				if(stateObject.refHighlight.indexOf("#")>-1) {
	
					if(stateObject.refHighlight.indexOf("InputField")>-1) {						
						doObj = document.getElementById("urlbar").inputField;
					}
					if(stateObject.refHighlight.indexOf("browserTabs")>-1) {
						doObj = document.getElementById("content");
					}	
					if(stateObject.refHighlight.indexOf("contentDocument.body")>-1) {
						doObj = document.getElementById("content").contentDocument.body;
					}		

	
				} else {
				
					doObj = document.getElementById(stateObject.refHighlight);
	
				}
	
			doObj.style.backgroundColor="#e0e0e0";
			
	
			} catch(i) { alert(i) }


		  ]]>

		</body>
	</method>
    </implementation>

  </binding>


  <binding id="navmap">
      <content></content>

      <implementation>

      <constructor>
      <![CDATA[

		this.keynav.addLine(this.getAttribute("from"),this.getAttribute("roundmap"));

      ]]>
      </constructor>

	<property name="from" />
	<property name="roundmap" />
      <property name="keynav" onget="return this.parentNode"/>

    </implementation>

  </binding>


  <binding id="statemap">
      <content></content>

      <implementation>

      <constructor>
      <![CDATA[

		this.keynav.addState(this.getAttribute("navid"),this.getAttribute("highlight"),this.getAttribute("focus"));

      ]]>
      </constructor>

	<property name="navid" />
	<property name="highlight" />
	<property name="focus" />
      <property name="keynav" onget="return this.parentNode"/>

    </implementation>

  </binding>


</bindings>
