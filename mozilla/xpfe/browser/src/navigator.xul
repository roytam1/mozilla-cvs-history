<?xml version="1.0"?> 
<?xml-stylesheet href="xul.css" type="text/css"?> 
<?xml-stylesheet href="chrome://navigator/skin/" type="text/css"?> 

<!DOCTYPE window
[
<!ENTITY mainWindow.title "Mozilla"> 
<!ENTITY throbber.url "http://www.mozilla.org">
]> 

<window id="main-window" xmlns:html="http://www.w3.org/TR/REC-html40"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="Startup()" title="&mainWindow.title;"> 

  <html:script>
  var appCore = null;
  function Startup()
  {
    dump("Doing Startup...\n");
    dump("Creating browser app core\n");
    appCore = new BrowserAppCore();
    if (appCore != null) {
      dump("BrowserAppCore has been created.\n");
      appCore.Init("BrowserAppCore." + ( new Date() ).getTime().toString() );
	  appCore.setWebShellWindow(window);
	  appCore.setToolbarWindow(window);
	  tryToSetContentWindow();
//      appCore.setDisableCallback("DoDisableButtons();");
//      appCore.setEnableCallback("DoEnableButtons();");
    }
  }

  function tryToSetContentWindow() {
    if ( window.frames[0].frames[1] ) {
        dump("Setting content window\n");
        appCore.setContentWindow( window.frames[0].frames[1] );
        // Have browser app core load appropriate initial page.
        appCore.loadInitialPage();
    } else {
        // Try again.
        dump("Scheduling later attempt to set content window\n");
        window.setTimeout( "tryToSetContentWindow()", 100 );
    }
  }

  function DoDisableButtons()
  {
    // Find buttons in the UI and disable them
	dump("here");
    dump("Browser disabling buttons\n");
    document.getElementById('urlbar')
  }

  function DoEnableButtons()
  {
    // Find buttons in the UI and enable them
    dump("Browser enabling buttons\n");
  }

  function RefreshUrlbar()
  {
   //Refresh the urlbar bar
    document.getElementById('urlbar').value = window.frames[0].frames[1].location.href;
  }

  function BrowserBack()
  {
     // Get a handle to the back-button
     var bb = document.getElementById("canGoBack");
     // If the button is disabled, don't bother calling in to Appcore
     if ( (bb.getAttribute("disabled")) == "true" ) 
        return;

    if (appCore != null) {
      dump("Going Back\n");
      appCore.back();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserForward()
  {
     // Get a handle to the back-button
     var fb = document.getElementById("canGoForward");
     // If the button is disabled, don't bother calling in to Appcore
     if ( (fb.getAttribute("disabled")) == "true" ) 
        return;

    if (appCore != null) {
      dump("Going Forward\n");
      appCore.forward();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserSetForward()
  {
     var forwardBElem = document.getElementById("canGoForward");
     if (!forwardBElem) {
	dump("Couldn't obtain handle to forward Broarcast element\n");
	return;
	}

     var canForward = forwardBElem.getAttribute("disabled");
     var fb = document.getElementById("forward-button");
     
     if (!fb) {
	dump("Could not obtain handle to forward button\n");
	return;
     }
	
     // Enable/Disable the Forward button      
     if (canForward == "true")  {
        fb.setAttribute("disabled", "true");
     }
     else {
        fb.setAttribute("disabled", "");
     }
        
     // Enable/Disable the Forward menu
     var fm = document.getElementById("menuitem-forward");
     if (!fm) {
       dump("Couldn't obtain menu item Forward\n");
       return;
     }
     else
	dump("Got a handle to forward menu item\n");

     // Enable/Disable the Forward Menuitem
     if (canForward == "true")  {
	dump("Setting forward menu item disabled\n");
        fm.setAttribute("disabled", "true");
     }
     else {
	dump("Setting forward menu item enabled\n");
        fm.setAttribute("disabled", "");
     }
    
  }

  function BrowserCanStop() {
    var stop = document.getElementById("canStop");
    if ( stop ) {
        var stopDisabled = stop.getAttribute("disabled");
        var stopButton   = document.getElementById( "stop-button" );
        if ( stopButton ) {
            if ( stopDisabled ) {
                stopButton.setAttribute( "disabled", "" );
            } else {
                stopButton.removeAttribute( "disabled" );
            }
        }
    }
  }

  function BrowserStop() {
     // Get a handle to the "canStop" broadcast id
     var stopBElem = document.getElementById("canStop");
     if (!stopBElem) {
        dump("Couldn't obtain handle to stop Broadcast element\n");
        return;
	 }

     var canStop = stopBElem.getAttribute("disabled");
     var sb = document.getElementById("stop-button");
     
     if (!sb) {
    	dump("Could not obtain handle to stop button\n");
	    return;
     }

     // If the stop button is currently disabled, just return
     if ((sb.getAttribute("disabled")) == "true") {
	    return;
     }
	
     //Stop button has just been pressed. Disable it. 
     sb.setAttribute("disabled", "");

     // Get a handle to the stop menu item.
     var sm = document.getElementById("menuitem-stop");
     if (!sm) {
       dump("Couldn't obtain menu item Stop\n");
     } else {
       // Disable the stop menu-item.
       sm.setAttribute("disabled", "true");
     }
  
     //Call in to BrowserAppcore to stop the current loading
     if (appCore != null) {
        dump("Going to Stop\n");
        appCore.stop();
     } else {
        dump("BrowserAppCore has not been created!\n");
     }
  }

  function BrowserSetBack()
  {
     var backBElem = document.getElementById("canGoBack");
     if (!backBElem) {
	dump("Couldn't obtain handle to back Broadcast element\n");
	return;
	}

     var canBack = backBElem.getAttribute("disabled");
     var bb = document.getElementById("back-button");
     
     if (!bb) {
	dump("Could not obtain handle to back button\n");
	return;
     }
	
     // Enable/Disable the Back button      
     if (canBack == "true")  {
        bb.setAttribute("disabled", "true");
     }
     else {
        bb.setAttribute("disabled", "");
     }
        
     // Enable/Disable the Back menu
     var bm = document.getElementById("menuitem-back");
     if (!bm) {
       dump("Couldn't obtain menu item Back\n");
       return;
     }
     else
	dump("Obtained MenuItem Back\n");

     // Enable/Disable the Back Menuitem
     if (canBack == "true")  {
	dump("Setting Back menuitem to disabled\n");
        bm.setAttribute("disabled", "true");
     }
     else {
	dump("Setting Back menuitem to enabled\n");
        bm.setAttribute("disabled", "");
     }
    
     
  }

  function BrowserHome()
  {
   window.frames[0].frames[1].home();
   RefreshUrlbar();
  }

  function OpenBookmarkURL(node)
  {
    if (node.getAttribute('type') !=
        "http://home.netscape.com/NC-rdf#Bookmark") {
      return false;
    }
    url = node.getAttribute('id');

    // Ignore "NC:" urls.
    if (url.substring(0, 3) == "NC:") {
      return false;
    }

    window.frames[0].frames[1].location.href = url;
	RefreshUrlbar();
  }

  function BrowserNewWindow()
  {
    if (appCore != null) {
	    dump("Opening New Window\n");
      appCore.newWindow();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserOpenWindow()
  {
    if (appCore != null) {
	    dump("Opening New Window\n");
      appCore.openWindow();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function OpenFile(url) {
    // This is invoked from the browser app core.
    core = XPAppCoresManager.Find("toolkitCore");
    if ( !core ) {
        core = new ToolkitCore();
        if ( core ) {
            core.Init("toolkitCore");
        }
    }
    if ( core ) {
        core.ShowWindowWithArgs( "resource:/res/samples/navigator.xul", window, url );
    } else {
        dump("Error; can't create toolkitCore\n");
    }
  }

  function BrowserCopy()
  {
    if (appCore != null) {
	    dump("Copying\n");
      appCore.copy();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }


  function BrowserAddBookmark(url,title)
  {
    // get RDF Core service
    var rdfCore = XPAppCoresManager.Find("RDFCore");
    if (!rdfCore) {
      rdfCore = new RDFCore();
      if (!rdfCore) {
        return(false);
      }
      rdfCore.Init("RDFCore");
      XPAppCoresManager.Add(rdfCore);
    }
    // Add it
    rdfCore.addBookmark(url,title);
  }

  function BrowserEditBookmarks()
  {
    var toolkitCore = XPAppCoresManager.Find("toolkitCore");
    if (!toolkitCore) {
      toolkitCore = new ToolkitCore();
      if (toolkitCore) {
        toolkitCore.Init("toolkitCore");
      }
    }
    if (toolkitCore) {
      toolkitCore.ShowWindow("resource://res/rdf/bookmarks.xul",window);
    }
  }

  function OpenHistoryView()
  {
    var toolkitCore = XPAppCoresManager.Find("toolkitCore");
    if (!toolkitCore) {
      toolkitCore = new ToolkitCore();
      if (toolkitCore) {
        toolkitCore.Init("toolkitCore");
      }
    }
    if (toolkitCore) {
      toolkitCore.ShowWindow("resource://res/rdf/history.xul",window);
    }
  }

  function BrowserPrintPreview()
  {
    // Borrowing this method to show how to 
    // dynamically change icons
    dump("BrowserPrintPreview\n");
    if (appCore != null) {
	    dump("Changing Icons\n");
      appCore.printPreview();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserPrint()
  {
    // Borrowing this method to show how to 
    // dynamically change icons
    if (appCore != null) {
      appCore.print();
    }
  }

  function BrowserSetDefaultCharacterSet(aCharset)
  {
    if (appCore != null) {
      appCore.SetDocumentCharset(aCharset);
      window.frames[0].frames[1].location.reload();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserClose()
  {
    dump("BrowserClose\n");
  }

  function BrowserExit()
  {
    if (appCore != null) {
	    dump("Exiting\n");
      appCore.exit();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserFind() {
    if (appCore != null) {
        appCore.find();      
    } else {
        dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserFindAgain() {
    if (appCore != null) {
        appCore.findNext();      
    } else {
        dump("BrowserAppCore has not been created!\n");
    }
  }

  function BrowserLoadURL()
  {
	if (appCore == null)
	{
		dump("BrowserAppCore has not been initialized\n");
		return;
	}

	// rjc: added support for URL shortcuts (3/30/1999)

	// get RDF Core service
	var rdfCoreFound = false;
	var rdfCore = XPAppCoresManager.Find("RDFCore");
	if (rdfCore)
	{
		rdfCoreFound = true;
	}
	else
	{
		rdfCore = new RDFCore();
		if (rdfCore)
		{
			rdfCore.Init("RDFCore");
// We do not need this add() call. It fails and doesn't execute the loadURL
// call that is following. The job of add has already been done by the Init()
// call.  
		//	XPAppCoresManager.Add(rdfCore);
			rdfCoreFound = true;
		}
	}
	if (rdfCoreFound == true)
	{
		var shortcutURL = rdfCore.findBookmarkShortcut(document.getElementById('urlbar').value);

		dump("FindBookmarkShortcut: in='" + document.getElementById('urlbar').value + "'  out='" + shortcutURL + "'\n");

		if ((shortcutURL != null) &amp;&amp; (shortcutURL != ""))
		{
			document.getElementById('urlbar').value = shortcutURL;
		}
	}

	appCore.loadUrl(document.getElementById('urlbar').value);
      
  }

  function WalletEditor()
  {
    if (appCore != null) {
      dump("Wallet Editor\n");
      appCore.walletEditor();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function WalletSafeFillin()
  {
    if (appCore != null) {
      dump("Wallet Safe Fillin\n");
      appCore.walletSafeFillin(window.frames[0].frames[1]);
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function WalletQuickFillin()
  {
    if (appCore != null) {
      dump("Wallet Quick Fillin\n");
      appCore.walletQuickFillin(window.frames[0].frames[1]);
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function WalletSamples()
  {
    if (appCore != null) {
      dump("Wallet Samples\n");
      appCore.walletSamples();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function SignonViewer()
  {
    if (appCore != null) {
      dump("SignonViewer\n");
      appCore.signonViewer();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function CookieViewer()
  {
    if (appCore != null) {
      dump("CookieViewer\n");
      appCore.cookieViewer();
    } else {
      dump("BrowserAppCore has not been created!\n");
    }
  }

  function OpenMessenger()
  {
    var toolkitCore = XPAppCoresManager.Find("ToolkitCore");
    if (!toolkitCore) {
      toolkitCore = new ToolkitCore();
      if (toolkitCore) {
        toolkitCore.Init("ToolkitCore");
      }
    }
    if (toolkitCore) {
      toolkitCore.ShowWindow("chrome://messenger/content/",
                             window);
    }
  }

  function DoPreferences()
  {
    var prefsCore = XPAppCoresManager.Find("PrefsCore");
    if (!prefsCore) {
      prefsCore = new PrefsCore();
      if (prefsCore) {
        prefsCore.Init("PrefsCore");
      }
    }
    if (prefsCore) {
      prefsCore.ShowWindow(window);
    }
  }

  function BrowserViewSource()
  {
    var toolkitCore = XPAppCoresManager.Find("ToolkitCore");
    if (!toolkitCore) {
      toolkitCore = new ToolkitCore();
      if (toolkitCore) {
        toolkitCore.Init("ToolkitCore");
      }
    }
    if (toolkitCore) {
      var url = window.frames[0].frames[1].location;
      dump("Opening view of source for" + url + "\n");
      toolkitCore.ShowWindowWithArgs("resource:/res/samples/viewSource.xul", window, url);
    }
  }

  function OpenEditor()
  {
    var toolkitCore = XPAppCoresManager.Find("ToolkitCore");
    if (!toolkitCore) {
      toolkitCore = new ToolkitCore();
      if (toolkitCore) {
        toolkitCore.Init("ToolkitCore");
      }
    }
    if (toolkitCore) {
      toolkitCore.ShowWindow("chrome://editor/content/EditorAppShell.xul",window);
    }
  }


  </html:script>

  <broadcaster id="canGoBack" disabled="true"/>
  <broadcaster id="canGoForward" disabled="true"/>
  <broadcaster id="canReload"/>
  <broadcaster id="canStop"/>
  <broadcaster id="canPrint"/>
  <broadcaster id="Browser:LoadingProgress"/>
  <broadcaster id="Browser:Status"/>
  <broadcaster id="Browser:OnStartBinding"/>
  <broadcaster id="Browser:OnStopBinding"/>
  <broadcaster id="Browser:Security" secure="false"/>
  <broadcaster id="Browser:Throbber" busy="false"/>
  <broadcaster id="args" value="resource:/res/samples/BrowserInitPage.html"/>


  <menubar>
      <menu name="File">
      <menuitem name="New Browser Window" onclick="BrowserNewWindow();"/>
      	<menu name="New">
      		<menuitem name="Mail Message" onclick="MsgNewMessage();"/>
		      <menuitem name="Chat Window" onclick=""/>
		      <separator />
		      <menuitem name="Blank Page" onclick="BrowserNewWindow();"/>
		      <menuitem name="Page Using Template..." onclick="BrowserNewWindow();"/>
		      <menuitem name="Page Using Draft..." onclick="BrowserNewWindow();"/>
    		</menu>
      <menuitem name="Open" onclick="BrowserOpenWindow();"/>
      <separator />
      <menuitem name="Send Page" onclick="BrowserReload();"/>
	   <menuitem name="Edit Page" onclick="BrowserReload();" />
	   <separator />
      <menu name="Offline">
	      <menuitem name="Go Offline" onclick="BrowserReload();"/>
	      <separator />
	      <menuitem name="Synchronize..." onclick="BrowserReload();"/>
      </menu>
      <separator />
      <menuitem name="Print Setup" onclick=";"/>
      <menuitem name="Print Preview" onclick=""/>
      <menuitem name="Print" onclick="BrowserPrint()"/>
      <separator />
      <menuitem name="Close" onclick="BrowserClose();"/>
      <menuitem name="Quit" onclick="BrowserExit();"/>
    </menu>
	<menu name="Edit"> 
      <menuitem name="Undo" onclick="BrowserReload();"/> 
      <menuitem name="Redo" onclick="BrowserReload();"/> 
      <separator /> 
      <menuitem name="Cut" onclick="BrowserReload();"/> 
      <menuitem name="Copy" onclick="BrowserCopy();"/> 
      <menuitem name="Paste" onclick="BrowserReload();"/> 
      <menuitem name="Delete" onclick="BrowserReload();"/> 
      <separator /> 
      <menu name="Wallet"> 
          <menuitem name="Safe Form Fill" onclick="WalletSafeFillin();"/> 
          <menuitem name="Quick Form Fill" onclick="WalletQuickFillin();"/> 
          <separator /> 
          <menuitem name="Wallet Contents" onclick="WalletEditor();"/> 
          <menuitem name="Display Signons" onclick="SignonViewer();"/> 
          <menuitem name="Display Cookies" onclick="CookieViewer();"/> 
          <separator /> 
          <menuitem name="Samples" onclick="WalletSamples();"/> 
	  </menu> 
      <separator /> 
      <menuitem name="Select All" onclick="BrowserReload();"/> 
      <separator /> 
      <menuitem name="Preferences..." onclick="DoPreferences();"/> 
    </menu> 

    <menu name="View">
      <menuitem name="Toolbars" onclick="BrowserReload();"/>
      <menuitem name="Sidebar" onclick="BrowserReload();"/>
      <separator />
      <menuitem name="Enlarge Text Size" onclick="BrowserReload();"/>
      <menuitem name="Reduce Text Size" onclick="BrowserReload();"/>
      <separator />
      <menu name="Use Stylesheet" onclick="BrowserReload();">
	      <menuitem name="Default" onclick="BrowserReload();"/>
	      <separator />
	      <menuitem name="Easy Reading" onclick="BrowserReload();"/>
	      <menuitem name="Maximum Information" onclick="BrowserReload();"/>
	      <menuitem name="Bizarre" onclick="BrowserReload();"/>
      </menu>
      <separator />
      <menuitem name="Reload" onclick="BrowserReload();"/>
      <menuitem name="Show Images" onclick="BrowserReload();"/>
      <menuitem name="Stop" onclick="BrowserStop();"/>
      <separator />
      <menuitem name="Page Source" onclick="BrowserViewSource();"/>
      <menuitem name="Page Info" onclick="BrowserReload();"/>
      <separator />
      <menu name="Translate">
	      <menuitem name="French To English" onclick="BrowserReload();"/>
	      <menuitem name="German To English" onclick="BrowserReload();"/>
	      <menuitem name="Spanish To English" onclick="BrowserReload();"/>
	      <separator />
	      <menuitem name="English To French" onclick="BrowserReload();"/>
	      <menuitem name="German To French" onclick="BrowserReload();"/>
	      <menuitem name="Spanish To French" onclick="BrowserReload();"/>
	      <separator />
	      <menuitem name="English To German" onclick="BrowserReload();"/>
	      <menuitem name="French To German" onclick="BrowserReload();"/>
	      <menuitem name="Spanish To German" onclick="BrowserReload();"/>
	      <separator />
	      <menuitem name="English To Spanish" onclick="BrowserReload();"/>
	      <menuitem name="French To Spanish" onclick="BrowserReload();"/>
	      <menuitem name="German To Spanish" onclick="BrowserReload();"/>
    </menu>
      <menu name="Default Character Set">
	         <menuitem name="ISO Latin 1 (ISO-8859-1)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-1');"/>
	         <menuitem name="ISO Latin 2 (ISO-8859-2)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-2');"/>
	         <menuitem name="ISO Latin 3 (ISO-8859-3)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-3');"/>
	         <menuitem name="ISO Latin 4 (ISO-8859-4)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-4');"/>
	         <menuitem name="ISO Latin 5 (ISO-8859-9)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-9');"/>
	         <menuitem name="ISO Latin 8 (ISO-8859-14)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-14');"/>
	         <menuitem name="ISO Latin 9 (ISO-8859-15)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-15');"/>
	         <menuitem name="Windows Latin2 (windows-1250)" onclick="BrowserSetDefaultCharacterSet('windows-1250');"/>
	         <menuitem name="Windows Latin 1 (windows-1252)" onclick="BrowserSetDefaultCharacterSet('windows-1252');"/>
	         <menuitem name="Windows Latin 5 (windows-1254)" onclick="BrowserSetDefaultCharacterSet('windows-1254');"/>
	         <menuitem name="Windows Baltic Rim (windows-1257)" onclick="BrowserSetDefaultCharacterSet('windows-1257');"/>
	         <menuitem name="Macintosh Roman" onclick="BrowserSetDefaultCharacterSet('x-mac-roman');"/>
	         <menuitem name="Macintosh Central European" onclick="BrowserSetDefaultCharacterSet('x-mac-ce');"/>
	         <menuitem name="Macintosh Turkish" onclick="BrowserSetDefaultCharacterSet('x-mac-turkish');"/>
	         <menuitem name="Macintosh Croatian" onclick="BrowserSetDefaultCharacterSet('x-mac-croatian');"/>
	         <menuitem name="Macintosh Romanian" onclick="BrowserSetDefaultCharacterSet('x-mac-romanian');"/>
	         <menuitem name="Macintosh Icelandic" onclick="BrowserSetDefaultCharacterSet('x-mac-icelandic');"/>
                 <separator />
	         <menuitem name="Japanese JIS (ISO-2022-JP)" onclick="BrowserSetDefaultCharacterSet('ISO-2022-JP');"/>
	         <menuitem name="Japanese (Shift_JIS)" onclick="BrowserSetDefaultCharacterSet('Shift_JIS');"/>
	         <menuitem name="Japanese (EUC-JP)" onclick="BrowserSetDefaultCharacterSet('EUC-JP');"/>
                 <separator />
	         <menuitem name="Traditional Chinese (Big5)" onclick="BrowserSetDefaultCharacterSet('Big5');"/>
	         <menuitem name="Traditional Chinese (EUC-TW)" onclick="BrowserSetDefaultCharacterSet('x-euc-tw');"/>
	         <menuitem name="Simplified Chinese (GB2312)" onclick="BrowserSetDefaultCharacterSet('GB2312');"/>
                 <separator />
 	         <menuitem name="Korean (EUC-KR)" onclick="BrowserSetDefaultCharacterSet('EUC-KR');"/>
                 <separator />
	         <menuitem name="UTF-8" onclick="BrowserSetDefaultCharacterSet('UTF-8');"/>
                 <separator />
	         <menuitem name="ISO Cyrillic (ISO-8859-5)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-5');"/>
	         <menuitem name="Windows Cyrillic (windows-1251)" onclick="BrowserSetDefaultCharacterSet('windows-1251');"/>
	         <menuitem name="Macintosh Cyrillic" onclick="BrowserSetDefaultCharacterSet('x-mac-cyrillic');"/>
	         <menuitem name="Macintosh Ukrainian" onclick="BrowserSetDefaultCharacterSet('x-mac-ukrainian');"/>
	         <menuitem name="Russian (KOI8-R)" onclick="BrowserSetDefaultCharacterSet('KOI8-R');"/>
	         <menuitem name="Ukrainian (KOI8-U)" onclick="BrowserSetDefaultCharacterSet('KOI8-U');"/>
                 <separator />
	         <menuitem name="ISO Greek (ISO-8859-7)" onclick="BrowserSetDefaultCharacterSet('ISO-8859-7');"/>
	         <menuitem name="Windows Greek (windows-1253)" onclick="BrowserSetDefaultCharacterSet('windows-1253');"/>
	         <menuitem name="Macintosh Greek" onclick="BrowserSetDefaultCharacterSet('x-mac-greek');"/>
                 <separator />
	         <menuitem name="Windows Vietnamese (windows-1258)" onclick="BrowserSetDefaultCharacterSet('windows-1258');"/>
	         <menuitem name="Vietnamese (TCVN5712)" onclick="BrowserSetDefaultCharacterSet('x-viet-tcvn5712');"/>
	         <menuitem name="Vietnamese (VISCII)" onclick="BrowserSetDefaultCharacterSet('VISCII');"/>
	         <menuitem name="Vietnamese (VPS)" onclick="BrowserSetDefaultCharacterSet('x-viet-vps');"/>
                 <separator />
	         <menuitem name="Thai (TIS-620)" onclick="BrowserSetDefaultCharacterSet('TIS-620');"/>
                 <separator />
	         <menuitem name="Armenian (ARMSCII-8)" onclick="BrowserSetDefaultCharacterSet('ARMSCII-8');"/>
	   </menu>
    </menu>
    <menu name="Search">
      <menuitem name="Find On This page..." onclick="BrowserFind();"/>
      <menuitem name="Find Again" onclick="BrowserFindAgain();"/>
      <separator />
      <menuitem name="Search Parent Item..." onclick="BrowserReload();"/>
      <menuitem name="Search Parent2 Item..." onclick="BrowserReload();"/>
      <menuitem name="App Specific" onclick="BrowserReload();"/>
      <menuitem name="App Specific" onclick="BrowserReload();"/>
      <separator />
      <menuitem name="Search The Internet..." onclick="BrowserReload();"/>
      <menuitem name="Search All Mail..." onclick="BrowserReload();"/>
      <menuitem name="Search Bookmarks" onclick="BrowserReload();"/>
      <menuitem name="Search People" onclick="BrowserReload();"/>
      <separator />
      <menuitem name="Search On This Computer..." onclick="BrowserReload();"/>
    </menu>
    <menu name="Go">
      <menuitem id="menuitem-back" name="Back" onclick="BrowserBack();"/>
      <menuitem id="menuitem-forward" name="Forward" onclick="BrowserForward();" />
      <menuitem name="Home" onclick="BrowserHome();"/>
      <separator />
      <menuitem name="Previous Site 1" onclick="BrowserBack();"/>
      <menuitem name="Previous Site 2" onclick="BrowserBack();"/>
      <menuitem name="Previous Site n" onclick="BrowserBack();"/>
    </menu>
    <menu name="Bookmarks" onclick="OpenBookmarkURL(event.target)" 
						   datasources="rdf:bookmarks" id="NC:BookmarksRoot" open="true">
		<menuitem name="Add Current Page" onclick="BrowserAddBookmark(window.frames[0].frames[1].location.href,window.frames[0].frames[1].document.title);"/>
		<menuitem name="Manage Bookmarks..." onclick="BrowserEditBookmarks();"/>
		<separator/>
	</menu>
	 <menu name="Tasks">
      <menuitem name="Navigator" onclick="BrowserReload();"/>
      <menuitem name="Messenger" onclick="OpenMessenger();" />
      <menuitem name="Editor"    onclick="OpenEditor();" />
      <menuitem name="Manage History"    onclick="OpenHistoryView();" />
      <menuitem name="Chat" onclick="BrowserReload();"/>
      <menuitem name="Shopping Cart" onclick="BrowserReload();"/>
      <separator />
      <menuitem name="Services A" onclick="BrowserReload();"/>
      <menuitem name="Services B" onclick="BrowserReload();" />
      <menuitem name="Services C" onclick="BrowserReload();"/>
      <menuitem name="Services D" onclick="BrowserReload();"/>
      <separator />
      <menu name="Tools">
	      <menuitem name="Plugins Info" onclick="BrowserReload();"/>
	      <menuitem name="Server Tools" onclick="BrowserReload();" />
	      <menuitem name="Java/JS Console" onclick="BrowserReload();"/>
	      <menuitem name="JavaScript Debugger" onclick="BrowserReload();"/>
      </menu>
      <separator />
      <menuitem name="Security Info" onclick="BrowserReload();"/>
      <separator/>
      <menuitem name="Window 1" onclick="BrowserReload();" key="1"/>
      <menuitem name="Window 2" onclick="BrowserReload();" />
      <menuitem name="Window 3" onclick="BrowserReload();" />
    </menu>
    
     <menu name="Help">
      <menuitem name="Help Contents" onclick="window.frames[0].frames[1].location.href = 'http://www.mozilla.org/projects/user-docs/local/browserhelp/browsertop.html'"/>
      <separator />
      <menuitem name="How To Tutorial" onclick="BrowserReload();"/>
      <menuitem name="Help Channel" onclick="BrowserReload();" />
      <separator />
      <menuitem name="Software Updates" onclick="BrowserReload();"/>
      <menuitem name="Technical Support" onclick="BrowserReload();"/>
      <menuitem name="Release Notes" 
	            onclick="window.frames[0].frames[1].location.href='http://www.mozilla.org/projects/seamonkey/release-notes/index.html'"/>
      
      <separator />
      <menuitem name="About Communicator Prototype" 
	            onclick="window.frames[0].frames[1].location.href='http://www.mozilla.org/projects/seamonkey/release-notes/index.html'"/>
    </menu>

    // Menu for testing.
    <menu name="Debug">

      <menu name="Verification"> // Build verification sites.
        <menuitem name="Mozilla"   onclick="window.frames[0].frames[1].location.href='http://www.mozilla.org'"/>
        <menuitem name="Yahoo"     onclick="window.frames[0].frames[1].location.href='http://www.yahoo.com'"/>
        <menuitem name="Netscape"  onclick="window.frames[0].frames[1].location.href='http://www.netscape.com'"/>
        <menuitem name="Excite"    onclick="window.frames[0].frames[1].location.href='http://www.excite.com'"/>
        <menuitem name="Microsoft" onclick="window.frames[0].frames[1].location.href='http://www.microsoft.com'"/>
        <menuitem name="city.net"  onclick="window.frames[0].frames[1].location.href='http://www.city.net'"/>
        <menuitem name="Mirabilis" onclick="window.frames[0].frames[1].location.href='http://www.mirabilis.com'"/>
        <menuitem name="Pathfinder" onclick="window.frames[0].frames[1].location.href='http://www.pathfinder.com/welcome'"/>
        <menuitem name="Warner Bros." onclick="window.frames[0].frames[1].location.href='http://www.warnerbros.com/home_moz3_day.html'"/>
        <menuitem name="CNN"          onclick="window.frames[0].frames[1].location.href='http://www.cnn.com'"/>
        <menuitem name="USA Today" onclick="window.frames[0].frames[1].location.href='http://www.usatoday.com'"/>
        <menuitem name="Disney"    onclick="window.frames[0].frames[1].location.href='http://www.disney.go.com'"/>
        <menuitem name="Hotwired"  onclick="window.frames[0].frames[1].location.href='http://www.hotwired.com'"/>
        <menuitem name="Hotbot"    onclick="window.frames[0].frames[1].location.href='http://www.hotbot.com'"/>
	    <separator />
        <menuitem name="Frames"  onclick="window.frames[0].frames[1].location.href='http://slip/projects/marvin/bft/browser/bft_frame_index.html'"/>
        <menuitem name="Tables"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test6.html'"/>
        <menuitem name="Applets" onclick="window.frames[0].frames[1].location.href='http://slip/projects/marvin/bft/browser/bft_browser_applet.htm'"/>
        <menuitem name="JavaScript Applets" onclick="window.frames[0].frames[1].location.href='http://www.abcnews.com'"/>
        <menuitem name="GIF Images" onclick="window.frames[0].frames[1].location.href='http://slip/projects/marvin/bft/browser/bft_browser_imagemap.html'"/>
        <menuitem name="JPEG Images" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test2.html'"/>
        <menuitem name="PNG Images" onclick="window.frames[0].frames[1].location.href='http://www.cdrom.com/pub/png/png-MagnoliaAlpha.html'"/>
        <menuitem name="Transparency" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test13.html'"/>
        <menuitem name="Animation" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test2.html'"/>
        <menuitem name="Larger page" onclick="window.frames[0].frames[1].location.href='http://slip/projects/marvin/bft/browser/bft_browser_html_mix3.html'"/>
        <menuitem name="Smaller page" onclick="window.frames[0].frames[1].location.href='http://slip/projects/marvin/bft/browser/bft_browser_link.html'"/>
      </menu>

	  <menu name="Viewer Demos">  // Viewer tests.
        <menuitem name="#0 Basic Styles"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test0.html'"/>
        <menuitem name="#1 CSS Styles"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test1.html'"/>
        <menuitem name="#2 Images"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test2.html'"/>
        <menuitem name="#3 Basic Tables"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test3.html'"/>
        <menuitem name="#4 Simple Tables"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test4.html'"/>
        <menuitem name="#5 More Styles"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test5.html'"/>
        <menuitem name="#6 Deeply Nested Tables"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test6.html'"/>
        <menuitem name="#7 Scaled Anim Image"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test7.html'"/>
        <menuitem name="#8 Forms"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test8.html'"/>
        <menuitem name="#9 Frames"  onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test9.html'"/>
        <menuitem name="#10 Anim Images" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test10.html'"/>
        <menuitem name="#11 Fixed Positioning" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test11.html'"/>
        <menuitem name="#12 More Fixed Pos" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test12.html'"/>
        <menuitem name="#13 DHTML" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test13.html'"/>
	<menuitem name="#14 XML Sorting" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test14.html'"/>
	<menuitem name="#15 XML IRS" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/test15.html'"/>
      </menu>

      <menu name="XPToolkit"> // XPToolkit tests.
        <menuitem name="Tri-state checkbox" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/checkboxTest.xul'"/>
        <menuitem name="Toolbar" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/toolbarTest1.xul'"/>
        <menuitem name="Tree" onclick="window.frames[0].frames[1].location.href='resource:/res/samples/treeTest1.xul'"/>
      </menu>

    </menu>

  </menubar>
  
  <box id="outer-box" align="vertical">
   <toolbox>
    <toolbar class="main-bar">
		  <titledbutton id="back-button" align="bottom" value="Back" onclick="BrowserBack()">	
				  <observes element="canGoBack" attribute="disabled" onChange="BrowserSetBack()"/>			
	      </titledbutton>

	      <titledbutton id="forward-button" align="bottom" value="Forward" 
				onclick="BrowserForward()">
				  <observes element="canGoForward" attribute="disabled" onChange="BrowserSetForward()"/>
	      </titledbutton>

	      <titledbutton id="reload-button" align="bottom" value="Reload" 
				  onclick="window.frames[0].frames[1].location.reload()">
				  <observes element="canReload" attribute="disabled"/>
	      </titledbutton>

	      <titledbutton id="stop-button" align="bottom" value="Stop" 
				onclick="BrowserStop()">
	        <observes element="canStop" attribute="disabled" onchange="BrowserCanStop()"/>
	      </titledbutton>
	  
	      <box align="vertical" flex="100%">
		    <spring flex="100%"/>
	  		<html:input id="urlbar" type="text" style="min-width: 100px; min-height: 25px"
			  onkeyup="if (event.which == 13) { BrowserLoadURL(); }"/>   
			<spring flex="100%"/>
	      </box>
	      <titledbutton id="print-button" align="bottom" value="Print"  
				onclick="">
	        <observes element="canPrint" attribute="disabled"/>
	      </titledbutton>

          <titledbutton id="Throbber" onclick="window.frames[0].frames[1].location.href='&throbber.url;'">
             <observes element="Browser:Throbber" attribute="busy"/>
          </titledbutton>
	</toolbar>

    <toolbar class="main-bar">
    	<titledbutton id="home-button" align="right" value="Home" 
			onclick="BrowserHome()"/>
		<titledbutton id="netscape-button" align="right" value="Netscape" 
			onclick="window.frames[0].frames[1].location.href='http://home.netscape.com'"/>
		<spring flex="100%"/>
	</toolbar>
  </toolbox>

  
  <html:iframe id="content-frame" src="contentframe.html" flex="100%" />

 
  <html:script>
        var bindCount = 0;
        function onStatus() {
            var status = document.getElementById("Browser:Status");
            if ( status ) {
                var text = status.getAttribute("text");
                var statusText = document.getElementById("statusText");
                if ( statusText ) {
                    statusText.setAttribute( "value", text );
                }
                /*
                if ( bindCount == 0 ) {
                    // This presumably precedes the first onStartBinding, spin
                    // the progress meter.
                    var meter = document.getElementById("Browser:LoadingProgress");
                    if ( meter ) {
                        meter.setAttribute( "mode", "undetermined" );
                    } 
                }
                */
            } else {
                dump("Can't find status broadcaster!\n");
            }
        }

        function onSecurity() {
            var security = document.getElementById("Browser:Security");
            var indicator = document.getElementById("security-box");
            var icon = document.getElementById("security-button");
 
            if ( security.getAttribute("secure") == "true" ) {
                indicator.setAttribute("class","secure");
                icon.setAttribute("class","secure");
            } else {
                indicator.setAttribute("class","insecure");
                icon.setAttribute("class","insecure");
            }
        }

        function securityOn() {
            var security = document.getElementById("Browser:Security");
            if ( security.getAttribute("secure") == "false" ) {
                security.setAttribute("secure","true");
                // Temporary till onchange handlers work.
                onSecurity();
            }
        }
        function securityOff() {
            var security = document.getElementById("Browser:Security");
            if ( security.getAttribute("secure") == "true" ) {
                security.setAttribute("secure","false");
                // Temporary till onchange handlers work.
                onSecurity();
            }
        }
        function doTests() {
            // Turn security on.
            securityOn();
        }
        function onStartBinding() {
            bindCount++;
            if ( bindCount == 1 ) {
                // Something is going on, turn on progress meter.
                var meter = document.getElementById("Browser:LoadingProgress");
                if ( meter ) {
                    meter.setAttribute( "mode", "undetermined" );
                } 
            }
        }
        function onStopBinding() {
            bindCount--;
            if ( bindCount &lt; 0 ) {
                // Something unusual occurred (stop/back?).
                bindCount = 0;
            }
            var stop = document.getElementById("Browser:OnStopBinding");
            if ( bindCount == 0 ) {
                // Turn off progress meter.
                var meter  = document.getElementById("Browser:LoadingProgress");
                var status = document.getElementById("Browser:Status");
                status.setAttribute("value","Document: Done");
                meter.setAttribute("value","0");
                meter.setAttribute("mode","normal");
            }
        }
        function onProgress() {
            var throbber = document.getElementById("Browser:Throbber");
            var meter    = document.getElementById("Browser:LoadingProgress");
            if ( throbber &amp;&amp; meter ) {
                var busy = throbber.getAttribute("busy");
                if ( busy == "true" ) {
                    mode = "undetermined";
                } else {
                    mode = "normal";
                }
                meter.setAttribute("mode",mode);
                if ( mode == "normal" ) {
                    var status = document.getElementById("Browser:Status");
                    if ( status ) {
                        status.setAttribute("value","Document: Done");
                    }
                }
            }
        }
        function dumpProgress() {
            var broadcaster = document.getElementById("Browser:LoadingProgress");
            var meter       = document.getElementById("meter");
            dump( "bindCount=" + bindCount + "\n" );
            dump( "broadcaster mode=" + broadcaster.getAttribute("mode") + "\n" );
            dump( "broadcaster value=" + broadcaster.getAttribute("value") + "\n" );
            dump( "meter mode=" + meter.getAttribute("mode") + "\n" );
            dump( "meter value=" + meter.getAttribute("value") + "\n" );
        }
    </html:script>

  <box align="horizontal" id="status-bar">
 
    <titledbutton value="[Notification Component]" onclick="doTests()"/>

	<box id="security-box" class="insecure" align="horizontal" flex="100%">
		<box align="vertical" style="width:100px">
			<spring flex="100%"/>
			<progressmeter id="statusbar-icon" mode="normal" value="0" onclick="dumpProgress()">
				<observes element="Browser:LoadingProgress" attribute="mode"/>
				<observes element="Browser:Throbber" attribute="busy" onchange="onProgress()"/>
			</progressmeter>
			<spring flex="100%"/>
		</box>

		<titledbutton id="statusText" align="right" flex="100%" value="Document: Done" style="font-family:sans-serif;font-size:2.5mm">
					   <observes element="Browser:Status" attribute="value" onchange="onStatus()"/>			
		</titledbutton>
		
		<spring flex="100%"/>

		<titledbutton align="right" value="Build ID: 1999042310" style="font-family:sans-serif;font-size:2.5mm;"/>
				
		<titledbutton id="security-button" class="insecure" value="Secure Conn" align="right" onclick="securityOff();"/>
     </box>
  </box>

  <toolbox>
	  <toolbar id="taskbar">
	  	  <box align="horizontal">
  	 	     <titledbutton align="left" class="popup"  value="Web" />
  	 	     <titledbutton align="left" class="popup"  value="Mail" />
  	 	     <titledbutton align="left" class="popup"  value="Chat" />
		  </box>
		  <spring flex="100%"/>
	 	  <box align="horizontal">
  	 		<titledbutton align="left"  class="popup"  value="DayPlanner" />
  	 		<titledbutton align="left"  class="popup"  value="Shopping" />
  	 		<titledbutton align="left"  class="popup"  value="My Desk" />
          </box>
		  <spring flex="100%"/>
	   	  <box align="horizontal">
  			<titledbutton align="left" class="popup" value="Open Windows" />
  	 		<titledbutton align="left" id="mini-nav" value="" />
  	 		<titledbutton align="left" id="mini-mail" value="" onclick="OpenMessenger()"/>
  	 		<titledbutton align="left" id="mini-addr" value="" />
  	 		<titledbutton align="left" id="mini-comp" value="" />
	      </box>
	  </toolbar>
	</toolbox>
  </box>
</window>
