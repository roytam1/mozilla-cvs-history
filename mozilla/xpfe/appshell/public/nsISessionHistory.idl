/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation.  All Rights
 * Reserved.
 */
 
#include "nsISupports.idl"
#include "nsIChannel.idl"
#include "nsIFactory.idl"

[ptr] native nsIWebShell(nsIWebShell);
%{C++
#include "nscore.h"
class nsIWebShell;
#define NS_SESSIONHISTORY_CID \
{ 0x68e73d52, 0x12eb, 0x11d3, { 0xbd, 0xc0, 0x00, 0x50, 0x04, 0x0a, 0x9b, 0x44 } }

#define NS_ISESSIONHISTORY_PROGID "component://netscape/appshell/component/browser/sessionhistory"
%}


[scriptable, uuid(68e73d51-12eb-11d3-bdc0-0050040a9b44)]
interface nsISessionHistory: nsISupports
{

  /**
   * Go forward in history 
   */
   [noscript] void goForward(in nsIWebShell aPrevPage);

  /**
   * Go Back in History
   */
   [noscript] void goBack(in nsIWebShell aPrevPage);

  /**
   * Reload the current history entry
   */
   [noscript] void reload(in nsIWebShell aPrevPage, in nsLoadFlags aReloadFlags);

  /**
   * Can I go forward in History
   */
   boolean canForward();

  /**
   * Can I go back in History
   */
   boolean  canBack();

  /**
   * Add a new URL to the History List
   */
   [noscript] void  add(in nsIWebShell aWebShell);

  /**
   * Goto to a particular point in history 
   */
   [noscript] void  Goto(in long aHistoryIndex, in nsIWebShell prev, in boolean aIsReloading);

  /**
   * Get the length of the History list
   */
   long getHistoryLength();

  /**
   * Get the index of the current document in the history list
   */
   long getCurrentIndex();

  /**
   * Set the flag whether a history entry is in the middle of loading a
   * doc. See comments below for details
   */
   void setLoadingFlag(in boolean aFlag);

  /**
   * Get the flag whether a history entry is in the middle of loading a
   * doc. See comments below for details
   */
   boolean  getLoadingFlag();

  /**
   * Get the URL of the index
   */
   wstring getURLForIndex(in long aIndex);


  /**
   * Set the URL of the index
   */
   void setURLForIndex(in long aIndex, in wstring aURL);

  /**
   * Get the title of the index
   */
   wstring GetTitleForIndex(in long aIndex);

 /**
   * Set the Title of the index
   */
   void setTitleForIndex(in long aIndex, in wstring aTitle);

  /**
   * Get the History object of the index
   */
   nsISupports getHistoryObjectForIndex(in PRInt32 aIndex);

  /**
   * Set the History state of the index
   */
   void SetHistoryObjectForIndex(in long  aIndex, in nsISupports aState);

  /** 
   *  Clear all history load flags 
   */
   void ClearLoadingFlags();

  /**
   *   Reconcile history status with the actual page load status 
   */
   [noscript] void UpdateStatus(in nsIWebShell aWebShell, in long aStatus);

   const unsigned long LOAD_HISTORY     = 10;

};

%{C++
extern nsresult NS_NewSessionHistoryFactory(nsIFactory** aResult);
%}
