<?xml version="1.0"?>

<bindings id="xulBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/TR/REC-html40"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding name="thumb" extends="xul:box">
    <content>
      <xul:spring flex="1"/>
		  <xul:image inherits="src"/>
		  <xul:spring flex="1"/>
    </content>
  </binding>

  <binding name="scrollbar">
    <content>
      <xul:scrollbarbutton type="decrement">
	      <xul:image inherits="src"/>
	    </xul:scrollbarbutton>
      <xul:slider flex="1" inherits="curpos,maxpos,pageincrement,increment">
	      <xul:thumb inherits="align,src" flex="1"/>
      </xul:slider>
      <xul:scrollbarbutton type="increment">
	    <xul:image inherits="src"/>
	  </xul:scrollbarbutton>
    </content>
  </binding>

  <binding name="slider">
    <content>
	  <xul:button align="horizontal"/>
	</content>
  </binding>

  <binding name="tab">
    <content>
      <xul:image inherits="src" class="tab-left"/>
      <xul:text flex="1" inherits="value,crop,accesskey" crop="right" class="tab-text"/>
    </content>
  </binding>

  <binding name="menusOnMenuBar">
    <content excludes="template,observes,menupopup">
      <xul:titledbutton class="menubar-left"/>
      <xul:titledbutton class="menubar-text" inherits="value,accesskey,crop" crop="right"/>
    </content>
  </binding>

  <binding name="menus">
    <content autostretch="never" excludes="template,observes,menupopup">
      <xul:image class="menu-left"/>
      <xul:text class="menu-text" flex="1" align="left" inherits="value,accesskey,crop" crop="right"/>
      <xul:text class="menu-accel" inherits="acceltext:value"/>
      <xul:image class="menu-right"/>
    </content>
  </binding>

  <binding name="menulist">
    <content excludes="template,observes,menupopup">
      <xul:image class="menu-icon" inherits="src"/>
      <xul:text class="menu-text" flex="1" inherits="value,accesskey,crop" crop="right"/>
      <xul:image class="menu-dropmarker"/>
    </content>
	  <handlers>
      <handler type="command" capturer="true" value="this.selectedItem = event.target"/>
	  </handlers>
  </binding>

  <binding name="menubutton">
    <content excludes="template,observes,menupopup">
      <xul:button class="menu-button" allowevents="true" inherits="buttonaction:oncommand,src,value,crop,accesskey"/>
      <xul:image class="menu-dropmarker"/>
    </content>
  </binding>

  <binding name="menulist-editable">
    <content excludes="template,observes,menupopup">
      <xul:image class="menu-icon" inherits="src"/>
	    <html:input type="text" flex="1" class="menu-text" allowevents="true" inherits="value,disabled"/>
      <xul:image class="menu-dropmarker"/>
    </content>
	  <handlers>
      <handler type="command" capturer="true" value="this.selectedItem = event.target"/>
	  </handlers>
  </binding>

  <binding name="treecell-indented-folder">
    <content>
      <xul:treeindentation/>
      <xul:titledbutton class="twisty" allowevents="true"/>
      <xul:titledbutton class="tree-icon tree-button" inherits="crop,value,align,src" 
                    flex="1" align="left" crop="right"/>
    </content>
  </binding>

  <binding name="treecell-indented-leaf">
    <content>
      <xul:treeindentation/>
      <xul:titledbutton class="twisty" disabled="true" allowevents="true"/>
      <xul:titledbutton class="tree-icon tree-button" inherits="crop,value,align,src" 
                    flex="1" align="left" crop="right"/>
    </content>
  </binding>

  <binding name="treecell">
    <content>
      <xul:titledbutton class="tree-button" inherits="crop,value,align,src" 
                    flex="1" align="left" crop="right"/>
    </content>
  </binding>

  <binding name="treecell-header">
    <content>
      <xul:image class="tree-button" inherits="src"/>
      <xul:text class="tree-text" inherits="crop,value" flex="1" crop="right"/>
      <xul:image class="treeheader-sortdirection"/>
    </content>
  </binding>
  
  <binding name="basetext">
    <interface>
      <!-- public interface -->
      <property name="value"      onset="return this.setAttribute('value',val);"
                                  onget="return this.getAttribute('value');"/>
      <property name="crop"       onset="return this.setAttribute('crop',val);"
                                  onget="return this.getAttribute('crop');"/>
      <property name="disabled"   onset="return this.setAttribute('disabled',val);"
                                  onget="return this.getAttribute('disabled');"/>
      <property name="src"        onset="return this.setAttribute('src',val);"
                                  onget="return this.getAttribute('src');"/>
      <property name="accesskey"  onset="return this.setAttribute('accesskey',val);"
                                  onget="return this.getAttribute('accesskey');"/>
      <property name="imgalign"   onset="return this.setAttribute('imgalign',val);"
                                  onget="return this.getAttribute('imgalign');"/>
    </interface>      
  </binding>
  
  <binding name="checkbox" extends="resource:/chrome/xulBindings.xml#basetext">
    <content>
      <xul:box flex="1" class="internal-box" autostretch="never">
        <xul:box class="checkmark-box" autostretch="never">
          <xul:image inherits="src"/>
        </xul:box>
        <xul:html inherits="value" flex="1"/>
      </xul:box>
    </content>
    <interface>
      <!-- public interface -->
      <property name="checked"    onset="if (val) this.setAttribute('checked', 'true');
                                         else this.removeAttribute('checked');
                                         return val;"
                                  onget="var v = this.getAttribute('checked');
                                         if (v == 'true') return true; return false;"/>
    </interface>
    <handlers>
      <handler type="mouseup" value="this.checked = !this.checked;"/>
      <handler type="keypress" key=" " value="this.checked = !this.checked;"/>
    </handlers>
  </binding>

  <binding name="checkbox-iconic" extends="resource:/chrome/xulBindings.xml#checkbox">
    <content>
      <xul:box flex="1" class="internal-box" autostretch="never">
        <xul:box class="checkmark-box" autostretch="never">
          <xul:image/>
        </xul:box>
        <xul:image inherits="src" class="icon" />
        <xul:html inherits="value" flex="1"/>
      </xul:box>
    </content>
  </binding>
  
  <binding name="radio" extends="resource:/chrome/xulBindings.xml#checkbox">
    <content>
      <xul:box flex="1" class="internal-box" autostretch="never">
        <xul:box class="checkmark-box" autostretch="never">
          <xul:image inherits="src"/>
        </xul:box>
        <xul:html inherits="value" flex="1"/>
      </xul:box>
    </content>  
  </binding>
  
  <binding name="radio-iconic" extends="resource:/chrome/xulBindings.xml#radio">
    <content>
      <xul:box flex="1" class="internal-box" autostretch="never">
        <xul:box class="checkmark-box" autostretch="never">
          <xul:image/>
        </xul:box>
        <xul:image inherits="src" class="icon"/>
        <xul:html inherits="value" flex="1"/>
      </xul:box>
    </content>  
  </binding>  

  <binding name="radiogroup">
  	<handlers>
      <handler type="mouseup" value="try { this.selectedItem = event.target; } catch (e) {}"/>
	    <handler type="keypress" key=" " value="try { this.selectedItem = event.target; } catch (e) {}"/>
	  </handlers>
  </binding>

  <!-- XUL <button>s -->
  <binding name="buttonleft" extends="resource:/chrome/xulBindings.xml#basetext">
    <content excludes="observes,template">
  	  <xul:box class="internal-box" inherits="orient" autostretch="never" flex="1">
        <xul:image inherits="src"/>
        <xul:box orient="vertical" class="text-container" autostretch="never" flex="1">
          <xul:text inherits="value,accesskey,crop"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>
  
  <binding name="buttonright" extends="resource:/chrome/xulBindings.xml#basetext">
    <content excludes="observes,template">
	    <xul:box autostretch="never" inherits="orient" class="internal-box" flex="1">
        <xul:box orient="vertical" class="text-container" autostretch="never" flex="1">
  	      <xul:text inherits="value,accesskey,crop"/>
        </xul:box>
        <xul:image inherits="src"/>
      </xul:box>
	  </content>
  </binding>
  
  <binding name="separator" extends="xul:spring"/>

  <!-- appending to the end so we don't make hyatt cry -->
  <binding name="progressmeter" extends="xul:box">
    <content excludes="observes,template">
      <xul:box class="internal-box" flex="1">
        <xul:stack flex="1">
          <xul:progressbar inherits="value">
            <xul:box class="progress-bar"/>
            <xul:box class="progress-remainder"/>
          </xul:progressbar>
          <xul:box>
            <xul:spring flex="1"/>
            <xul:text class="progress-text" inherits="progresstext:value"/>
            <xul:spring flex="1"/>
          </xul:box>
        </xul:stack>
      </xul:box>
    </content>
    <interface>
      <property name="progresstext"   onset="return this.setAttribute('progresstext',val);"
                                      onget="return this.getAttribute('progresstext');"/>
      <property name="value"          onset="return this.setAttribute('value',val);"
                                      onget="return this.getAttribute('value');"/>
    </interface>
  </binding>

  <binding name="textfield" extends="xul:box">
    <content excludes="observes,template">
      <xul:box flex="1">
        <html:input flex="1" inherits="value,type,maxlength,disabled,size,readonly"/>
      </xul:box>
    </content>
    <interface>
      <property name="value"      onset="return this.anonymousContent[0].firstChild.value = val;"
                                  onget="return this.anonymousContent[0].firstChild.value;"/>
      <property name="type"       onset="return this.anonymousContent[0].firstChild.type = val;"
                                  onget="return this.anonymousContent[0].firstChild.type;"/>
      <property name="maxlength"  onset="return this.anonymousContent[0].firstChild.maxlength = val;"
                                  onget="return this.anonymousContent[0].firstChild.maxlength;"/>
      <property name="disabled"   onset="return this.anonymousContent[0].firstChild.disabled = val;"
                                  onget="return this.anonymousContent[0].firstChild.disabled;"/>
      <property name="size"       onset="return this.anonymousContent[0].firstChild.size = val;"
                                  onget="return this.anonymousContent[0].firstChild.size;"/>
      <property name="readonly"   onset="return this.anonymousContent[0].firstChild.readonly = val;"
                                  onget="return this.anonymousContent[0].firstChild.readonly;"/>
    </interface>
    <handlers>
      <handler type="focus" value="this.setAttribute('focused','true');"/>
      <handler type="blur" value="this.removeAttribute('focused');"/>
    </handlers>    
  </binding>

  <binding name="textarea" extends="resource:/chrome/xulBindings.xml#textfield">
    <content excludes="observes,template">
      <xul:box flex="1">
        <html:textarea flex="1" inherits="value,disabled,rows,cols,readonly"/>
      </xul:box>
    </content>
  </binding>

  <binding name="text">
    <handlers>
      <handler type="click" value="var forElementID = this.getAttribute('for'); if(forElementID) var forElement = document.getElementById(forElementID); if(forElement) forElement.focus();"/>
    </handlers>
  </binding>
  
  <binding name="text-editable-display" extends="resource:/chrome/xulBindings.xml#text"/>
  
  <binding name="text-editable-edit" extends="xul:box">
    <content>
      <xul:box flex="1">
        <html:input type="text" inherits="value,type,maxlength,disabled,size,readonly"/>
      </xul:box>
    </content>
    <handlers>
      <handler type="blur" value="this.setAttribute('mode','display');"/>
    </handlers>
  </binding>

  <binding name="popups">
    <content>
      <xul:box class="internal-box" orient="vertical">
        <children/>
      </xul:box>
    </content>
  </binding>
  
</bindings>
