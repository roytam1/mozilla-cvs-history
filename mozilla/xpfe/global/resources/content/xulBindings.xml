<?xml version="1.0"?>
<!DOCTYPE window [
<!ENTITY % textcontextDTD SYSTEM "chrome://global/locale/textcontext.dtd" >
%textcontextDTD;
]>

<bindings id="xulBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="thumb" extends="xul:box">
    <content>
      <xul:spring flex="1"/>
		  <xul:image inherits="src"/>
		  <xul:spring flex="1"/>
    </content>
  </binding>

  <binding id="slider">
    <content>
      <xul:thumb inherits="align,src" flex="1"/>
    </content>
  </binding>

  <binding id="scrollbar">
    <content>
      <xul:scrollbarbutton type="decrement">
	      <xul:image inherits="src"/>
	    </xul:scrollbarbutton>
      <xul:slider flex="1" inherits="curpos,maxpos,pageincrement,increment"/>
      <xul:scrollbarbutton type="increment">
	    <xul:image inherits="src"/>
	  </xul:scrollbarbutton>
    </content>
  </binding>

  <binding id="tab">
    <content>
      <xul:image inherits="src" class="tab-left"/>
      <xul:text flex="1" inherits="value,crop,accesskey" crop="right" class="tab-text"/>
    </content>
  </binding>


  <binding id="menu-menubar">
    <content includes="menupopup">
      <xul:text class="menubar-text" inherits="value,accesskey,crop" crop="right"/>
    </content>
  </binding>

  <binding id="menu-menubar-iconic">
    <content includes="menupopup">
      <xul:image class="menubar-left"/>
      <xul:text class="menubar-text" inherits="value,accesskey,crop" crop="right"/>
    </content>
  </binding>

  <binding id="menu">
    <content autostretch="never" includes="menupopup">
      <xul:text class="menu-text" flex="1" align="left" inherits="value,accesskey,crop" crop="right"/>
      <xul:text class="menu-accel" inherits="acceltext:value"/>
      <xul:box autostretch="never" class="menu-right" inherits="menuactive,disabled">
        <xul:image/>
      </xul:box>
    </content>
    <implementation>
      <property name="data" onset="this.setAttribute('data',val); return val;"
                            onget="return this.getAttribute('data');"/>
    </implementation>  
  </binding>

  <binding id="menuitem">
    <content autostretch="never" includes="menupopup">
      <xul:text class="menu-text" flex="1" align="left" inherits="value,accesskey,crop" crop="right"/>
      <xul:text class="menu-accel" inherits="value=acceltext"/>
    </content>
    <implementation>
      <property name="data" onset="this.setAttribute('data',val); return val;"
                            onget="return this.getAttribute('data');"/>
    </implementation>  
  </binding>

  <binding id="menuitem-iconic">
    <content includes="menupopup">
      <xul:box class="menu-iconic-left" orient="vertical" autostretch="never" inherits="selected,menuactive,disabled,checked">
        <xul:image/>
      </xul:box>
      <xul:text class="menu-iconic-text" flex="1" align="left" inherits="value,accesskey,crop" crop="right"/>
      <xul:text class="menu-iconic-accel" inherits="value=acceltext"/>
    </content>
    <implementation>
      <property name="data" onset="this.setAttribute('data',val); return val;"
                            onget="return this.getAttribute('data');"/>
    </implementation>  
  </binding>

  <binding id="menu-iconic">
    <content autostretch="never" includes="menupopup">
      <xul:box class="menu-iconic-left" orient="vertical" autostretch="never">
        <xul:image/>
      </xul:box>
      <xul:text class="menu-iconic-text" flex="1" align="left" inherits="value,accesskey,crop" crop="right"/>
      <xul:text class="menu-iconic-accel" inherits="value=acceltext"/>
      <xul:box orient="vertical" autostretch="never" class="menu-right" inherits="menuactive,disabled">
        <xul:image/>
      </xul:box>
    </content>
    <implementation>
      <property name="data" onset="this.setAttribute('data',val); return val;"
                            onget="return this.getAttribute('data');"/>
    </implementation>  
  </binding>
  
  <binding id="basetext">
    <implementation>
      <!-- public implementation -->
      <property name="value"      onset="return this.setAttribute('value',val);"
                                  onget="return this.getAttribute('value');"/>
      <property name="crop"       onset="return this.setAttribute('crop',val);"
                                  onget="return this.getAttribute('crop');"/>
      <property name="disabled"   onset="if (val) this.setAttribute('disabled', 'true');
                                         else this.removeAttribute('disabled');
                                         return val;"
                                  onget="var v = this.getAttribute('disabled');
                                         if (v == 'true') return true; return false;"/>                                  
      <property name="src"        onset="return this.setAttribute('src',val);"
                                  onget="return this.getAttribute('src');"/>
      <property name="accesskey"  onset="return this.setAttribute('accesskey',val);"
                                  onget="return this.getAttribute('accesskey');"/>
      <property name="imgalign"   onset="return this.setAttribute('imgalign',val);"
                                  onget="return this.getAttribute('imgalign');"/>
    </implementation>      
  </binding>
  
  <binding id="checkbox" extends="chrome://global/content/xulBindings.xml#basetext">
    <content>
      <xul:box flex="1" class="internal-box" autostretch="never" valign="top">
        <xul:box class="checkmark-box" autostretch="never">
          <xul:image class="checkbox-check"/>
        </xul:box>
        <xul:image class="checkbox-icon" inherits="src"/>
        <xul:html inherits="value,accesskey,crop" flex="1">
          <children/>
        </xul:html>
      </xul:box>
    </content>
    <implementation>
      <!-- public implementation -->
      <property name="checked"    onset="if (val) this.setAttribute('checked', 'true');
                                         else this.removeAttribute('checked');
                                         return val;"
                                  onget="var v = this.getAttribute('checked');
                                         if (v == 'true') return true; return false;"/>
    </implementation>
    <handlers>
      <handler event="click" button="1" action="if (!this.disabled) this.checked = !this.checked;"/>
      <handler event="keypress" key=" " action="if (!this.disabled) this.checked = !this.checked;"/>
    </handlers>
  </binding>

  <!-- XUL <button>s -->
  <binding id="buttonleft" extends="chrome://global/content/xulBindings.xml#basetext">
    <content>
  	  <xul:box class="button-internal-box" autostretch="never" flex="1">
        <xul:image class="button-icon" inherits="src"/>
        <xul:box orient="vertical" class="button-text-container" autostretch="never" flex="1">
          <xul:text class="button-text" inherits="value,accesskey,crop,dragover-top"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>

  <binding id="buttontop" extends="chrome://global/content/xulBindings.xml#basetext">
    <content>
  	  <xul:box class="button-internal-box" orient="vertical" autostretch="never" flex="1">
        <xul:image class="button-icon" inherits="src"/>
        <xul:box orient="vertical" class="button-text-container" autostretch="never" flex="1">
          <xul:text class="button-text" inherits="value,accesskey,crop,dragover-top"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>
  
  <binding id="buttonright" extends="chrome://global/content/xulBindings.xml#basetext">
    <content>
  	  <xul:box class="button-internal-box" inherits="orient" autostretch="never" flex="1">
        <xul:box orient="vertical" class="button-text-container" autostretch="never" flex="1">
          <xul:text class="button-text" inherits="value,accesskey,crop,dragover-top"/>
        </xul:box>
        <xul:image class="button-icon" inherits="src"/>
      </xul:box>
    </content>
  </binding>

  <binding id="buttonbottom" extends="chrome://global/content/xulBindings.xml#basetext">
    <content>
  	  <xul:box class="button-internal-box" orient="vertical" autostretch="never" flex="1">
        <xul:box orient="vertical" class="button-text-container" autostretch="never" flex="1">
          <xul:text class="button-text" inherits="value,accesskey,crop,dragover-top"/>
        </xul:box>
        <xul:image class="button-icon" inherits="src"/>
      </xul:box>
    </content>
  </binding>
  
  <binding id="separator" extends="xul:spring"/>

  <!-- appending to the end so we don't make hyatt cry -->
  <binding id="progressmeter" extends="xul:box">
    <content>
      <xul:box class="progressmeter-internal-box" flex="1">
        <xul:stack class="progressmeter-stack" flex="1">
          <xul:progressbar class="progressmeter-progressbar" inherits="value,statusbar">
            <xul:box class="progress-bar"/>
            <xul:box class="progress-remainder"/>
          </xul:progressbar>
          <xul:box>
            <xul:spring flex="1"/>
            <xul:text class="progress-text" inherits="progresstext:value"/>
            <xul:spring flex="1"/>
          </xul:box>
        </xul:stack>
      </xul:box>
    </content>
    <implementation>
      <property name="progresstext"   onset="this.setAttribute('progresstext',val); return val;"
                                      onget="return this.getAttribute('progresstext');"/>
      <property name="value"          onset="this.setAttribute('value',val); return val;"
                                      onget="return this.getAttribute('value');"/>
      <property name="mode"           onset="this.setAttribute('mode', val); return val;"
                                      onget="return this.getAttribute('mode');"/>
    </implementation>
  </binding>

  <binding id="textfield" extends="xul:box">
    <content context="_child">
      <xul:box class="textfield-internal-box" flex="1">
        <html:input class="textfield-input" flex="1" inherits="onfocus,onblur,value,type,maxlength,disabled,size,readonly"/>
      </xul:box>
      <xul:popupset>
        <xul:popup oncreate="this.parentNode.parentNode.doPopupItemEnabling(this);">
          <xul:menuitem value="&undoCmd.label;" accesskey="&undoCmd.accesskey;" command="cmd_undo" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_undo');              
            controller.doCommand('cmd_undo');"/>
          <xul:menuseparator/>
          <xul:menuitem value="&cutCmd.label;" accesskey="&cutCmd.accesskey;" command="cmd_cut" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_cut');
            controller.doCommand('cmd_cut');"/>
          <xul:menuitem value="&copyCmd.label;" accesskey="&copyCmd.accesskey;" command="cmd_copy" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_copy');
            controller.doCommand('cmd_copy');"/>
          <xul:menuitem value="&pasteCmd.label;" accesskey="&pasteCmd.accesskey;" command="cmd_paste" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_paste');
            controller.doCommand('cmd_paste');"/>
          <xul:menuitem value="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" command="cmd_delete" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_delete');
            controller.doCommand('cmd_delete');"/>
           <xul:menuseparator/>
          <xul:menuitem value="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" command="cmd_selectAll" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_selectAll');
            controller.doCommand('cmd_selectAll');"/>
        </xul:popup>
      </xul:popupset>
    </content>
    <implementation>
      <property name="inputField" readonly="true">
       <![CDATA[
        var v = document.getAnonymousNodes(this);
        var input = null;
        for (var i = 0; i < v.length; i++) {
          try {
            var l = v[i].getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "input");
            if (l.length > 0) {
              input = l[0];
              break;
            }
          } catch (e) {} 
        }
        input;
      ]]>
      </property>
      <property name="value"      onset="this.inputField.value = val; return val;"
                                  onget="return this.inputField.value;"/>
      <property name="type"       onset="this.inputField.type = val; return val;"
                                  onget="return this.inputField.type;"/>
      <property name="maxlength"  onset="this.inputField.maxlength = val; return val;"
                                  onget="return this.inputField.maxlength;"/>
      <property name="disabled"   onset="this.inputField.disabled = val; return val;"
                                  onget="return this.inputField.disabled;"/>
      <property name="size"       onset="this.inputField.size = val; return val;"
                                  onget="return this.inputField.size;"/>
      <property name="readonly"   onset="this.inputField.readonly = val; return val;"
                                  onget="return this.inputField.readonly;"/>

      <method name="select">
        <body>
          this.inputField.select();
        </body>
      </method>

      <method name="doPopupItemEnabling">
        <parameter name="popupNode"/> 
        <body>
          <![CDATA[
            var children = popupNode.childNodes;
            for (var i = 0; i < children.length; i++) {              
              var command = children[i].getAttribute("command");
              if (command) {
                var controller = document.commandDispatcher.getControllerForCommand(command);
                var enabled = controller.isCommandEnabled(command);
                if (enabled)
                  children[i].removeAttribute('disabled');
                else
                  children[i].setAttribute('disabled','true');               
              }
            }
          ]]>
        </body>
      </method>
                             
      
      <property name="controllers"    readonly="true" onget="return this.inputField.controllers"/>
      <property name="textLength"     readonly="true" onget="return this.inputField.textLength;"/>
      <property name="selectionStart" onset="this.inputField.selectionStart = val; return val;"
                                      onget="return this.inputField.selectionStart;"/>
      <property name="selectionEnd"   onset="this.inputField.selectionEnd = val; return val;"
                                      onget="return this.inputField.selectionEnd;"/>
     
      <property name="suppressFocusBlur">
        false
      </property>

      <method name="setSelectionRange">
        <parameter name="aSelectionStart"/>
        <parameter name="aSelectionEnd"/>
        <body>
          this.inputField.setSelectionRange( aSelectionStart, aSelectionEnd );
        </body>
      </method>

    </implementation>
    <handlers>
      <handler event="focus" phase="capturing">
      <![CDATA[
        if (this.getAttribute('focused') != 'true') {
          this.setAttribute('focused','true');
          this.suppressFocusBlur = true;
          if (document.commandDispatcher.focusedElement != this.inputField) 
            this.inputField.focus();
          this.suppressFocusBlur = false;
        }
      ]]>
      </handler>
      <handler event="blur" phase="capturing">
      <![CDATA[
        if (!this.suppressFocusBlur && this.getAttribute('focused') == 'true') {
          this.removeAttribute('focused');
        }
      ]]>
      </handler>
      <!-- Ensure that our state gets saved/restored across skin switches. -->
       <handler event="bindingattached" action="var str = this.boxObject.getProperty('value'); 
                                                if (str) {
                                                  this.inputField.value=str;
                                                  this.boxObject.removeProperty('value');
                                                }"/>
       <handler event="bindingdetached" action="if (this.inputField.value) this.boxObject.setProperty('value', this.inputField.value);"/>
   </handlers>    
  </binding>

  <binding id="textarea" extends="chrome://global/content/xulBindings.xml#textfield">
    <content context="_child">
      <xul:box class="textarea-internal-box" flex="1">
        <html:textarea class="textfield-textarea" flex="1" inherits="onfocus,onblur,value,disabled,rows,cols,readonly"/>
      </xul:box>
      <xul:popupset>
        <xul:popup oncreate="this.parentNode.parentNode.doPopupItemEnabling(this);">
          <xul:menuitem value="&undoCmd.label;" accesskey="&undoCmd.accesskey;" command="cmd_undo" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_undo');              
            controller.doCommand('cmd_undo');"/>
          <xul:menuseparator/>
          <xul:menuitem value="&cutCmd.label;" accesskey="&cutCmd.accesskey;" command="cmd_cut" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_cut');
            controller.doCommand('cmd_cut');"/>
          <xul:menuitem value="&copyCmd.label;" accesskey="&copyCmd.accesskey;" command="cmd_copy" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_copy');
            controller.doCommand('cmd_copy');"/>
          <xul:menuitem value="&pasteCmd.label;" accesskey="&pasteCmd.accesskey;" command="cmd_paste" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_paste');
            controller.doCommand('cmd_paste');"/>
          <xul:menuitem value="&deleteCmd.label;" accesskey="&deleteCmd.accesskey;" command="cmd_delete" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_delete');
            controller.doCommand('cmd_delete');"/>
           <xul:menuseparator/>
          <xul:menuitem value="&selectAllCmd.label;" accesskey="&selectAllCmd.accesskey;" command="cmd_selectAll" oncommand="
            var controller = document.commandDispatcher.getControllerForCommand('cmd_selectAll');
            controller.doCommand('cmd_selectAll');"/>
        </xul:popup>
      </xul:popupset>
    </content>
    <implementation>
      <property name="inputField" readonly="true">
       <![CDATA[
        var v = document.getAnonymousNodes(this);
        var input = null;
        for (var i = 0; i < v.length; i++) {
          try {
            var l = v[i].getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "textarea");
            if (l.length > 0) {
              input = l[0];
              break;
            }
          } catch (e) {} 
        }
        input;
      ]]>
      </property>
      <method name="doPopupItemEnabling">
        <parameter name="popupNode"/> 
        <body>
          <![CDATA[
            var children = popupNode.childNodes;
            for (var i = 0; i < children.length; i++) {              
              var command = children[i].getAttribute("command");
              if (command) {
                var controller = document.commandDispatcher.getControllerForCommand(command);
                var enabled = controller.isCommandEnabled(command);
                if (enabled)
                  children[i].removeAttribute('disabled');
                else
                  children[i].setAttribute('disabled','true');               
              }
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="text-label">
    <handlers>
      <handler event="click" action="var forElementID = this.getAttribute('for'); if(forElementID) var forElement = document.getElementById(forElementID); if(forElement) forElement.focus();"/>
    </handlers>
  </binding>
  
  <binding id="text-editable-display" extends="chrome://global/content/xulBindings.xml#text"/>
  
  <binding id="text-editable-edit" extends="xul:box">
    <content>
      <xul:box flex="1">
        <html:input type="text" inherits="value,type,maxlength,disabled,size,readonly"/>
      </xul:box>
    </content>
    <handlers>
      <handler event="blur" action="this.setAttribute('mode','display');"/>
    </handlers>
  </binding>

  <binding id="tooltips" extends="chrome://global/content/xulBindings.xml#popups">
    <content>
      <xul:box class="popup-internal-box" orient="vertical" flex="1">
        <children/>
      </xul:box>
    </content>
  </binding>

  <binding id="popups">
    <content>
      <!--xul:box class="popup-internal-box" orient="vertical" flex="1" style="overflow: auto">
        <children/>
      </xul:box-->

      <xul:arrowscrollbox class="popup-internal-box" flex="1" orient="vertical">
		  <!--xul:box class="popup-internal-box" orient="vertical"-->
			<children/>
		  <!--/xul:box-->
      </xul:arrowscrollbox>

    </content>
    <implementation>
      <method name="openPopup">
        <parameter name="element"/>
        <parameter name="xpos"/>
        <parameter name="ypos"/>
        <parameter name="popuptype"/>
        <parameter name="anchoralignment"/>
        <parameter name="popupalignment"/>
        <body>
        <![CDATA[
          try {
            var popupSetBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIPopupSetBoxObject);
            var menuBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject);
          } catch(e) {}
          if (popupSetBox)
            popupSetBox.createPopup(element, this, xpos, ypos, popuptype, anchoralignment, popupalignment);
          else if (menuBox)
            menuBox.openMenu(true);
        ]]>
        </body>
      </method>
      <method name="closePopup">
        <body>
        <![CDATA[
          try {
            var popupSetBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIPopupSetBoxObject);
            var menuBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject);
          } catch(e) {}
          if (popupSetBox)
            popupSetBox.destroyPopup();
          else if (menuBox)
            menuBox.openMenu(false);
        ]]>
        </body>
      </method>
      <property name="activeChild">
        <getter>
          <![CDATA[
            try {
              var popupSetBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIPopupSetBoxObject);
              var menuBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject);
            } catch(e) {}
            if (popupSetBox)
              return popupSetBox.activeChild;
            else if (menuBox)
              return menuBox.activeChild;
            throw Components.results.NS_ERROR_FAILURE;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            try {
              var popupSetBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIPopupSetBoxObject);
              var menuBox = this.parentNode.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject);
            } catch(e) {}
            if (popupSetBox)
              return popupSetBox.activeChild = val;
            else if (menuBox)
              return menuBox.activeChild = val;
            throw Components.results.NS_ERROR_FAILURE;
          ]]>
        </setter>
      </property>
    </implementation>     
  </binding>
  
  
  <!-- XUL <statusbar> -->
  <binding id="statusbar" extends="xul:box"/>
    
  <binding id="statusbar-panel" extends="xul:button">
    <content autostretch="never" valign="middle">
      <xul:image class="statusbar-panel-icon" inherits="src"/>
      <xul:text class="statusbar-panel-text" inherits="value,crop" crop="right" flex="1"/>
    </content>
    <implementation>
      <property name="value"
                onget="return this.getAttribute('value');"
                onset="this.setAttribute('value',val); return val;"/>
      <property name="src"
                onget="return this.getAttribute('src');"
                onset="this.setAttribute('src',val); return val;"/>
    </implementation>
  </binding>
  
  <binding id="browser">
    <implementation>
      <property name="docShell"
                readonly="true"
                onget="return this.boxObject.QueryInterface(Components.interfaces.nsIBrowserBoxObject).docShell;"/>
      <property name="webNavigation"
                readonly="true"
                onget="return this.docShell.QueryInterface(Components.interfaces.nsIWebNavigation);"/>
      <property name="markupDocumentViewer"
                readonly="true"
                onget="return this.docShell.contentViewer.QueryInterface(Components.interfaces.nsIMarkupDocumentViewer);"/>
      <property name="contentViewerEdit"
                readonly="true"
                onget="return this.docShell.contentViewer.QueryInterface(Components.interfaces.nsIContentViewerEdit);"/>
      <property name="contentViewerFile"
                readonly="true"
                onget="return this.docShell.contentViewer.QueryInterface(Components.interfaces.nsIContentViewerFile);"/>
      <property name="documentCharsetInfo"
                readonly="true"
                onget="return this.docShell.documentCharsetInfo;"/>
    </implementation>
  </binding>

  <binding id="editor">
    <implementation>
      <property name="editorShell"
                readonly="true"
                onget="return this.boxObject.QueryInterface(Components.interfaces.nsIEditorBoxObject).editorShell"/>
    </implementation>
  </binding>

  <binding id="iframe">
    <implementation>
      <property name="docShell"
                readonly="true"
                onget="return this.boxObject.QueryInterface(Components.interfaces.nsIIFrameBoxObject).docShell"/>
    </implementation>
  </binding>

  <binding id="titledbox">
    <content>
      <xul:box class="titledbox-title" autostretch="never" orient="vertical">
        <children includes="title"/>
      </xul:box>
      <xul:box flex="1" class="titledbox-body" inherits="orient,autostretch,align,valign">
        <children/>
      </xul:box>
    </content>    
  </binding>
  
  <binding id="titledboxvalue">
    <content>
      <xul:box class="titledbox-title" autostretch="never" orient="vertical">
        <xul:title inherits="value"/>
      </xul:box>
      <xul:box flex="1" class="titledbox-body" inherits="orient,autostretch,align,valign">
        <children/>
      </xul:box>
    </content>    
  </binding>
  
  <binding id="title" extends="xul:box">
    <content>
      <xul:text inherits="value"/>
    </content>
  </binding>

  <binding id="autorepeatbutton-up">
     <content>
	    <xul:image class="autorepeatbutton-up"/>
	 </content>
  </binding>

  <binding id="autorepeatbutton-down">
     <content>
	    <xul:image class="autorepeatbutton-down"/>
	 </content>
  </binding>

  <binding id="scrollbox">
    <content>
	  <xul:box class="scrollbox-innerbox" inherits="orient,autostretch,align,valign">
	    <children/>
	  </xul:box>
	</content>
  </binding>

  <binding id="arrowscrollbox" extends="xul:stack">
    <content>
	  <xul:vbox 
	  onunderflow="
		  var button1 = this.firstChild;
		  var button2 = this.childNodes[2];
 		  button1.setAttribute('collapsed', 'true');
		  button2.setAttribute('collapsed', 'true');
      " 
	  onoverflow="
		  var button1 = this.firstChild;
		  var button2 = this.childNodes[2];
 		  button1.removeAttribute('collapsed');
		  button2.removeAttribute('collapsed');
      ">
	  <xul:autorepeatbutton autostretch="never" class="up" collapsed="true" 
	      oncommand="parentNode.childNodes[1].boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject).scrollByIndex(-1);"/>
	  <xul:scrollbox orient="vertical" flex="1">
		 <children/>
	  </xul:scrollbox>
	  <xul:autorepeatbutton autostretch="never" class="down" collapsed="true" 
	      oncommand="parentNode.childNodes[1].boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject).scrollByIndex(1);"/>
	  </xul:vbox>
    </content>
  </binding>

</bindings>

