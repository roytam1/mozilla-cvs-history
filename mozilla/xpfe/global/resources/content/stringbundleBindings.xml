<?xml version="1.0"?>

<bindings id="stringBundleBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="stringbundleset" extends="xul:box"/>

  <binding id="stringbundle" extends="xul:spring">
    <implementation name="XStringBundle">
      
      <method name="getString">
        <parameter name="aStringKey"/>
        <body>
          <![CDATA[
            try {
              return this.stringBundle.GetStringFromName(aStringKey);
            }
            catch (e) {
              dump("<StringBundle> Error: Failed to get string from bundle. Are you using the right key?\n");
              dump("The key you provided was: " + aStringKey + "\n");
              dump("The exception thrown was:\n" + e + "\n");
              throw e;
              return null;
            }
          ]]>
        </body>
      </method>
    
      <property name="stringBundle" readonly="true">
        <getter>
          <![CDATA[
            if (!this._bundle) {
              try {
                var stringBundleService = Components.classes["@mozilla.org/intl/stringbundle;1"]
                                                    .getService(Components.interfaces.nsIStringBundleService);
                this._bundle = stringBundleService.CreateBundle(this.src, this.appLocale);
              }
              catch (e) {
                dump("Failed to get stringbundle:\n");
                dump(e + "\n");
              }
            }
            return this._bundle;
          ]]>
        </getter>
      </property>

      <property name="src">
        <getter>
          <![CDATA[
            return this.getAttribute("src");
          ]]>
        </getter>
        <setter>
          <![CDATA[
            this._bundle = null;
            this.setAttribute("src", val);
            return val;
          ]]>
        </setter>
      </property>

      <property name="appLocale">
        <getter>
          <![CDATA[
            try {
              var localeService = Components.classes["@mozilla.org/intl/nslocaleservice;1"]
                                            .getService(Components.interfaces.nsILocaleService);
              return localeService.GetApplicationLocale();
            }
            catch (ex) {
              return null;
            }
          ]]>
        </getter>
      </property>
      <property name="_bundle"/>
      <property name="_src"/>

    </implementation>
  </binding>
  
</bindings>
