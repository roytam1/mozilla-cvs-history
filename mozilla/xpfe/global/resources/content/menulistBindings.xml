<?xml version="1.0"?>

<bindings id="menulistBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<!-- 
  BINDING : menulist
  XUL REPRESENTATION : <menulist>
  -->
  <binding id="menulist">
    <content includes="menupopup">
      <xul:image class="menu-icon" inherits="src"/>
      <xul:text class="menu-text" flex="1" inherits="value,accesskey,crop" crop="right"/>
      <xul:image class="menu-dropmarker"/>
    </content>
	  <handlers>
      <handler event="command" phase="capturing" action="if (event.target.localName == 'menuitem') { this.selectedItem = event.target; this.data = this.selectedItem.data; }"/>
	  </handlers>
    <implementation>
      <property name="data" onset="this.setAttribute('data',val); return val;"
                            onget="return this.getAttribute('data');"/>
    </implementation>  
  </binding>

<!-- 
  BINDING : menulist-editable
  XUL REPRESENTATION : <menulist editable="true">
  -->
  <binding id="menulist-editable">
    <content includes="menupopup">
      <xul:image class="menu-icon" inherits="src"/>
	    <html:input event="text" flex="1" class="menu-text" allowevents="true" inherits="value,disabled"/>
      <xul:image class="menu-dropmarker"/>
    </content>
	  <handlers>
      <handler event="command" phase="capturing" action="if (event.target.localName == 'menuitem') { this.selectedItem = event.target; this.data = this.selectedItem.data; }"/>
	  </handlers>
  </binding>
  
<!-- 
  BINDING : menubutton-single
  XUL REPRESENTATION : <menubutton>
  -->
  <binding id="menubutton-single-right">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box" autostretch="never">
        <xul:text class="menubutton-single-text" inherits="value,crop,accesskey"/>
        <xul:image class="menubutton-single-icon"/>
      </xul:box>
    </content>
  </binding>

  <binding id="menubutton-single-left">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box" autostretch="never">
        <xul:image class="menubutton-single-icon"/>
        <xul:text class="menubutton-single-text" inherits="value,crop,accesskey"/>
      </xul:box>
    </content>
  </binding>
  
<!-- 
  BINDING : menubutton-icon
  XUL REPRESENTATION : <menubutton class="menubutton-icon">
  -->
  <binding id="menubutton-icon">
    <content includes="menupopup">
      <xul:box class="menubutton-icon-internal-box" autostretch="never">
        <xul:image class="menubutton-icon-icon" inherits="src"/>
      </xul:box>
    </content>
  </binding>
  
<!-- 
  BINDING : menubutton-dual
  XUL REPRESENTATION : <menubutton class="menubutton-dual">
  -->
  <binding id="menubutton-dual-top">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box">
        <xul:button class="menubutton-dual-button top" allowevents="true" 
                    inherits="tooltiptext=buttontooltiptext,oncommand=buttonaction,src,value,crop,accesskey"/>
        <xul:box class="menubutton-dual-dropmarker-box" autostretch="never" valign="middle">
          <xul:image class="menubutton-dropmarker"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>

  <binding id="menubutton-dual-left">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box">
        <xul:button class="menubutton-dual-button left" allowevents="true" 
                    inherits="tooltiptext=buttontooltiptext,oncommand=buttonaction,src,value,crop,accesskey"/>
        <xul:box class="menubutton-dual-dropmarker-box" autostretch="never" valign="middle">
          <xul:image class="menubutton-dropmarker"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>

  <binding id="menubutton-dual-right">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box">
        <xul:button class="menubutton-dual-button right" allowevents="true" 
                    inherits="tooltiptext=buttontooltiptext,oncommand=buttonaction,src,value,crop,accesskey"/>
        <xul:box class="menubutton-dual-dropmarker-box" autostretch="never" valign="middle">
          <xul:image class="menubutton-dropmarker"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>

  <binding id="menubutton-dual-bottom">
    <content includes="menupopup">
      <xul:box class="menubutton-internal-box">
        <xul:button class="menubutton-dual-button bottom" allowevents="true" 
                    inherits="tooltiptext=buttontooltiptext,oncommand=buttonaction,src,value,crop,accesskey"/>
        <xul:box class="menubutton-dual-dropmarker-box" autostretch="never" valign="middle">
          <xul:image class="menubutton-dropmarker"/>
        </xul:box>
      </xul:box>
    </content>
  </binding>

  <binding id="menubutton-dual-ex" extends="chrome://global/content/menulistBindings.xml#menubutton-dual-top">
    <content includes="menupopup">
      <xul:button class="menubutton-dual-ex-button top" allowevents="true" 
                  inherits="tooltiptext=buttontooltiptext,oncommand=buttonaction,src,value,crop,accesskey,disabled"
                  onmouseover="this.parentNode.buttonover = true;"
                  onmouseout="this.parentNode.buttonover = false;"
                  onmousedown="this.parentNode.buttondown = true;"
                  onmouseup="this.parentNode.buttondown = false;"/>
      <xul:box class="menubutton-dual-dropmarker-box" autostretch="never" valign="middle" inherits="disabled">
        <xul:image class="menubutton-dropmarker" inherits="disabled"/>
      </xul:box>
    </content>
    <implementation>
      <property name="buttonover">
        <getter>
          return this.getAttribute("buttonover");
        </getter>
        <setter>
        <![CDATA[
          if (!val && this.getAttribute("buttondown") == "true") { 
            this.removeAttribute("buttondown");
            this._pendingActive = true;
          } 
          else {
            if (this._pendingActive && this._buttonIsDown) {
              this.setAttribute("buttondown", "true");
              this._pendingActive = false;
              this._buttonIsDown = false;
            }
          }
          this.setAttribute("buttonover", val);
          return val;
        ]]>
        </setter>
      </property>
      <property name="buttondown">
        <getter>
          return this.getAttribute("buttondown");
        </getter>
        <setter>
          if (val) this._buttonIsDown = true;
          this.setAttribute("buttondown", val);
          return val;
        </setter>
      </property>
      <property name="_pendingActive">false</property>
      <property name="_buttonIsDown">false</property>
    </implementation>
  </binding>
  
<!--
  BINDING : menubutton-item
  XUL REPRESENTATION : menuitem
  -->  
  <binding id="menubutton-item">
    <content autostretch="never" includes="menupopup">
      <xul:text class="menubutton-text" flex="1" inherits="value,accesskey,crop" crop="right"/>
    </content>
  </binding>  
  
  
</bindings>