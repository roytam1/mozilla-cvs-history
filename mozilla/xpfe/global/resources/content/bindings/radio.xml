<?xml version="1.0"?>

<bindings id="radioBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="radiogroup">
    <resources>
      <stylesheet src="chrome://global/skin/radio.css"/>
    </resources>

    <implementation implements="nsIDOMXULSelectControlElement">
      <property name="value" onset="this.setAttribute('value',val); return val;"
                             onget="return this.getAttribute('value');"/>
      <property name="disabled">
        <getter>
        <![CDATA[
            return this.getAttribute('disabled') == 'true';
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (val)
            this.setAttribute('disabled', 'true');
          else
            this.removeAttribute('disabled');
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i) {
            children[i].disabled = val;
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <property name="selectedItem">
        <getter>
        <![CDATA[
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i) {
            if (children[i].selected)
              return children[i];
          }
          return null;
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (this.getAttribute("focused") == "true") 
            val.setAttribute("focused", "true");

          val.setAttribute("selected", "true");
          this.value = val.value;
          
          // uncheck all other group nodes
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i) {
            if (children[i] != val) {
              children[i].removeAttribute("selected");
              children[i].removeAttribute("focused");
            }
          }
          var event = document.createEvent("Events");
          event.initEvent("select", false, true);
          this.dispatchEvent(event);

          return val;
        ]]>
        </setter>        
      </property>
      
      <property name="focusedItem">
        <getter>
        <![CDATA[
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i) {
            if (children[i].getAttribute("focused") == "true")
              return children[i];
          }
          return null;
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (val) val.setAttribute("focused", "true");
          
          // unfocus all other group nodes
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i) {
            if (children[i] != val)
              children[i].removeAttribute("focused");
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <method name="checkAdjacentElement">
        <parameter name="aNextFlag"/>
        <body>
        <![CDATA[
          var currentElement = this.focusedItem;
          var index;
          var children = this._getRadioChildren();
          for (var i = 0; i < children.length; ++i ) {
            if (children[i] != currentElement) 
              continue;
            if (aNextFlag) {
              index = (i + 1) % children.length;
              this.selectedItem = children[index];
              children[index].doCommand();
              break;
            }
            else {              
              index = i > 0 ? i - 1 : children.length - 1;
              this.selectedItem = children[index];
              children[index].doCommand();
              break;
            }
          }
        ]]>
        </body>
      </method>
      <field name="mRadioChildren">[]</field>
      <method name="_getRadioChildren">
        <parameter name="aNode">this</parameter>
        <body>
        <![CDATA[
          if (aNode) {
            if (aNode == this && this.mRadioChildren)
              return this.mRadioChildren;
            else if (aNode.localName == "radio") {
              this.mRadioChildren[this.mRadioChildren.length++] = aNode;
              return this.mRadioChildren;
            }
            else if (aNode.localName == "radiogroup" && aNode != this)
              return this.mRadioChildren;
            for (var i = 0; i < aNode.childNodes.length; ++i)
              this._getRadioChildren(aNode.childNodes[i]);
          }
          return this.mRadioChildren;
        ]]>
        </body>
      </method>

      <method name="appendItem">
        <parameter name="label"/>
        <parameter name="value"/>
        <body>
        <![CDATA[
          var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          var radio = document.createElementNS(XULNS, "radio");
          radio.setAttribute("label", label);
          radio.setAttribute("value", value);
          this.appendChild(radio);
        ]]>
        </body>
      </method>
      
      <method name="insertItemAt">
        <parameter name="index"/>
        <parameter name="label"/>
        <parameter name="value"/>
        <body>
        <![CDATA[
          var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          var radio = document.createElementNS(XULNS, "radio");
          radio.setAttribute("label", label);
          radio.setAttribute("value", value);
          var before = this.childNodes[index];
          if (before)
            this.insertBefore(radio, before);
          else
            this.appendChild(radio);
        ]]>
        </body>
      </method>

      <method name="removeItemAt">
        <parameter name="index"/>
        <body>
        <![CDATA[
          var remove = this.childNodes[index];
          if (remove)
            this.removeChild(remove);
        ]]>
        </body>
      </method>
    </implementation>
    
    <handlers>
      <handler event="click" button="0">
        <![CDATA[
          if (event.target.localName == "radio" && !event.target.disabled) 
            this.selectedItem = event.target;
          event.preventBubble();
         ]]>
      </handler>
      <handler event="select">
        <![CDATA[
          //XXXblake this should not be necessary
          //         initEvent was supposed to prevent this from bubbling
          event.preventBubble();
        ]]>
      </handler>
      <handler event="mousedown" button="0">
        <![CDATA[
          if (event.target.localName == "radio" && !event.target.disabled)
            this.focusedItem = event.target;
          event.preventBubble();
         ]]>
      </handler>
     
      <!-- keyboard navigation -->
      <!-- Here's how keyboard navigation works in radio groups on Windows:
           The group takes 'focus'
           The user is then free to navigate around inside the group
           using the arrow keys. Accessing previous or following radio buttons
           is done solely through the arrow keys and not the tab button. Tab
           takes you to the next widget in the tab order -->
      <handler event="keypress" key=" ">
         this.selectedItem = this.focusedItem;
         this.selectedItem.doCommand();
      </handler>
      <handler event="keypress" keycode="VK_UP" phase="target">
        this.checkAdjacentElement(false);
      </handler>
      <handler event="keypress" keycode="VK_LEFT" phase="target">
        this.checkAdjacentElement(false);
      </handler>
      <handler event="keypress" keycode="VK_DOWN" phase="target">
        this.checkAdjacentElement(true);
      </handler>
      <handler event="keypress" keycode="VK_RIGHT" phase="target">
        this.checkAdjacentElement(true);
      </handler>

      <!-- set a focused attribute on the selected item when the group
           receives focus so that we can style it as if it were focused even though
           it is not (Windows platform behaviour is for the group to receive focus,
           not the item -->
      <handler event="focus" phase="target">
        if (event.target == this) {
          this.setAttribute("focused", "true");
          if (!this.focusedItem)
            this.focusedItem = this.selectedItem;
        }
      </handler>
      <handler event="blur" phase="target">
        this.removeAttribute("focused");
        this.focusedItem = null;
      </handler>
    </handlers>
  </binding>

  <binding id="radio" extends="chrome://global/content/bindings/general.xml#control-item">
    <content>
      <xul:hbox flex="1" class="internal-box" align="center">
        <xul:hbox class="checkmark-box" align="center">
          <xul:image class="checkbox-check"/>
        </xul:hbox>
        <xul:image class="checkbox-icon" inherits="src"/>
        <xul:label class="checkbox-label" inherits="xbl:text=label,accesskey,crop" flex="1"/>
      </xul:hbox>
    </content>
    <resources>
      <stylesheet src="chrome://global/skin/radio.css"/>
    </resources>
 
    <implementation>
      <constructor>
        <![CDATA[
          var parent = this.radioGroup;
          parent.mRadioChildren[parent.mRadioChildren.length++] = this;
        ]]>
      </constructor>
      <destructor>
        <![CDATA[
          var parent = this.radioGroup;
          for (var i = 0; i < parent.mRadioChildren.length; ++i) {
            if (parent.mRadioChildren[i] == this) {
              parent.mRadioChildren.slice(i, i);
              return;
            }
          }
        ]]>
      </destructor>
      <property name="selected" readonly="true">
        <getter>
          <![CDATA[
            return this.hasAttribute('selected');
          ]]>
        </getter>
      </property>
      <property name="radioGroup">
        <getter>
        <![CDATA[
          var parent = this.parentNode;
          while (parent) {
            if (parent.localName == "radiogroup")
              return parent;
            parent = parent.parentNode;
          }
          return null;
        ]]>
        </getter>
      </property>
    </implementation>
    <handlers>
      <handler event="click" button="0">
        <![CDATA[
          if (!this.disabled)
            this.radioGroup.selectedItem = this;
         ]]>
      </handler>

      <handler event="mousedown" button="0">
        <![CDATA[
          if (!this.disabled)
            this.radioGroup.focusedItem = this;
         ]]>
      </handler>
    </handlers>
  </binding>
</bindings>