<?xml version="1.0"?>

<bindings id="scrollbarBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="scrollbar">
    <content>
      <xul:scrollbarbutton sbattr="scrollbar-up-top" type="decrement" inherits="sborient=align"/>
      <xul:scrollbarbutton sbattr="scrollbar-down-top" type="increment" collapsed="true" inherits="sborient=align"/>
      <xul:slider flex="1" inherits="curpos,maxpos,pageincrement,increment,align">
        <xul:thumb sbattr="scrollbar-thumb" inherits="align,src" flex="1"/>
      </xul:slider>
      <xul:scrollbarbutton sbattr="scrollbar-up-bottom" type="decrement" collapsed="true" inherits="sborient=align"/>
      <xul:scrollbarbutton sbattr="scrollbar-down-bottom" type="increment" inherits="sborient=align"/>
    </content>
    
    <implementation implements="nsIAccessible">
      <constructor>
        this.initScrollbar();
      </constructor>

      <method name="initScrollbar">
        <body>
          <![CDATA[
            try {
              var scrollbarStyle = this.boxObject.getLookAndFeelMetric("scrollbarStyle");
              var thumbStyle = this.boxObject.getLookAndFeelMetric("thumbStyle");
              var downTop;
              var upBottom;
              if ( scrollbarStyle == "double" ) {
                downTop = this.findNodeByAttribute("sbattr", "scrollbar-down-top");
                upBottom = this.findNodeByAttribute("sbattr", "scrollbar-up-bottom");
                downTop.removeAttribute("collapsed");
                upBottom.removeAttribute("collapsed");
              }
              else if ( scrollbarStyle == "doubletop" ) {
                downTop = this.findNodeByAttribute("sbattr", "scrollbar-down-top");
                var downBottom = this.findNodeByAttribute("sbattr", "scrollbar-down-bottom");
                downTop.removeAttribute("collapsed");
                downBottom.setAttribute("collapsed","true");
              }
              else if ( scrollbarStyle == "doublebottom" ) {
                var upTop = this.findNodeByAttribute("sbattr", "scrollbar-up-top");
                upBottom = this.findNodeByAttribute("sbattr", "scrollbar-up-bottom");
                upTop.setAttribute("collapsed","true");
                upBottom.removeAttribute("collapsed");
              }
              if ( thumbStyle == "fixed" ) {
                var thumb = this.findNodeByAttribute("sbattr","scrollbar-thumb");
                if ( thumb )
                  thumb.removeAttribute("flex");
              }
            }
            catch ( x ) {
              //throw "Scrollbars in this skin are not properly supporting mac smart-scrolling prefs!";
            }
          ]]>
        </body>
      </method>
      
      <method name="findNodeByAttribute">
        <parameter name="aAttribute"/>
        <parameter name="aValue"/>
        <body>
        <![CDATA[
          var nodes = document.getAnonymousNodes(this);
          for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].getAttribute(aAttribute) == aValue)
              return nodes[i];
            else {
              var subnodes = nodes[i].getElementsByAttribute(aAttribute, aValue);
              if (!subnodes.length) continue;
              return subnodes[0];
            }
          }
          return null;
        ]]>
        </body>
      </method>
    
      <method name="getAccDescription">
        <body><![CDATA[
          return 'This is a scrollbar';
        ]]></body>
      </method>
      <method name="getAccValue">
        <body><![CDATA[
          return this.getAttribute('curpos');
        ]]></body>
      </method>
      <method name="getAccName">
        <body><![CDATA[
          return 'Scroll Bar';
        ]]></body>
      </method>
      <method name="getAccRole">
        <body><![CDATA[
          return 'scrollbar';
        ]]></body>
      </method>
    </implementation>
    <handlers>                                                                      
      <handler event="contextmenu" action="event.preventDefault();"/>           
    </handlers>  
  </binding>

  <binding id="slider">
    <content>
      <xul:thumb inherits="align,src" flex="1"/>
    </content>
  </binding>

  <binding id="thumb" extends="xul:box">
    <content>
      <xul:spring flex="1"/>
      <xul:image inherits="src"/>
      <xul:spring flex="1"/>
    </content>
  
    <implementation implements="nsIAccessible">
      <method name="getAccDescription">
        <body><![CDATA[
          return 'This is a scrollbars thumb';
        ]]></body>
      </method>
      <method name="getAccValue">
        <body><![CDATA[
          return this.getAttribute('curpos');
        ]]></body>
      </method>
      <method name="getAccName">
        <body><![CDATA[
          return 'Thumb';
        ]]></body>
      </method>
      <method name="getAccRole">
        <body><![CDATA[
          return 'indicator';
        ]]></body>
      </method>
      <method name="getAccChildCount">
        <body><![CDATA[
          return 0;
        ]]></body>
      </method>
      <method name="getAccFirstChild">
        <body><![CDATA[
          return null;
        ]]></body>
      </method>
      <method name="getAccLastChild">
        <body><![CDATA[
          return null;
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="scrollbarbutton">
    <content>
      <xul:box class="scrollbarbutton-box" flex="1">
        <xul:image class="scrollbarbutton-icon" inherits="src"/>
      </xul:box>
    </content>

    <implementation implements="nsIAccessible">
      <method name="getAccDefaultAction">
        <body><![CDATA[
          return 'Click';
        ]]></body>
      </method>
      <method name="getAccDescription">
        <body><![CDATA[
          return 'Adjusts scrollbar';
        ]]></body>
      </method>
      <method name="getAccName">
        <body><![CDATA[
          return 'scrollbar button';
        ]]></body>
      </method>
      <method name="getAccRole">
        <body><![CDATA[
          return 'push button';
        ]]></body>
      </method>
      <method name="accDoDefaultAction">
        <body><![CDATA[
          this.click();
          dump("We just clicked!!!\n");
        ]]></body>
      </method>
      <method name="getAccChildCount">
        <body><![CDATA[
          return 0;
        ]]></body>
      </method>
      <method name="getAccFirstChild">
        <body><![CDATA[
          return null;
        ]]></body>
      </method>
      <method name="getAccLastChild">
        <body><![CDATA[
          return null;
        ]]></body>
      </method>
    </implementation>
  </binding>

</bindings>

