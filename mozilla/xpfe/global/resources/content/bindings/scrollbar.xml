<?xml version="1.0"?>

<bindings id="scrollbarBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="scrollbar">
    <content>
      <xul:scrollbarbutton sbattr="scrollbar-up-top" type="decrement" inherits="sborient=orient"/>
      <xul:scrollbarbutton sbattr="scrollbar-down-top" type="increment" hidden="true" inherits="sborient=orient"/>
      <xul:slider flex="1" inherits="curpos,maxpos,pageincrement,increment,orient,sborient=orient">
        <xul:thumb sbattr="scrollbar-thumb" inherits="orient,sborient=orient" 
                   align="center" pack="center" flex="1">
          <xul:gripper/>
        </xul:thumb>
      </xul:slider>
      <xul:scrollbarbutton sbattr="scrollbar-up-bottom" type="decrement" hidden="true" inherits="sborient=orient"/>
      <xul:scrollbarbutton sbattr="scrollbar-down-bottom" type="increment" inherits="sborient=orient"/>
    </content>
    
    <implementation>
      <constructor>
        if (navigator.platform.indexOf("Mac") != -1)
          this.initScrollbar();
      </constructor>

      <method name="initScrollbar">
        <body>
          <![CDATA[
            try {
              var scrollbarStyle = this.boxObject.getLookAndFeelMetric("scrollbarStyle");
              var thumbStyle = this.boxObject.getLookAndFeelMetric("thumbStyle");
              var downTop;
              var upBottom;
              if ( scrollbarStyle == "double" ) {
                downTop = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-down-top");
                upBottom = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-up-bottom");
                downTop.removeAttribute("collapsed");
                upBottom.removeAttribute("collapsed");
              }
              else if ( scrollbarStyle == "doubletop" ) {
                downTop = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-down-top");
                var downBottom = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-down-bottom");
                downTop.removeAttribute("collapsed");
                downBottom.setAttribute("collapsed","true");
              }
              else if ( scrollbarStyle == "doublebottom" ) {
                var upTop = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-up-top");
                upBottom = document.getAnonymousElementByAttribute(this, "sbattr", "scrollbar-up-bottom");
                upTop.setAttribute("collapsed","true");
                upBottom.removeAttribute("collapsed");
              }
              if ( thumbStyle == "fixed" ) {
                var thumb = document.getAnonymousElementByAttribute(this, "sbattr","scrollbar-thumb");
                if ( thumb )
                  thumb.removeAttribute("flex");
              }
            }
            catch ( x ) {
              //throw "Scrollbars in this skin are not properly supporting mac smart-scrolling prefs!";
            }
          ]]>
        </body>
      </method>
    </implementation>
    
    <handlers>                                                                      
      <handler event="contextmenu" action="event.preventDefault();"/>           
    </handlers>  
  </binding>
</bindings>

