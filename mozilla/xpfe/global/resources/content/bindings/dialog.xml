<?xml version="1.0"?>

<bindings id="dialogBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="dialog-base">
    <resources>
      <stylesheet src="chrome://global/skin/dialog.css"/>
    </resources>
  </binding>
  
  <binding id="dialog" extends="chrome://global/content/bindings/dialog.xml#dialog-base">
    <content>
      <xul:vbox class="box-inherit dialog-content-box" flex="1">
        <children/>
      </xul:vbox>
          
      <xul:hbox class="dialog-button-box" pack="end"
                inherits="pack=buttonpack,align=buttonalign,dir=buttondir,orient=buttonorient">
        <xul:button dlgtype="accept" class="dialog-button"/>
        <xul:button dlgtype="extra1" class="dialog-button" hidden="true" label=""/>
        <xul:button dlgtype="extra2" class="dialog-button" hidden="true" label=""/>
        <xul:button dlgtype="cancel" class="dialog-button"/>
        <xul:button dlgtype="help" class="dialog-button" hidden="true"/>
        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
      </xul:hbox>
    </content>

    <implementation>
      <field name="_mStrBundle">null</field>
      <field name="_closeHandler">(function(event) {
        if (!document.documentElement.cancelDialog())
          event.preventDefault();
      })</field>

      <property name="buttons"
                onget="return this.getAttribute('buttons');"
                onset="this._configureButtons(val); return val;"/>

      <method name="acceptDialog">
        <body>
        <![CDATA[
          return this._doButtonCommand("accept");
        ]]>
        </body>
      </method>
      
      <method name="cancelDialog">
        <body>
        <![CDATA[
          return this._doButtonCommand("cancel");
        ]]>
        </body>
      </method>
      
      <method name="getButton">
        <parameter name="aDlgType"/>
        <body>
        <![CDATA[
          var btns = this.getElementsByAttribute("dlgtype", aDlgType);
          return btns.length > 0 ? btns[0] : document.getAnonymousElementByAttribute(this, "dlgtype", aDlgType);
        ]]>
        </body>
      </method>

      <constructor>
      <![CDATA[
        this._useAnonButton = {};
        
        // listen for when window is closed via native close buttons
        window.addEventListener("close", this._closeHandler, false);

        window.addEventListener("load", this.initialize, false);
      ]]>
      </constructor>

      <method name="initialize">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var dialog = document.documentElement;

          dialog._initDialogButton("accept");
          dialog._initDialogButton("cancel");
          dialog._initDialogButton("help");
          dialog._initDialogButton("disclosure");
          dialog._initDialogButton("extra1");
          dialog._initDialogButton("extra2");
          
          // hide/show the appropriate buttons
          dialog._configureButtons(dialog.getAttribute("buttons"));
  
          // give focus to the first focusable element in the dialog
          if (!document.commandDispatcher.focusedElement)
            document.commandDispatcher.advanceFocusIntoSubtree(dialog);
        ]]>
        </body>
      </method>                

      <property name="mStrBundle">
        <getter>
        <![CDATA[
          if (!this._mStrBundle) {
            // need to create string bundle manually instead of using <xul:stringbundle/>
            // see bug 63370 for details
            var localeService = Components.classes["@mozilla.org/intl/nslocaleservice;1"]
                                  .getService(Components.interfaces.nsILocaleService);
            var stringBundleService = Components.classes["@mozilla.org/intl/stringbundle;1"]
                                  .getService(Components.interfaces.nsIStringBundleService);
            var bundleURL = "chrome://global/locale/dialog.properties";
            this._mStrBundle = stringBundleService.createBundle(bundleURL, localeService.GetApplicationLocale());
          }
          return this._mStrBundle;
        ]]></getter>
      </property>
      
      <method name="_initDialogButton">
        <parameter name="aDlgType"/>
        <body><![CDATA[
          // determine if button is going to be anonymous or explicit
          var btn;
          var btns = this.getElementsByAttribute("dlgtype", aDlgType);
          if (btns.length > 0) {
            btn = btns[0];
            this._useAnonButton[aDlgType] = false;
          } else {
            btn = document.getAnonymousElementByAttribute(this, "dlgtype", aDlgType);
            this._useAnonButton[aDlgType] = true;
          }
          
          if (btn) {
            btn.addEventListener("command", this._handleButtonCommand, true);
            // don't override custom labels with pre-defined labels on explicit buttons
            if (!btn.hasAttribute("label"))
              btn.setAttribute("label", this.mStrBundle.GetStringFromName("button-"+aDlgType));
          }
          return btn;
        ]]></body>
      </method>

      <method name="_configureButtons">
        <parameter name="aButtons"/>
        <body>
        <![CDATA[
          var shown;
          if (!aButtons) {
            shown = { accept: true, cancel: true, help: false, 
                      disclosure: false, extra1: false, extra2: false };
          } else {
            // expect a comma or space delimitd list of dlgtype values to be shown
            var list = aButtons.split(",");

            // mark shown dlgtypes as true
            shown = { accept: false, cancel: false, help: false,
                      disclosure: false, extra1: false, extra2: false };
            for (var i = 0; i < list.length; ++i)
              shown[list[i].replace(/ /g, "")] = true;
          }
          
          // hide anonymous buttons that aren't mentioned in the buttons attribute, and are not
          // supplied via explicit content
          for (var dlgtype in shown) {
            var anonBtn = document.getAnonymousElementByAttribute(this, "dlgtype", dlgtype);
            if (anonBtn) {
              if (this._useAnonButton[dlgtype] && shown[dlgtype]) {
                anonBtn.removeAttribute("hidden");
                if (dlgtype == "accept")
                  anonBtn.setAttribute("default", "true");
              } else {
                anonBtn.setAttribute("hidden", "true");
                if (dlgtype == "accept")
                  anonBtn.removeAttribute("default");
              }
            }
          }
        ]]>
        </body>
      </method>
      
      <method name="_handleButtonCommand">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          return document.documentElement._doButtonCommand(
                                        aEvent.target.getAttribute("dlgtype"));
        ]]>
        </body>
      </method>
      
      <method name="_doButtonCommand">
        <parameter name="aDlgType"/>
        <body>
        <![CDATA[
          // calling window.close() while an oncommand event
          // call is on the stack fails to close the window, 
          // so we need to do this ugly setTimeout hack
          window.setTimeout(
            function(aDlgType) {
              document.documentElement._reallyDoButtonCommand(aDlgType);
            },
            0, aDlgType);
        ]]>
        </body>
      </method>
      
      <method name="_reallyDoButtonCommand">
        <parameter name="aDlgType"/>
        <body>
        <![CDATA[
          var button = this.getButton(aDlgType);
          if (!button.disabled) {
            var noCancel = this._fireButtonEvent(aDlgType);
            if (noCancel) {
              if (aDlgType == "accept" || aDlgType == "cancel")
                window.close();
            }
            return noCancel;
          }
          return true;
        ]]>
        </body>
      </method>
      
      <method name="_fireButtonEvent">
        <parameter name="aDlgType"/>
        <body>
        <![CDATA[
          var event = document.createEvent("Events");
          event.initEvent("dialog"+aDlgType, false, true);
          
          // handle dom event handlers
          var noCancel = this.dispatchEvent(event);
          
          // handle any xml attribute event handlers
          var handler = this.getAttribute("ondialog"+aDlgType);
          if (handler != "") {
            var fn = new Function("event", handler);
            var returned = fn(event);
            if (returned == false)
              noCancel = false;
          }
          
          return noCancel;
        ]]>
        </body>
      </method>

      <method name="_hitEnter">
        <body>
        <![CDATA[
          // if a button is focused, do nothing, so that activating the button 
          // doesn't cause the dialog to exit
          var focused = document.commandDispatcher.focusedElement;
          if (focused && focused.localName == "button")
            return;
            
          // only accept dialog if accept button is the default
          var btn = this.getButton("accept");
          if (btn && btn.hasAttribute("default"))
            this.acceptDialog();
        ]]>
        </body>
      </method>

    </implementation>
    
    <handlers>
      <handler event="keypress" keycode="VK_ENTER" action="this._hitEnter();"/>
      <handler event="keypress" keycode="VK_RETURN" action="this._hitEnter();"/>
      <handler event="keypress" keycode="VK_ESCAPE" action="this.cancelDialog();"/>
    </handlers>

  </binding>

  <binding id="dialogheader" extends="chrome://global/content/bindings/dialog.xml#dialog-base">
    <content>
      <xul:label class="dialogheader-title" inherits="value=title"/>
      <xul:spacer flex="1"/>
      <xul:label class="dialogheader-description" inherits="value=description"/>
    </content>
  </binding>

</bindings>