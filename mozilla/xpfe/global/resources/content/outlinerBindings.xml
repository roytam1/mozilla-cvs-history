<?xml version="1.0"?>

<bindings id="outlinerBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  
  <binding id="outliner">
    <content orient="vertical">
      <xul:box class="outliner-columns">
        <children includes="outlinercol|splitter"/>
		<xul:outlinercol class="outliner-columnpicker"/>
      </xul:box>
      <xul:outlinerrows class="outliner-rows" flex="1">
        <children/>
      </xul:outlinerrows>
    </content>
    <implementation>
      <property name="outlinerBoxObject"
                onget="return this.boxObject.QueryInterface(Components.interfaces.nsIOutlinerBoxObject);"
                readonly="true"/>
      <property name="currentIndex"
                onget="return this.outlinerBoxObject.selection.currentIndex;"
                readonly="true"/>
      <property name="isUpSelection">
        0
      </property>
      <property name="isDownSelection">
        0
      </property>
    </implementation>
    <handlers>
      <handler event="keypress" keycode="vk_enter">
        <![CDATA[
         if (this.currentIndex == -1)
           return;
         if (this.outlinerBoxObject.view.isContainer(this.currentIndex))
           this.outlinerBoxObject.view.toggleOpenState(this.currentIndex);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_return">
        <![CDATA[
         if (this.currentIndex == -1)
           return;
         if (this.outlinerBoxObject.view.isContainer(this.currentIndex))
           this.outlinerBoxObject.view.toggleOpenState(this.currentIndex);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_left">
        <![CDATA[
         if (this.currentIndex == -1)
           return;
         if (!this.outlinerBoxObject.view.isContainer(this.currentIndex))
           return;
         if (this.outlinerBoxObject.view.isContainerOpen(this.currentIndex))
           this.outlinerBoxObject.view.toggleOpenState(this.currentIndex);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_right">
        <![CDATA[
         if (this.currentIndex == -1)
           return;
         if (!this.outlinerBoxObject.view.isContainer(this.currentIndex))
           return;
         if (!this.outlinerBoxObject.view.isContainerOpen(this.currentIndex))
           this.outlinerBoxObject.view.toggleOpenState(this.currentIndex);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_up">
        <![CDATA[
         var c = this.currentIndex;
         this.isUpSelection=0;
         this.isDownSelection=0;
         if (c == -1 || c == 0)
           return;
         this.outlinerBoxObject.selection.timedSelect(c-1, 500);
         this.outlinerBoxObject.ensureRowIsVisible(c-1);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_down">
        <![CDATA[
         var c = this.currentIndex;
         this.isUpSelection=0;
         this.isDownSelection=0;
         try { if (c+1 == this.outlinerBoxObject.view.rowCount)
           return;
         } catch (e) {}
         this.outlinerBoxObject.selection.timedSelect(c+1, 500);
         this.outlinerBoxObject.ensureRowIsVisible(c+1);
         
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_up" modifiers="control">
        <![CDATA[
         var c = this.currentIndex;
         this.isUpSelection=0;
         this.isDownSelection=0;
         if (c == -1 || c == 0)
           return;
         this.outlinerBoxObject.selection.currentIndex = c-1;
         this.outlinerBoxObject.ensureRowIsVisible(c-1);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_down" modifiers="control">
        <![CDATA[
         var c = this.currentIndex;
         this.isUpSelection=0;
         this.isDownSelection=0;
         try { if (c+1 == this.outlinerBoxObject.view.rowCount)
           return;
         } catch (e) {}
         this.outlinerBoxObject.selection.currentIndex = c+1;
         this.outlinerBoxObject.ensureRowIsVisible(c+1);
         
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_home">
        <![CDATA[
         this.isUpSelection=0;
         this.isDownSelection=0;
         if (this.currentIndex == 0)
           return;
         this.outlinerBoxObject.selection.timedSelect(0, 500);
         this.outlinerBoxObject.ensureRowIsVisible(0);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_end">
        <![CDATA[
         this.isUpSelection=0;
         this.isDownSelection=0;
         var l = this.outlinerBoxObject.view.rowCount - 1;
         if (this.currentIndex == l)
           return;
         this.outlinerBoxObject.selection.timedSelect(l, 500);
         this.outlinerBoxObject.ensureRowIsVisible(l);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_home" modifiers="control">
        <![CDATA[
         this.isUpSelection=0;
         this.isDownSelection=0;
         if (this.currentIndex == 0)
           return;
         this.outlinerBoxObject.selection.currentIndex = 0;
         this.outlinerBoxObject.ensureRowIsVisible(0);
        ]]>
      </handler>
      <handler event="keypress" keycode="vk_end" modifiers="control">
        <![CDATA[
         this.isUpSelection=0;
         this.isDownSelection=0;
         var l = this.outlinerBoxObject.view.rowCount - 1;
         if (this.currentIndex == l)
           return;
         this.outlinerBoxObject.selection.currentIndex = l;
         this.outlinerBoxObject.ensureRowIsVisible(l);
        ]]>
      </handler>
      <handler event="keypress">
        <![CDATA[
         if (event.keyCode == ' ') {
           var c = this.currentIndex;
           if (!this.outlinerBoxObject.selection.isSelected(c))
             this.outlinerBoxObject.selection.toggleSelect(c);
         }
         ]]>
      </handler>
    </handlers>    
  </binding>

  <binding id="outlinerrows" extends="xul:box">
    <content>
      <children/>
      <xul:scrollbar align="vertical" class="outliner-scrollbar"/>
    </content>
  </binding>

  <binding id="outlinerbody">
    <handlers>
      <!-- If there is no modifier key, we select on mousedown, not
           click, so that drags work correctly. -->
      <handler event="mousedown">
      <![CDATA[
         if (!event.ctrlKey && !event.shiftKey && !event.metaKey) {
           var row = {};
           var col = {};
           var b = this.parentNode.outlinerBoxObject;
           b.getCellAt(event.clientX, event.clientY, row, col);
           
           var column = document.getElementById(col.value);
           var cycler = column.getAttribute('cycler') == 'true';

           if (cycler)
             b.view.cycleCell(row.value, col.value);
           else
             if (!b.selection.isSelected(row.value))
               b.selection.select(row.value);
         }
      ]]>
      </handler>

      <!-- On a click (up+down on the same item), deselect everything
           except this item. -->
      <handler event="click">
      <![CDATA[
         if (event.button != 1) return;
         var row = {};
         var col = {};
         var b = this.parentNode.outlinerBoxObject;
         b.getCellAt(event.clientX, event.clientY, row, col);
         var augment = event.ctrlKey || event.metaKey;
         if (event.shiftKey) {
           b.selection.rangedSelect(-1, row.value, augment);
           b.selection.currentIndex = row.value;
         }
         else if (augment) {
           b.selection.toggleSelect(row.value);
           b.selection.currentIndex = row.value;
         }
         else {
          /* We want to deselect all the selected items except what was
            clicked, UNLESS it was a right-click.  We have to do this
            in click rather than mousedown so that you can drag a
            selected group of items */

           var column = document.getElementById(col.value);
           var cycler = column.getAttribute('cycler') == 'true';

           if (!cycler && event.button == 1)
             b.selection.select(row.value);  
         }
      ]]>
      </handler>

      <!-- double-click -->
      <handler event="click" clickcount="2">
      <![CDATA[
           var row = {};
           var col = {};
           // XXX Again, we need to check the cycler.
           var b = this.parentNode.outlinerBoxObject;
           b.getCellAt(event.clientX, event.clientY, row, col);
           if (b.view.isContainer(row.value))
             b.toggleOpenState(row.value);
      ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="outlinercol">
    <content>
      <xul:box class="outlinercol-box" flex="1" autostretch="never">
        <xul:image class="outliner-image" inherits="src"/>
        <xul:text class="outlinercol-text" inherits="crop,value" flex="1" crop="right"/>
        <xul:image class="outlinercol-sortdirection"/>
      </xul:box>
    </content>
    <handlers>
      <handler event="click" action="if (event.originalTarget == this) { this.parentNode.outlinerBoxObject.view.cycleHeader(this.id, this); }"/>
    </handlers>
  </binding>

  <binding id="outlinercol-image">
    <content>
      <xul:box class="outlinercol-image-box" flex="1" autostretch="never">
        <xul:image class="outlinercol-image" inherits="src"/>
      </xul:box>
    </content>
    <handlers>
      <handler event="click" action="this.parentNode.outlinerBoxObject.view.cycleHeader(this.id, this)"/>
    </handlers>
  </binding>

  <binding id="columnpicker">
    <content>
      <xul:menu class="outliner-colpicker-menu" autostretch="never" allowevents="true">
        <xul:image class="outliner-colpicker-icon"/>
        <xul:menupopup popupanchor="bottomright" popupalign="topright"
                  oncreate="this.parentNode.parentNode.buildPopup(this);"/>
      </xul:menu>
    </content>
    <implementation>
       <method name="buildPopup">
         <parameter name="aPopup"/>
         <body>
           <![CDATA[
             var popupChild = aPopup.firstChild;
             var firstTime = !popupChild ? true : false;
             var currCol = this.parentNode.parentNode.firstChild;
             var count = 0;

             while (currCol) {
               while (currCol.localName != "outlinercol")
                 currCol = currCol.nextSibling;
 
               if (currCol != this) {
                 // Construct an entry for each cell in the row.
                 if (firstTime) {
                     var columnName = currCol.getAttribute("value");
                     popupChild = document.createElement("menuitem");
                     popupChild.setAttribute("type", "checkbox");
                     popupChild.setAttribute("value", columnName);
                     if (columnName == "") {
                       var display = currCol.getAttribute("display");
                       popupChild.setAttribute("value", display);
                     }
                     popupChild.setAttribute("colid", currCol.id);
                     popupChild.setAttribute("oncommand",
                                             "this.parentNode.parentNode.parentNode.toggleColumnState(this);");
                     if (currCol.getAttribute("hidden") != "true")
                       popupChild.setAttribute("checked", "true");
                     aPopup.appendChild(popupChild);
                 }
              } 
              currCol = currCol.nextSibling;
            }
           ]]>
        </body>
       </method>
       <method name="toggleColumnState">
         <parameter name="aPopup"/>
         <body>
           <![CDATA[
             var colid = aPopup.getAttribute("colid");
             var colNode = document.getElementById(colid);
             if (colNode) {
               var checkedState = aPopup.getAttribute("checked");
               if (checkedState == "true")
                 colNode.removeAttribute("hidden");
               else
                 colNode.setAttribute("hidden", "true");
             }
           ]]>
         </body>
       </method>         
     </implementation>
   </binding>
</bindings>

