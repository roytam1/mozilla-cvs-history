/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is mozilla.org code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are 
 * Copyright (C) 2001 Netscape Communications Corporation.  All
 * Rights Reserved.
 * 
 * Contributor(s): Dan Mosedale <dmose@netscape.com> (Original Author)
 *
 */

#include "nsIAutoCompleteSession.idl"

interface nsILDAPURL;   // forward decl

/**
 * Extends nsIAutoCompleteSession to have various LDAP-specific parameters.
 * and output format.
 */
[scriptable, uuid(82b6a78e-1dd2-11b2-a3d0-876e20e7b350)]
interface nsILDAPAutoCompleteSession : nsIAutoCompleteSession {

    /**
     * A template used to construct the RFC 1960 LDAP search filter to use 
     * while autocompleting.  
     *
     * XXX syntax to-be-determined in an upcoming checkin
     * 
     * @exception NS_ERROR_NULL_POINTER     NULL pointer passed to getter
     * @exception NS_ERROR_OUT_OF_MEMORY    Getter couldn't allocate string
     */
    attribute wstring filterTemplate;

    /**
     * A template string for formatting the autocompletion results.   
     *
     * Required attributes are delimited by curly braces, and optional 
     * attributes are determined by brackets.  Backslash escapes any 
     * character, including itself.   
     *
     * If outputFormat is not set, or is set to the empty string,
     * the component implementing this interface should set the outputFormat 
     * to a reasonable default.
     *
     * As an example, the "@mozilla.org/autocompleteSession;1?type=ldap"
     * implementation currently happens to use a default of "[cn] <{mail}>", 
     * without  the quotes.  This will generate autocomplete items of the
     * form "John Doe <john.doe@foo.com>", or, if the cn is not found,
     * " <john.doe@foo.com>".  This latter form is suboptimal, in that
     * the space and angle brackets are a bit ugly, but should work as an
     * email address.  See bug 81961.
     * 
     * @exception NS_ERROR_NULL_POINTER     getter: NULL pointer passed in
     * @exception NS_ERROR_OUT_OF_MEMORY    getter/setter: allocation error
     * @exception NS_ERROR_ILLEGAL_VALUE    setter: invalid template specified
     * @exception NS_ERROR_UNEXPECTED       setter: probably a bug
     */
    attribute wstring outputFormat;

    /**
     * At most this many nsIAutoCompleteItems will be returned.  This
     * is useful for keeping bandwidth usage over slow-speed
     * connections as well as ensuring that the number of choices
     * offered in the UI is manageble.
     *
     * 1-65535 are interpreted literally
     * 0 means "unlimited"
     * -1 uses the default limit for the LDAP connection in use
     * 
     * @exception NS_ERROR_NULL_POINTER     NULL pointer passed to getter
     * @exception NS_ERROR_ILLEGAL_VALUE    Out-of-range value passed to setter
     */
    attribute long maxHits;

    /**
     * Strings shorter than this will return |nsIAutoCompleteStatus::ignored|
     * rather than triggering a search.  This allows browsers to be
     * configured to not search on substrings so short that they
     * aren't indexed by the LDAP server (such searches can use significantly 
     * more server resources and return a very large number of entries).
     * The default is 0, meaning that no such limit is in effect.
     * 
     * @exception NS_ERROR_NULL_POINTER  NULL pointer passed to getter
     */
    attribute unsigned long minStringLength;

    /**
     * LDAP server to complete against, in ldap: URL format.  
     * May change to an nsILDAPServer once that infrastructure lands.
     *
     * @exception NS_ERROR_NULL_POINTER     NULL pointer passed to getter    
     */
    attribute nsILDAPURL serverURL;
};
