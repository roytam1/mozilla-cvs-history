/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *   Javier Delgadillo <javi@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License Version 2 or later (the
 * "GPL"), in which case the provisions of the GPL are applicable
 * instead of those above.  If you wish to allow use of your
 * version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and
 * replace them with the notice and other provisions required by
 * the GPL.  If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsISupports.idl"

interface nsIArray;
interface nsIX509CertValidity;
interface nsIASN1Object;

[scriptable, uuid(f0980f60-ee3d-11d4-998b-00b0d02354a0)]
interface nsIX509Cert : nsISupports {

  /*
   * attributes for certs
   */
  readonly attribute AString nickname;
  readonly attribute AString emailAddress;
  readonly attribute AString commonName;
  readonly attribute AString organization;
  readonly attribute AString organizationalUnit;
  readonly attribute AString subjectName;
  readonly attribute AString issuerName;
  readonly attribute AString serialNumber;
  readonly attribute AString sha1Fingerprint;
  readonly attribute AString md5Fingerprint;
  readonly attribute AString issuedDate;
  readonly attribute AString issuedDateSortable;
  readonly attribute AString expiresDate;
  readonly attribute AString expiresDateSortable;
  readonly attribute AString tokenName;
  readonly attribute AString issuerCommonName;
  readonly attribute AString issuerOrganization;
  readonly attribute AString issuerOrganizationUnit;
  readonly attribute nsIX509Cert issuer;

  readonly attribute nsIX509CertValidity validity;
  readonly attribute string dbKey;
  readonly attribute string windowTitle;
  readonly attribute boolean usesOCSP;

  /*
   * enums for certs
   */
  const unsigned long UNKNOWN_CERT =      0;
  const unsigned long CA_CERT      = 1 << 0;
  const unsigned long USER_CERT    = 1 << 1;
  const unsigned long EMAIL_CERT   = 1 << 2;
  const unsigned long SERVER_CERT  = 1 << 3;

  // errors in verifying certs
  const unsigned long VERIFIED_OK          =      0;
  const unsigned long NOT_VERIFIED_UNKNOWN = 1 << 0;
  const unsigned long CERT_REVOKED         = 1 << 1;
  const unsigned long CERT_EXPIRED         = 1 << 2;
  const unsigned long CERT_NOT_TRUSTED     = 1 << 3;
  const unsigned long ISSUER_NOT_TRUSTED   = 1 << 4;
  const unsigned long ISSUER_UNKNOWN       = 1 << 5;
  const unsigned long INVALID_CA           = 1 << 6;
  const unsigned long USAGE_NOT_ALLOWED    = 1 << 7;
  
  /*
   * accessors for certs
   */
  nsIArray getChain();

  void getUsages(out unsigned long verified,
                 out unsigned long count, 
                 [array, size_is(count)] out wstring usages);

  void getPurposes(out unsigned long verified, out AString purposes);


  const unsigned long CERT_USAGE_SSLClient = 0;
  const unsigned long CERT_USAGE_SSLServer = 1;
  const unsigned long CERT_USAGE_SSLServerWithStepUp = 2;
  const unsigned long CERT_USAGE_SSLCA = 3;
  const unsigned long CERT_USAGE_EmailSigner = 4;
  const unsigned long CERT_USAGE_EmailRecipient = 5;
  const unsigned long CERT_USAGE_ObjectSigner = 6;
  const unsigned long CERT_USAGE_UserCertImport = 7;
  const unsigned long CERT_USAGE_VerifyCA = 8;
  const unsigned long CERT_USAGE_ProtectedObjectSigner = 9;
  const unsigned long CERT_USAGE_StatusResponder = 10;
  const unsigned long CERT_USAGE_AnyCA = 11;

  /*
   * output is verification result, bitmask?
  */
  unsigned long verifyForUsage(in unsigned long usage);

  /*
   * This is the attribute which describes the ASN1 layout
   * of the certificate.  This can be used when doing a
   * "pretty print" of the certificate's ASN1 structure.
   */
  readonly attribute nsIASN1Object ASN1Structure;

  void getRawDER(out unsigned long length,
	               [retval, array, size_is(length)] out octet data);

  boolean isSameCert(in nsIX509Cert other);
};
