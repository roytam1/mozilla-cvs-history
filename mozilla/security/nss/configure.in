dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; -*-
dnl The contents of this file are subject to the Mozilla Public
dnl License Version 1.1 (the "License"); you may not use this file
dnl except in compliance with the License. You may obtain a copy of
dnl the License at http://www.mozilla.org/MPL/
dnl
dnl Software distributed under the License is distributed on an "AS
dnl IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
dnl implied. See the License for the specific language governing
dnl rights and limitations under the License.
dnl
dnl The Original Code is the configure.in script for NSS.
dnl
dnl The Initial Developer of the Original Code is Netscape
dnl Communications. Portions created by Netscape Communications are
dnl Copyright (C) 2000 Netscape Communications. All Rights Reserved.
dnl
dnl Contributor(s):
dnl  Brian Ryner <bryner@netscape.com>
dnl  Chris Seawood <cls@seawood.org>
dnl
dnl Process this file with autoconf to produce a configure script.
dnl
AC_PREREQ(2.12)
AC_INIT(../coreconf/rules.mk)

AC_CONFIG_AUX_DIR(${srcdir}/build/autoconf)
AC_CANONICAL_SYSTEM

CORECONF_SOURCE='$(topsrcdir)/../coreconf'

dnl Set this define to make fixes w/o breaking anything else.
AC_DEFINE(USE_AUTOCONF)

dnl ========================================================
dnl = Defaults
dnl ========================================================
USE_PTHREADS=
USE_64=
ENABLE_CMD=1
MOZILLA_CLIENT=
_OPTIMIZE_FLAGS=-O
_DEBUG_FLAGS=-g
MOZ_DEBUG=1
MOZ_OPTIMIZE=

dnl ========================================================
dnl =
dnl = Dont change the following lines.  Doing so breaks:
dnl =
dnl = CFLAGS="-foo" ./configure
dnl =
dnl ========================================================
CFLAGS="${CFLAGS=}"
LDFLAGS="${LDFLAGS=}"
HOST_CFLAGS="${HOST_CFLAGS=}"
HOST_LDFLAGS="${HOST_LDFLAGS=}"

dnl ========================================================
dnl = Target test that may affect rest of script
dnl ========================================================
case "$target" in
*-cygwin*)
    # Check to see if we are really running in a msvc environemnt
    _WIN32_MSVC=
    if test "$CC" = "cl" || test "$CXX" = "cl"; then
        _WIN32_MSVC=1
    elif test -z "$CC"; then
        echo 'main() { return 0; }' > dummy.c
        cl -o dummy dummy.c
        if test $? = 0; then
            _WIN32_MSVC=1
        fi
        rm -f dummy dummy.o dummy.obj dummy.exe dummy.c
    fi
    ;;
*-msvc*)
    _WIN32_MSVC=1
    ;;
esac

if test -n "$_WIN32_MSVC"; then
    SKIP_PATH_CHECKS=1
    SKIP_COMPILER_CHECKS=1
    SKIP_LIBRARY_CHECKS=1
fi

dnl ========================================================
dnl =
dnl = Check options that may affect the compiler
dnl =
dnl ========================================================
dist_prefix='${MOD_DEPTH}/dist'
dist_bindir='${dist_prefix}/bin'
dist_includedir='${dist_prefix}/include'
dist_libdir='${dist_prefix}/lib'

AC_ARG_WITH(dist-prefix,
    [  --with-dist-prefix=DIST_PREFIX
                          place build files in DIST_PREFIX [dist]],
    dist_prefix=$withval)

AC_ARG_WITH(dist-bindir,
    [  --with-dist-bindir=DIR  build execuatables in DIR [DIST_PREFIX/bin]],
    dist_bindir=$withval)

AC_ARG_WITH(dist-includedir,
    [  --with-dist-includedir=DIR
                          build include files in DIR [DIST_PREFIX/include]],
    dist_includedir=$withval)

AC_ARG_WITH(dist-libdir,
    [  --with-dist-libdir=DIR  build library files in DIR [DIST_PREFIX/lib]],
    dist_libdir=$withval)

AC_SUBST(dist_prefix)
AC_SUBST(dist_bindir)
AC_SUBST(dist_includedir)
AC_SUBST(dist_libdir)

AC_ARG_WITH(dbm-prefix,
    [  --with-dbm-prefix=DIR   Prefix where dbm is installed],
    dbm_prefix=$withval)

AC_ARG_WITH(dbm-includedir,
    [  --with-dbm-includedir   Location of dbm headers],
    dbm_includedir=$withval)

AC_ARG_WITH(dbm-libdir,
    [  --with-dbm-libdir       Location of dbm libs],
    dbm_libdir=$withval)

if test "$dbm_prefix"; then
    if test -z "$dbm_libdir"; then
        dbm_libdir="$dbm_prefix/lib"
    fi
    if test -z "$dbm_includedir"; then
        dbm_includedir="$dbm_prefix/include"
    fi
fi

if test "$dbm_libdir"; then
    DBM_LIBS="$dbm_libdir/libdbm.a"
else
    DBM_LIBS='$(DIST)/lib/libdbm.$(LIB_SUFFIX)'
fi

if test "$dbm_includedir"; then
    DBM_CFLAGS="-I$dbm_includedir"
fi

AC_SUBST(DBM_LIBS)
AC_SUBST(DBM_CFLAGS)

AC_ARG_WITH(mozilla,
    [  --with-mozilla          Compile for Mozilla tree],
    [  if test "$withval" = "yes"; then
           MOZILLA_CLIENT=1
           else
               MOZILLA_CLIENT=
           fi])

AC_ARG_ENABLE(optimize,
    [  --enable-optimize       Enable code optimizations],
    MOZ_OPTIMIZE=1)

AC_ARG_ENABLE(debug,
    [  --disable-debug         Do not compile in debugging symbols],
    [	if test "$enableval" = "no"; then
    	    MOZ_DEBUG=
	    fi])

AC_ARG_ENABLE(n32,
    [  --enable-n32            Enable n32 ABI support (IRIX only)],
    [ if test "$enableval" = "yes"; then
	USE_N32=1
      else if test "$enableval" = "no"; then
	USE_N32=
      fi
    fi ])

AC_ARG_ENABLE(64bit,
    [  --enable-64bit          Enable 64-bit support (on certain platforms)],
    [ if test "$enableval" = "yes"; then
	    USE_64=1
      fi ])

dnl AC_ARG_ENABLE(shared,
dnl    [  --disable-shared        Do not compile into shared libraries])

dnl AC_ARG_ENABLE(target,
dnl    [  --enable-target=\$t      Turn on features for target \$t when build has multiple targets],
dnl    MOZ_TARGET=`echo $enableval | tr a-z A-Z`,
dnl    MOZ_TARGET=)

AC_ARG_ENABLE(cmd,
    [  --disable-cmd           Don't build command-line tools],
    [  if test "$enableval" = "no"; then
           ENABLE_CMD=
           fi])

if test -z "$SKIP_PATH_CHECKS"; then
    AC_PATH_PROG(WHOAMI, $WHOAMI whoami, echo not_whoami)
elif test -z "$WHOAMI"; then
    WHOAMI=whoami
fi

if test -n "$MOZ_DEBUG"; then
    AC_DEFINE(DEBUG)
    AC_DEFINE_UNQUOTED(DEBUG_`$WHOAMI`)
    DEFINES="$DEFINES -UNDEBUG"
else
    AC_DEFINE(NDEBUG)
    DEFINES="$DEFINES -UDEBUG"    
fi

if test -z "$SKIP_COMPILER_CHECKS"; then
dnl ========================================================
dnl Checks for compilers.
dnl ========================================================

if test "$target" != "$host"; then
    echo "cross compiling from $host to $target"
    cross_compiling=yes
        
    _SAVE_CC="$CC"
    _SAVE_CFLAGS="$CFLAGS"   
    _SAVE_LDFLAGS="$LDFLAGS"
    
    AC_MSG_CHECKING([for $host compiler])
    if test -z "$HOST_CC"; then
            AC_CHECK_PROGS(HOST_CC, gcc cc /usr/ucb/cc, "")
            if test -z "$HOST_CC"; then
                    AC_MSG_ERROR([no acceptable cc found in \$PATH])
            fi
    fi
    AC_MSG_RESULT([$HOST_CC])
    if test -z "$HOST_CFLAGS"; then
            HOST_CFLAGS="$CFLAGS"
    fi
    if test -z "$HOST_LDFLAGS"; then
            HOST_LDFLAGS="$LDFLAGS"
    fi
                
    CC="$HOST_CC"
    CFLAGS="$HOST_CFLAGS"
    LDFLAGS="$HOST_LDFLAGS"
    
    AC_MSG_CHECKING([whether the $host compiler ($HOST_CC $HOST_CFLAGS $HOST_LDFLAGS) works])
    AC_TRY_COMPILE([], [return(0);],
        [ac_cv_prog_host_cc_works=1 AC_MSG_RESULT([yes])],
        AC_MSG_ERROR([installation or configuration problem: $host compiler $HOST_CC cannot create executables.]) )

    CC=$_SAVE_CC
    CFLAGS=$_SAVE_CFLAGS
    LDFLAGS=$_SAVE_LDFLAGS

    if test -z "$CC"; then
            AC_CHECK_PROGS(CC, "${target_alias}-gcc" "${target}-gcc", :)
    fi
    unset ac_cv_prog_CC
    AC_PROG_CC   
    if test -z "$CXX"; then
            AC_CHECK_PROGS(CXX, "${target_alias}-g++" "${target}-g++", :)
    fi
    unset ac_cv_prog_CXX
    AC_PROG_CXX
    if test -z "$RANLIB"; then
            AC_CHECK_PROGS(RANLIB, "${target_alias}-ranlib" "${target}-ranlib", :)
    fi
    if test -z "$AR"; then
            AC_CHECK_PROGS(AR, "${target_alias}-ar" "${target}-ar", :)
    fi
    if test -z "$AS"; then
            AC_CHECK_PROGS(AS, "${target_alias}-as" "${target}-as", :)
    fi
    if test -z "$LD"; then
            AC_CHECK_PROGS(LD, "${target_alias}-ld" "${target}-ld", :)
    fi
dnl    if test -z "$STRIP"; then
dnl            AC_CHECK_PROGS(STRIP, "${target_alias}-strip" "${target}-strip", :)
dnl    fi
dnl    if test -z "$DLLTOOL"; then
dnl            AC_CHECK_PROGS(DLLTOOL, "${target_alias}-dlltool" "${target}-dlltool", :)
dnl    fi
dnl    if test -z "$WINDRES"; then
dnl            AC_CHECK_PROGS(WINDRES, "${target_alias}-windres" "${target}-windres", :)
dnl    fi

else
    AC_PROG_CC
    AC_PROG_CXX
    AC_PROG_RANLIB
    AC_PATH_PROGS(AS, as, $CC)
    AC_PATH_PROGS(AR, ar, :)
    AC_PATH_PROGS(LD, ld, :)
dnl    AC_PATH_PROGS(STRIP, strip, :)
dnl    AC_PATH_PROGS(DLLTOOL, dlltool, :)
dnl    AC_PATH_PROGS(WINDRES, windres, :)
    if test -z "$HOST_CC"; then
            HOST_CC="$CC"
    fi
    if test -z "$HOST_CFLAGS"; then
            HOST_CFLAGS="$CFLAGS"
    fi
fi          

GNU_CC=
GNU_CXX=

if test "$GCC" = "yes"; then
    GNU_CC=1   
fi
if test "`echo | $AS -V 2>&1 | grep -c GNU`" != "0"; then
    GNU_AS=1
fi
rm -f a.out

if test "$cross_compiling"  = "yes"; then
    CROSS_COMPILE=1
else
    CROSS_COMPILE=
fi

fi # SKIP_COMPILER_CHECKS

if test -z "$SKIP_PATH_CHECKS"; then
dnl ========================================================
dnl Checks for programs.
dnl ========================================================

AC_PROG_AWK
dnl Be sure the make we use is GNU make.
AC_PATH_PROGS(MAKE, gmake make, :)
_make_try=`$MAKE --version 2>/dev/null`
if test ! "$_make_try"
then
        echo
        echo "*** $MAKE is not GNU Make.  You will not be able to build NSS without GNU Make."
        echo
        exit 1
fi
dnl Now warn about version 3.77 if we find it.
_make_vers=`$MAKE --version | grep Make | $AWK '{ print \$4 }' | sed 's/,//' 2>/dev/null`
if test "$_make_vers" = "3.77"
then
        echo
        echo "*** Found GNU Make 3.77.  This version is known to have problems with the"
        echo "*** wildcard function in certain circumstances.  You may experience infinite"
        echo "*** looping while building NSS with 3.77.  If this happens, you can"
        echo "*** either downgrade to 3.76.1 or try configuring with --disable-md."
        echo
fi

AC_PROG_MAKE_SET
AC_PATH_PROGS(PERL, perl5 perl, :)
if test -z "$PERL" || test "$PERL" = ":"; then
    AC_MSG_ERROR([perl not found in \$PATH])
fi

AC_PATH_PROG(XARGS, xargs)

fi # SKIP_PATH_CHECKS

dnl ========================================================
dnl Default platform specific options
dnl ========================================================
OBJ_SUFFIX=o
LIB_SUFFIX=a
DLL_SUFFIX=so
MKSHLIB='$(CC) -shared -Wl,-soname -Wl,$(notdir $@)'
AR_FLAGS='cr $@'
AS='$(CC)'

OS_TARGET=`uname -s`
OS_ARCH=`uname -s | sed -e 's|/|_|g'`
#OS_RELEASE=`uname -r | awk -F\. '{ print $1 "." $2 }'`
OS_TEST=`uname -m`

dnl ========================================================
dnl Architecture fixes
dnl ========================================================

# Attempt to differentiate between sparc and x86 Solaris

if test "${OS_TEST}" = "i86pc"; then
    OS_RELEASE=`uname -r`"_${OS_TEST}"
else
    OS_RELEASE=`uname -r`
fi

# Force the IRIX64 machines to use IRIX.

if test "${OS_ARCH}" = "IRIX64"; then
    OS_ARCH=IRIX
fi

# Force the older BSD/OS versions to use the new arch name.

if test "${OS_ARCH}" = "BSD_386"; then
    OS_ARCH=BSD_OS
fi

# Catch Deterim if SVR4 is NCR or UNIXWARE

if test "${OS_ARCH}" = "UNIX_SV"; then
    _TEST=`grep NCR /etc/bcheckrc | head -1 2>/dev/null`
    if echo "$_TEST" | grep -c NCR 2>/dev/null; then
        OS_ARCH=NCR
    else
        OS_ARCH=UNIXWARE
    fi
    OS_RELEASE=`uname -v`
fi

if test "${OS_ARCH}" = "UNIX_System_V"; then
    OS_ARCH=NEC
fi

if test "${OS_ARCH}" = "AIX"; then
    OS_RELEASE=`uname -v`.`uname -r`
fi

# Distinguish between OSF1 V4.0B and V4.0D
if test "${OS_ARCH}${OS_RELEASE}" = "OSF1V4.0"; then
    OS_VERSION=`uname -r`
    if test "${OS_VERSION}" = "564"; then
        OS_RELEASE="V4.0B"
    fi
    if test "${OS_VERSION}" = "878"; then
        OS_RELEASE="V4.0D"
    fi
fi
 
# SINIX changes name to ReliantUNIX with 5.43
if test "${OS_ARCH}" = "ReliantUNIX-N"; then
    OS_ARCH=ReliantUNIX
    OS_RELEASE=5.4
fi

if test "${OS_ARCH}" = "SINIX-N"; then
    OS_ARCH=ReliantUNIX
    OS_RELEASE=5.4
fi

# Handle FreeBSD 2.2-STABLE and Linux 2.0.30-osfmach3
if echo ${OS_ARCH} | egrep -c '(Linux|FreeBSD)' >/dev/null; then
    OS_RELEASE=`echo ${OS_RELEASE} | sed 's|-.*||'`
fi

if test "${OS_ARCH}" = "Linux"; then
    OS_RELEASE=`basename ${OS_RELEASE}`
fi

# For OS/2
if test "${OS_ARCH}" = "OS_2"; then
    OS_ARCH=OS2
    OS_RELEASE=`uname -v`
fi

if echo ${OS_ARCH} | grep -c OpenVMS >/dev/null; then
    OS_ARCH=OpenVMS
    OS_RELEASE=`uname -v`
fi

#######################################################################
# Master "Core Components" macros for getting the OS target           #
#######################################################################

#
# Note: OS_TARGET should be specified on the command line for gmake.
# When OS_TARGET=WIN95 is specified, then a Windows 95 target is built.
# The difference between the Win95 target and the WinNT target is that
# the WinNT target uses Windows NT specific features not available
# in Windows 95. The Win95 target will run on Windows NT, but (supposedly)
# at lesser performance (the Win95 target uses threads; the WinNT target
# uses fibers).
#
# If OS_TARGET is not specified, it defaults to $(OS_ARCH), i.e., no
# cross-compilation.
#

#
# The following hack allows one to build on a WIN95 machine (as if
# s/he were cross-compiling on a WINNT host for a WIN95 target).
# It also accomodates for MKS's uname.exe.  If you never intend
# to do development on a WIN95 machine, you don't need this. It doesn't
# work any more anyway.
#
if test "${OS_ARCH}" = "WIN95"; then
    OS_ARCH=WINNT
    OS_TARGET=WIN95
fi

if test "${OS_ARCH}" = "Windows_95"; then
    OS_ARCH=Windows_NT
    OS_TARGET=WIN95
fi

#
# On WIN32, we also define the variable CPU_ARCH.
#

if test "${OS_ARCH}" = "WINNT"; then
    CPU_ARCH=`uname -p`
    if test "${CPU_ARCH}" = "I386"; then
        CPU_ARCH=x386
    fi
elif test "${OS_ARCH}" = "Windows_NT"; then
#
# If uname -s returns "Windows_NT", we assume that we are using
# the uname.exe in MKS toolkit.
#
# The -r option of MKS uname only returns the major version number.
# So we need to use its -v option to get the minor version number.
# Moreover, it doesn't have the -p option, so we need to use uname -m.
#
    OS_ARCH=WINNT
    OS_MINOR_RELEASE=`uname -v`
    if test "${OS_MINOR_RELEASE}" = "00"; then
        OS_MINOR_RELEASE=0
    fi
    OS_RELEASE="${OS_RELEASE}.${OS_MINOR_RELEASE}"
    CPU_ARCH=`uname -m`
	#
	# MKS's uname -m returns "586" on a Pentium machine.
	#
    if echo "${CPU_ARCH}" | grep -c 86 2>/dev/null; then
        CPU_ARCH=x386
    fi
elif echo "$OS_ARCH" | grep -c CYGWIN_NT >/dev/null; then
#
# If uname -s returns "CYGWIN_NT-4.0", we assume that we are using
# the uname.exe in the Cygwin tools.
#
    OS_RELEASE=`echo $OS_ARCH | sed 's|^CYGWIN_NT-||'`
    OS_ARCH=WINNT
    CPU_ARCH=`uname -m`
    #
    # Cygwin's uname -m returns "i686" on a Pentium Pro machine.
    #
    if echo "$CPU_ARCH" | grep -c 86 >/dev/null; then
        CPU_ARCH=x386
    fi
elif test "$OS_ARCH" = "CYGWIN32_NT"; then
#
# Prior to the Beta 20 release, Cygwin was called GNU-Win32.
# If uname -s returns "CYGWIN32/NT", we assume that we are using
# the uname.exe in the GNU-Win32 tools.
#
    OS_ARCH=WINNT
    CPU_ARCH=`uname -m`
    #
    # GNU-Win32's uname -m returns "i686" on a Pentium Pro machine.
    #
    if echo "$CPU_ARCH" | grep -c 86 >/dev/null; then
        CPU_ARCH=x386
    fi
fi

if test -n "$MOZILLA_CLIENT" && test "$OS_ARCH" = "WINNT"; then
    OS_TARGET=WIN95
    if test -n "$MOZ_DEBUG"; then
        USE_DEBUG_RTL=1
    fi
fi

if test -z "${OS_TARGET}"; then
    OS_TARGET=$OS_ARCH
fi

if test "${OS_TARGET}" = "WIN95"; then
    OS_RELEASE=4.0
fi

dnl ========================================================
dnl Override of system specific host options
dnl ========================================================

HOST_CFLAGS="$HOST_CFLAGS -DXP_UNIX"
HOST_CXXFLAGS="$HOST_CXXFLAGS -DXP_UNIX"

dnl ========================================================
dnl Override of system specific target options
dnl ========================================================
case "$target" in

*-aix*)
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(AIX)
    AC_DEFINE(SYSV)
    CPU_ARCH=rs6000
    if test -z "$GNU_CC"; then
        CFLAGS="$CFLAGS -qarch=com"
    fi
    AIX_WRAP='$(DIST)/lib/aixwrap.o'
    AIX_TMP='./_aix_tmp.o'
    OS_LIBS="$OS_LIBS -lsvld"

    case "${target_os}" in
        aix4.1*)
            LDFLAGS="$LDFLAGS -bnso -berok"
            DLL_SUFFIX=a
            ;;
        aix4.2*)
            AC_DEFINE(AIX4_2)
            DSO_LDOPTS='-brtl -bM:SRE -bnoentry $(EXPORT_RULES)'
            MKSHLIB='$(LD) $(DSO_LDOPTS) -lsvld -L/usr/lpp/xlC/lib -lc -lm'
            OS_LIBS="$OS_LIBS -L/usr/lpp/xlC/lib -lc -lm"
            EXPORT_RULES=-bexpall
            ;;
        aix4.3*)
            if test -n "$USE_64"; then
                AC_DEFINE(AIX_64BIT)
                OBJECT_MODE=64
            fi
            ;;
    esac
    ;;
    
*-beos*)
    AC_DEFINE(XP_BEOS)
    AC_DEFINE(BEOS)
    MKSHLIB='$(CC) -nostart -Wl,-soname -Wl,$(notdir $@)'
    OS_LIBS="${OS_LIBS} -lbe"
    ;;

*-bsdi*)
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(BSD_OS)
    AC_DEFINE(BSDI)
    AC_DEFINE(HAVE_STRERROR)
    AC_DEFINE(HAVE_BSD_FLOCK)
    DSO_CFLAGS='-fPIC -DPIC'
    DSO_LDOPTS='-shared -Wl,-soname,lib$(LIBRARY_NAME)$(LIBRARY_VERSION).$(DLL_SUFFIX)'
    MKSHLIB='$(CC) $(DSO_LDOPTS)'
    
    if test "$OS_TEST" = "i386"; then
        AC_DEFINE(__i386__)
        CPU_ARCH=x86
    elif test "$OS_TEST" = "ppc"; then
        AC_DEFINE(__ppc__)
        CPU_ARCH=ppc
    elif test "$OS_TEST" = "sparc" || test "$OS_TEST" = "sparc_v9"; then
        AC_DEFINE(__sparc__)
        CPU_ARCH=sparc
    fi

    if test -n "$LIBRUNPATH"; then
        DSO_LDOPTS="$DSO_LDOPTS -Wl,-R\$(LIBRUNPATH)"
    fi
    CFLAGS="$CFLAGS -I/usr/X11R6/include -I/usr/include/g++"
    ;;

*-cygwin*|*-msvc*)
    AC_DEFINE(XP_PC)
    AC_DEFINE(WIN32)
    AC_DEFINE(_WINDOWS)

    AWK=awk
    PERL=perl
    XARGS=xargs

    CC=cl
    CXX=cl
    LD=link
    AR='lib -NOLOGO -OUT:"$@"'
    AR_FLAGS=
    RANLIB=echo
    BSDECHO=echo
    AS=ml.exe
    ASFLAGS='-Cp -Sn -Zi -coff $(INCLUDES)'
    LIB_SUFFIX=lib
    DLL_SUFFIX=dll
    RC=rc.exe
    DLLFLAGS='-OUT:"$@"'

    if test -n "$MOZ_DEBUG"; then
        if test -n "$USE_DEBUG_RTL"; then
            CFLAGS="$CFLAGS -MDd"
        else
            CFLAGS="$CFLAGS -MD"
        fi
        _OPTIMIZE_FLAGS="$_OPTIMIZE_FLAGS -Od -Z7"
        DLLFLAGS="$DLLFLAGS -DEBUG -DEBUGTYPE:CV"
        LDFLAGS="$LDFLAGS -DEBUG -DEBUGTYPE:CV"
    else
        CFLAGS="$CFLAGS -MD"
        _OPTIMIZE_FLAGS=-O2
    fi
    if test -n "$MOZILLA_CLIENT"; then
        CFLAGS="$CFLAGS -I\$(SOURCE_XP_DIR)/include"
    fi
    NSPR_CFLAGS='-I$(SOURCE_XP_DIR)/include/nspr'
    if test -n "$MOZILLA_CLIENT"; then
        DBM_LIBS="\${DIST}/lib/dbm.\${LIB_SUFFIX}"
        NSPR_LIBS="\${DIST}/lib/plc4.\${LIB_SUFFIX} \${DIST}/lib/plds4.\${LIB_SUFFIX} \${DIST}/lib/nspr4.\${LIB_SUFFIX}"
    fi

    PROCESSOR=`uname -p`
    case "${PROCESSOR}" in
    I386)
        AC_DEFINE(_X86_)
        CFLAGS="$CFLAGS -W3 -nologo"
        CPU_ARCH=x386
        ;;
    MIPS)
        AC_DEFINE(_MIPS_)
        CFLAGS="$CFLAGS -W3 -nologo"
        CPU_ARCH=MIPS
        ;;
    ALPHA)
        AC_DEFINE(_ALPHA_)
        CFLAGS="$CFLAGS -W3 -nologo"
        CPU_ARCH=ALPHA
        ;;
    *)
        CPU_ARCH='processor_is_undefined'
    esac

    case "${OS_TARGET}" in
    WIN95)
        AC_DEFINE(WIN95)
        DLLFLAGS="$DLLFLAGS -nologo -DLL -SUBSYSTEM:WINDOWS -PDB:NONE"
        ;;
    WINNT)
        AC_DEFINE(WINNT)
        CFLAGS="CFLAGS -GT"
        DLLFLAGS="$DLLFLAGS -nologo -DLL -PDB:NONE -SUBSYSTEM:WINDOWS"
        ;;
    esac
    ;;

*-freebsd*)
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(FREEBSD)
    AC_DEFINE(HAVE_STRERROR)
    AC_DEFINE(HAVE_BSD_FLOCK)
    CFLAGS="$CFLAGS -fPIC -ansi -Wall -pipe -I/usr/include/g++ -I/usr/X11R6/include"
    DSO_LDOPTS=-Bshareable
    MKSHLIB='$(LD) $(DSO_LDOPTS)'

    if test "$OS_TEST" = "alpha"; then
        CPU_ARCH=alpha
    else
        CPU_ARCH=x86
        AC_DEFINE(i386)
    fi

    if test -z "$CLASSIC_NSPR"; then
        USE_PTHREADS=1
        AC_DEFINE(_THREAD_SAFE)
        CFLAGS="$CFLAGS -pthread"
    fi

    MOZ_OBJFORMAT=`test -x /usr/bin/objformat && /usr/bin/objformat || echo aout`
    if test "$MOZ_OBJFORMAT" != "elf"; then
        DLL_SUFFIX=so.1.0
    fi
    ;;

*-hpux*)
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(HPUX)
    AC_DEFINE(hppa)
    AC_DEFINE(_HPUX_SOURCE)
    CPU_ARCH=hppa
    DLL_SUFFIX=sl
    CFLAGS="$CFLAGS -Ae +Z"
    LDFLAGS="$LDFLAGS -z -Wl,+s"
    MKSHLIB='$(LD) $(DSO_LDOPTS)'
    DSO_LDOPTS='-b +h $(notdir $@)'

    if echo "$OS_RELEASE" | grep ^A.09 >/dev/null; then
        AC_DEFINE(HPUX9)
        if echo "$OS_RELEASE" | egrep '^A.09.(03|07)' >/dev/null; then
            DEFAULT_IMPL_STRATEGY=_CLASSIC
        fi
    elif echo "$OS_RELEASE" | grep ^B.10 >/dev/null; then
        AC_DEFINE(HPUX10)
        OS_LIBS="$OS_LIBS -lpthread -lm"
        if echo "$OS_RELEASE" | grep '^B.10.01' >/dev/null; then
            DEFAULT_IMPL_STRATEGY=_CLASSIC
        elif echo "$OS_RELEASE" | grep '^B.10.10' >/dev/null; then
            AC_DEFINE(HPUX10_10)
            DEFAULT_IMPL_STRATEGY=_PTH
        elif echo "$OS_RELEASE" | grep '^B.10.20' >/dev/null; then
            AC_DEFINE(HPUX10_20)
            DEFAULT_IMPL_STRATEGY=_PTH
        elif echo "$OS_RELEASE" | grep '^B.10.30' >/dev/null; then
            AC_DEFINE(HPUX10_30)
            DEFAULT_IMPL_STRATEGY=_PTH
        fi
    elif echo "$OS_RELEASE" | grep ^B.11 >/dev/null; then
        AC_DEFINE(HPUX11)
        OS_LIBS="$OS_LIBS -lpthread -lm -lrt"
        HPUX=1
        if test -n "$USE_LONG_LONGS"; then
            USE_HYBRID=1
        fi
        if test -z "$GNU_CC"; then
            if test "$USE_64"; then
                CFLAGS="$CFLAGS -Ae +e +DA2.0W +DS2.0 +DChpux"
            else
                if test -n "$USE_HYBRID"; then
                    CFLAGS="$CFLAGS -Aa +e +DA2.0 +DS2.0"
                else
                    CFLAGS="$CFLAGS +DAportable +DS2.0"
                fi
            fi
        fi
    fi

    if test "$DEFAULT_IMPL_STRATEGY" = "_PTH"; then
        USE_PTHREADS=1
        if test -n "$CLASSIC_NSPR"; then
            USE_PTHREADS=
            IMPL_STRATEGY=_CLASSIC
        fi
        if test -n "$PTHREADS_USER"; then
            USE_PTHREADS=
            IMPL_STRATEGY=_PTH_USER
        fi
    fi

    if test -n "$PTHREADS_USER"; then
        AC_DEFINE(_POSIX_C_SOURCE,199506L)
    fi

    if test -n "$USE_PTHREADS"; then
        if echo "$OS_RELEASE" | egrep '^B.10.(10|20)' >/dev/null; then
            AC_DEFINE(_REENTRANT)
        elif echo "$OS_RELEASE" | grep '^B.10.30' >/dev/null; then
            AC_DEFINE(_POSIX_C_SOURCE,199506L)
        fi
    fi
    ;;

*-irix*)
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(IRIX)
    AC_DEFINE(SVR4)
    AC_DEFINE(_SGI_MP_SOURCE)
    CPU_ARCH=mips
    RANLIB=/bin/true
    MKSHLIB='$(LD) $(DSO_LDOPTS) -sahred -soname $(@:$(OBJDIR)/%.so=%.so)'
    DSO_LDOPTS='-elf shared -all'
    if test "$USE_N32"; then
        DSO_LDOPTS="$DSO_LDOPTS -n32 -mips3"
    fi
    if test "$DSO_BACKEND"; then
        DSO_LDOPTS="$DSO_LDOPTS -soname \$(DSO_NAME)"
    fi

    case "$target_os" in
    irix5.3*)
        AC_DEFINE(IRIX5_3)
        ;;
    irix6.2*)
        AC_DEFINE(IRIX6_2)
        DSO_LDOPTS="$DSO_LDOPTS -no_unresolved"
        ;;
    irix6.3*)
        AC_DEFINE(IRIX6_3)
        DSO_LDOPTS="$DSO_LDOPTS -no_unresolved"
        ;;
    irix6.5*)
        AC_DEFINE(IRIX6_5)
        DSO_LDOPTS="$DSO_LDOPTS -no_unresolved"
        ;;
    esac


    if test -n "$USE_PTHREADS"; then
        if test "$USE_N32"; then
            IMPL_STRATEGY=_n32_PTH
        else
            IMPL_STRATEGY=_PTH
        fi
        case "$target_os" in
        irix6*)
            OS_LIBS="$OS_LIBS -lpthread"
            ;;
        esac
    fi

    if test -n "$GNU_CC"; then
        AS='$(CC) -x assembler-with-cpp'
        CFLAGS="$CFLAGS -Wall -Wno-format"
        _OPTIMIZE_FLAGS=-O6
    else
        CFLAGS="$CFLAGS -fullwarn -xansi"
        if test "$USE_N32"; then
            _OPTIMIZE_FLAGS='-O -OPT:Olimit=4000'
        else
            _OPTIMIZE_FLAGS='-O -Olimit 4000'
        fi
        if echo "$OS_RELEASE" | grep ^6. >/dev/null; then
            if test "$USE_N32"; then
                CFLAGS="$CFLAGS -n32 -mips3 -exceptions"
            else
                CFLAGS="$CFLAGS -32"
            fi
            CFLAGS="$CFLAGS -multigot"
        else
            CFLAGS="$CFLAGS -xgot"
        fi
        if test "$USE_N32"; then
            CFLAGS="$CFLAGS -dollar"
        fi
    fi
    ;;

*-linux*)
    USE_PTHREADS=1
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(LINUX)
    AC_DEFINE(linux)
    AC_DEFINE(_POSIX_SOURCE)
    AC_DEFINE(_BSD_SOURCE)
    AC_DEFINE(HAVE_STRERROR)
    AC_DEFINE(LINUX1_2)
    CFLAGS="$CFLAGS -ansi -Wall -pipe"
    CXXFLAGS="$CXXFLAGS -ansi -Wall -pipe -fno-rtti -fno-exceptions"
    DSO_CFLAGS=-fPIC
    DSO_LDOPTS=-shared
    _OPTIMIZE_FLAGS=-O2

    if test -n "$USE_PTHREADS"; then
        AC_DEFINE(_REENTRANT)
        OS_LIBS="-lpthread $OS_LIBS"                
    fi

    OS_LIBS="$OS_LIBS -ldl -lc"

    case "${target_cpu}" in
    alpha)
        AC_DEFINE(_ALPHA_)
        AC_DEFINE(_XOPEN_SOURCE)
        CFLAGS="$CFLAGS -mieee"
        CXXFLAGS="$CXXFLAGS -mieee"
        CPU_ARCH=alpha
        ;;
    i?86)
        AC_DEFINE(i386)
        AC_DEFINE(_XOPEN_SOURCE)
        CPU_ARCH=x86
        ;;
    ppc)
        AC_DEFINE(MACLINUX)
        CPU_ARCH=ppc
        ;;
    *)
        ;;
    esac

    case "$OS_RELEASE" in
    2.0)
        AC_DEFINE(LINUX2_0)
        ;;
    2.1)
        AC_DEFINE(LINUX2_1)
        ;;
    2.2)
        AC_DEFINE(LINUX2_1)
        ;;
    2.4)
        AC_DEFINE(LINUX2_1)
        ;;
    esac
    ;;

*-solaris*)
    USE_PTHREADS=
    LOCAL_THREADS_ONLY=1
    AC_DEFINE(XP_UNIX)
    AC_DEFINE(SVR4)
    AC_DEFINE(SYSV)
    AC_DEFINE(__svr4)
    AC_DEFINE(__svr4__)
    AC_DEFINE(SOLARIS)
    MKSHLIB='$(LD) $(DSO_LDOPTS)'
    DSO_LDOPTS='-G -h $(notdir $@)'
    if test -n "$GNU_CC"; then
        DSO_CFLAGS=-fPIC
        CFLAGS="$CFLAGS -Wall -Wno-format"
        CXXFLAGS="$CXXFLAGS -Wall -Wno-format"
        ASFLAGS="$ASFLAGS -x assembler-with-cpp"
    else
        DSO_CFLAGS=-KPIC
    fi
    if test -z "$GNU_AS"; then
      ASFLAGS="$ASFLAGS -Wa,-P"
    fi
    if test -n "$MOZ_DEBUG"; then
        CFLAGS="$CFLAGS -xs"
    fi
    if test -n "$USE_64"; then
        if test -n "$GNU_CC"; then
            ARCHFLAG=UNKNOWN
        else
            ARCHFLAG='-xarch=v9'
        fi
        LD=/usr/ccs/bin/ld
    else
        if test -n "$GNU_CC"; then
            if test -n "$USE_HYBRID"; then
                ARCHFLAG='-mcpu=v9 -Wa,-xarch=v8plus'
            else
                ARCHFLAG='-mcpu=v8'
            fi
        else
            if test -n "$USE_HYBRID"; then
                ARCHFLAG='-xarch=v8plus'
            else
                ARCHFLAG='-xarch=v8'
            fi
        fi
    fi
    case "${target_cpu}" in
    sparc)
      CPU_ARCH=sparc
      ;;
    esac

    case "${target_os}" in
    solaris2.5*)
      AC_DEFINE(SOLARIS2_5)
      ;;
    solaris2.6*)
      AC_DEFINE(_SVID_GETTOD)
      AC_DEFINE(SOLARIS2_6)
      ;;
    solaris2.7*)
      AC_DEFINE(_SVID_GETTOD)
      AC_DEFINE(SOLARIS2_7)
      ;;
    solaris2.8*)
      AC_DEFINE(_SVID_GETTOD)
      AC_DEFINE(SOLARIS2_8)
      ;;
    *)
      ;;
    esac

    if test -z "$LOCAL_THREADS_ONLY"; then
        AC_DEFINE(_REENTRANT)
    fi

    CFLAGS="$CFLAGS $ARCHFLAG -I/usr/dt/include -I/usr/openwin/include"
    OS_LIBS="$OS_LIBS -lthread -lnsl -lsocket -lposix4 -ldl -lc"
    ;;

esac

dnl ========================================================
dnl Check for system libraries
dnl ========================================================

dnl ========================================================
dnl Check for system header files.
dnl ========================================================

dnl ========================================================
dnl Check for typedefs and structs
dnl ========================================================

if test -z "$SKIP_LIBRARY_CHECKS"; then
dnl ========================================================
dnl Checks for library functions.
dnl ========================================================

dnl ========================================================
dnl Check options
dnl ========================================================
dnl ========================================================
dnl =
dnl = If NSPR was not detected in the system, 
dnl = use the one in the source tree (mozilla/nsprpub)
dnl =
dnl ========================================================

AM_PATH_NSPR(4.0.0, [MOZ_NATIVE_NSPR=1], [MOZ_NATIVE_NSPR=])

if test -z "$MOZ_NATIVE_NSPR"; then
    AC_MSG_WARN(nspr-config not found. building local copy of NSPR)
    NSPR_CFLAGS='`$(MOD_DEPTH)/../../nsprpub/config/nspr-config --prefix=$(DIST) --cflags`'
    case "$target" in
    *-*-os2_vacpp)
        NSPR_LIBS='$(DIST)/lib/nspr'$NSPR_VERSION'.lib $(DIST)/lib/plc'$NSPR_VERSION'.lib $(DIST)/lib/plds'$NSPR_VERSION'.lib '$_PTHREAD_LDFLAGS''
        ;;
    *)
        NSPR_LIBS='`$(MOD_DEPTH)/../../nsprpub/config/nspr-config --prefix=$(DIST) --libs`'
        ;;
    esac
fi

fi # SKIP_LIBRARY_CHECKS


_cpp_md_flag=
AC_ARG_ENABLE(md,
[  --disable-md            Do not use compiler-based dependencies ],[],
  [dnl Default is to turn on -MD if using GNU-compatible compilers
   dnl XXX make this check GNU_CXX when that test is hooked up
   if test "$GNU_CC"; then
     _cpp_md_flag=1
   fi])
if test "$_cpp_md_flag"; then
  COMPILER_DEPEND=1
  MDDEPDIR='.deps'
  _DEPEND_CFLAGS='$(filter-out %/.pp,-Wp,-MD,$(MDDEPDIR)/$(*F).pp)' 
fi   

if test -n "$MOZ_OPTIMIZE"; then
    CFLAGS="$CFLAGS $_OPTIMIZE_FLAGS"
fi

if test -n "$MOZ_DEBUG"; then
    CFLAGS="$CFLAGS $_DEBUG_FLAGS"
fi

CFLAGS=`echo \
    $_DEPEND_CFLAGS \
    $CFLAGS`

dnl ========================================================
dnl Substitution of found variables.
dnl ========================================================

dnl Build options
AC_SUBST(MOZILLA_CLIENT)
AC_SUBST(ENABLE_CMD)
AC_SUBST(CORECONF_SOURCE)

dnl Program locations
AC_SUBST(HOST_CC)
AC_SUBST(AS)
AC_SUBST(AR)
AC_SUBST(LD)

dnl Compiler characteristics/flags
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(HOST_CFLAGS)
AC_SUBST(COMPILER_DEPEND)
AC_SUBST(MDDEPDIR)
AC_SUBST(ASFLAGS)
AC_SUBST(DEFINES)
AC_SUBST(DEFS)
AC_SUBST(GNU_CC)
AC_SUBST(GNU_CXX)

dnl Linker characteristics/flags
AC_SUBST(LDFLAGS)
AC_SUBST(MKSHLIB)
AC_SUBST(DSO_CFLAGS)
AC_SUBST(DSO_LDOPTS)
AC_SUBST(AR_FLAGS)
AC_SUBST(OS_LIBS)
AC_SUBST(RC)
AC_SUBST(DLLFLAGS)
AC_SUBST(WINDRES)

dnl Implementation options
AC_SUBST(USE_PTHREADS)

dnl System characteristics
AC_SUBST(OS_TARGET)
AC_SUBST(OS_ARCH)
AC_SUBST(OS_RELEASE)
AC_SUBST(OS_TEST)
AC_SUBST(CPU_ARCH)
AC_SUBST(LIB_SUFFIX)
AC_SUBST(DLL_SUFFIX)
dnl AC_SUBST(OBJ_SUFFIX)

dnl ========================================================
dnl Generate output files.
dnl ========================================================
. ${srcdir}/secmakefiles.sh

echo $MAKEFILES | $PERL $srcdir/build/autoconf/acoutput-fast.pl > conftest.sh
. ./conftest.sh
rm conftest.sh

dnl ========================================================
dnl Remove :template files from MAKEFILES
dnl ========================================================
echo $MAKEFILES | $PERL -e 'while (<STDIN>) { chomp; foreach $f (split(/\s+/)) { $f =~ s/:.*//; print "$f "; } } print "\n";' > unallmakefiles

AC_OUTPUT($MAKEFILES)
