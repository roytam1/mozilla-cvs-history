/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications, Inc.  Portions created by Netscape are
 * Copyright (C) 1999, Mozilla.  All Rights Reserved.
 * 
 * Contributor(s):
 *   Travis Bogard <travis@netscape.com>
 */

#include "nsISupports.idl"
/*#include "nsIWidget.idl"  Boy this would be nice.*/

[ptr] native nsIWidget(nsIWidget);
%{ C++
#include "nsIWidget.h"
%}

/**
 * The nsIGenericWindow describes a generic window and basic operations that 
 * can be performed on it.  This is not to be a complete windowing interface
 * but rather a common set that nearly all windowed objects support.    
 */

[scriptable, uuid(046BC8A0-8015-11d3-AF70-00A024FFC08C)]
interface nsIGenericWindow : nsISupports
{
	/*
	Allows a client to initialize an object implementing this interface with
	the usually required setup information.

	@param parentNativeWindow - This allows a system to pass in the parenting
		window as a native reference rather than relying on the calling
		application to have created the parent window as an nsIWidget.  This 
		value will be ignored (should be nsnull) if an nsIWidget is passed in to
		the parentWidget parameter.  One of the two parameters however must be
		passed.

	@param parentWidget - This allows a system to pass in the parenting widget.
		This allows some objects to optimize themselves and rely on the view
		system for event flow rather than creating numerous native windows.  If
		one of these is not available, nsnull should be passed and a 
		valid native window should be passed to the parentNativeWindow parameter.

	@param x - This is the x co-ordinate relative to the parent to place the
		window.

	@param y - This is the y co-ordinate relative to the parent to place the 
		window.

	@param cx - This is the width	for the window to be.

	@param cy - This is the height for the window to be.
	*/
	[noscript]void InitWindow(in long parentNativeWindow, in nsIWidget parentWidget,
		in long x, in long y, in long cx, in long cy);

	/*
	Tells the window that intialization and setup is complete.  When this is
	called the window can actually create itself based on the setup
	information handed to it.
	*/
	void Create();

	/*
	Tell the window that it can destroy itself.  This allows re-using the same
	object without re-doing a lot of setup.  This is not a required call 
	before a release.

	@return	NS_OK - Everything destroyed properly.
				NS_ERROR_NOT_IMPLEMENTED - State preservation is not supported.
					Release the interface and create a new object.
	*/
	void Destroy();

	/*
	Sets the current x and y coordinates of the control.  This is relative to
	the parent window.
	*/
	void SetPosition(in long x, in long y);

	/*
	Gets the current x and y coordinates of the control.  This is relatie to the
	parent window.
	*/
	void GetPosition(out long x, out long y);

	/*
	Sets the width and height of the control.
	*/
	void SetSize(in long cx, in long cy, in boolean fRepaint);

	/*
	Gets the width and height of the control.
	*/
	void GetSize(out long cx, out long cy);

	/*
	Convenience function combining the SetPosition and SetSize into one call.
	*/
	void SetPositionAndSize(in long x, in long y, in long cx, in long cy, 
		in boolean fRepaint); 

	/*
	This is the parenting widget for the control.  This may be null if only the
	native window was handed in for the parent during initialization.  If this
	is returned, it should refer to the same object as parentNativeWindow.
	*/
	attribute nsIWidget parentNativeWidget;

	/*
	This is the native window parent of the control.
	*/
	attribute long parentNativeWindow;

	/*
	Attribute controls the visibility of the object behind this interface.
	Setting this attribute to false will hide the control.  Setting it to 
	true will show it.
	*/
	attribute boolean visible;

	/*
	Allows you to find out what the widget is of a given object.  Depending
	on the object, this may return the parent widget in which this object
	lives if it has not had to create it's own widget.
	*/
	readonly attribute nsIWidget mainWidget; 	
};