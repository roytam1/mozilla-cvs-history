#include <olectl.h>
// MozillaControl.idl : IDL source for MozillaControl.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (MozillaControl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

// See note below for why IWebBrowser is not imported this way
// import "exdisp.idl";
#include "exdispid.h"

[
	uuid(1339B53E-3453-11D2-93B9-000000000000),
	version(1.0),
	helpstring("MozillaControl 1.0 Type Library")
]
library MOZILLACONTROLLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	// NOTE: There is a very specific reason for repeating the IWebBrowser
	//       verbatim rather than import'ing exdisp.idl - it stops MIDL
	//       failing with a MIDL2020 error!

	typedef enum
	{
		OLECMDIDF_REFRESH_NORMAL          = 0,
		OLECMDIDF_REFRESH_IFEXPIRED       = 1,
		OLECMDIDF_REFRESH_CONTINUE        = 2,
		OLECMDIDF_REFRESH_COMPLETELY      = 3,
		OLECMDIDF_REFRESH_NO_CACHE        = 4,
		OLECMDIDF_REFRESH_RELOAD          = 5,
		OLECMDIDF_REFRESH_LEVELMASK       = 0x00FF,
		OLECMDIDF_REFRESH_CLEARUSERINPUT  = 0x1000,
		OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 0x2000,
	} OLECMDID_REFRESHFLAG;

    [
        uuid(EAB22AC1-30C1-11CF-A7EB-0000C05BAE0B), // IID_IWebBrowser
        helpstring("Web Browser interface"),
        helpcontext(0x0000),
        hidden,
        dual,
        oleautomation,
        odl
    ]
    interface IWebBrowser : IDispatch 
    {
        [id(100), helpstring("Navigates to the previous item in the history list."), helpcontext(0x0000)]
        HRESULT GoBack();
        [id(101), helpstring("Navigates to the next item in the history list."), helpcontext(0x0000)]
        HRESULT GoForward();
        [id(102), helpstring("Go home/start page."), helpcontext(0x0000)]
        HRESULT GoHome();
        [id(103), helpstring("Go Search Page."), helpcontext(0x0000)]
        HRESULT GoSearch();

        [id(104), helpstring("Navigates to a URL or file."), helpcontext(0x0000)]
        HRESULT Navigate([in] BSTR URL,
                         [in, optional] VARIANT * Flags,
                         [in, optional] VARIANT * TargetFrameName,
                         [in, optional] VARIANT * PostData,
                         [in, optional] VARIANT * Headers);
        typedef
        [
            uuid(14EE5380-A378-11cf-A731-00A0C9082637),
            helpstring("Constants for WebBrowser navigation flags")
        ]
        enum BrowserNavConstants {
            [helpstring("Open in new window")]          navOpenInNewWindow = 0x0001,
            [helpstring("Exclude from history list")]   navNoHistory = 0x0002,
            [helpstring("Don't read from cache")]       navNoReadFromCache = 0x0004,
            [helpstring("Don't write from cache")]      navNoWriteToCache = 0x0008,
            [helpstring("Try other sites on failure")]  navAllowAutosearch = 0x0010,
            [helpstring("OpenBrowserBar")]              navBrowserBar = 0x0020,
        } BrowserNavConstants;

        [id(DISPID_REFRESH), helpstring("Refresh the currently viewed page."), helpcontext(0x0000)]
        HRESULT Refresh();

        // The standard Refresh takes no parameters and we need some... use a new name
        [id(105), helpstring("Refresh the currently viewed page."), helpcontext(0x0000)]
        HRESULT Refresh2([in,optional] VARIANT * Level);

        typedef
        [
            uuid(C317C261-A991-11cf-A731-00A0C9082637),
            helpstring("Constants for Refresh")
        ]
        enum RefreshConstants {                                         // must map to these in sdk\inc\docobj.h
            [helpstring("Refresh normal")]     REFRESH_NORMAL     = 0,  //== OLECMDIDF_REFRESH_NORMAL
            [helpstring("Refresh if expired")] REFRESH_IFEXPIRED  = 1,  //== OLECMDIDF_REFRESH_IFEXPIRED
            [helpstring("Refresh completely")] REFRESH_COMPLETELY = 3   //== OLECMDIDF_REFRESH_COMPLETELY
        } RefreshConstants;

        [id(106), helpstring("Stops opening a file."), helpcontext(0x0000)]
        HRESULT Stop();

        // Automation heirarchy...
        [id(200), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise.."), helpcontext(0x0000)]
        HRESULT Application([out,retval] IDispatch** ppDisp);

        [id(201), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object."), helpcontext(0x0000)]
        HRESULT Parent([out,retval] IDispatch** ppDisp);

        [id(202), propget, helpstring("Returns the container/parent automation object, if any."), helpcontext(0x0000)]
        HRESULT Container([out,retval] IDispatch** ppDisp);

        [id(203), propget, helpstring("Returns the active Document automation object, if any."), helpcontext(0x0000)]
        HRESULT Document([out,retval] IDispatch** ppDisp);

        [id(204), propget, helpstring("Returns True if this is the top level object."), helpcontext(0x0000)]
        HRESULT TopLevelContainer([out, retval] VARIANT_BOOL* pBool);

        [id(205), propget, helpstring("Returns the type of the contained document object."), helpcontext(0x0000)]
        HRESULT Type([out,retval] BSTR* Type);

        // Window stuff...
        [id(206), propget, helpstring("The horizontal position (pixels) of the frame window relative to the screen/container."), helpcontext(0x0000)]
        HRESULT Left([out, retval] long *pl);
        [id(206), propput]
        HRESULT Left([in] long Left);
        [id(207), propget, helpstring("The vertical position (pixels) of the frame window relative to the screen/container."), helpcontext(0x0000)]
        HRESULT Top([out, retval] long *pl);
        [id(207), propput]
        HRESULT Top([in] long Top);
        [id(208), propget, helpstring("The horizontal dimension (pixels) of the frame window/object."), helpcontext(0x0000)]
        HRESULT Width([out, retval] long *pl);
        [id(208), propput]
        HRESULT Width([in] long Width);
        [id(209), propget, helpstring("The vertical dimension (pixels) of the frame window/object."), helpcontext(0x0000)]
        HRESULT Height([out, retval] long *pl);
        [id(209), propput]
        HRESULT Height([in] long Height);

        // WebBrowser stuff...
        [id(210), propget, helpstring("Gets the short (UI-friendly) name of the URL/file currently viewed."), helpcontext(0x0000)]
        HRESULT LocationName([out,retval] BSTR *LocationName);

        [id(211), propget, helpstring("Gets the full URL/path currently viewed."), helpcontext(0x0000)]
        HRESULT LocationURL([out,retval] BSTR * LocationURL);

        // Added a property to see if the viewer is currenly busy or not...
        [id(212), propget, helpstring("Query to see if something is still in progress."), helpcontext(0x0000)]
        HRESULT Busy([out,retval] VARIANT_BOOL *pBool);
    }

    [
        uuid(EAB22AC2-30C1-11CF-A7EB-0000C05BAE0B), // DIID_DWebBrowserEvents
        helpstring("Web Browser Control Events (old)"),
        hidden
    ]
    dispinterface DWebBrowserEvents
    {
        properties:
        methods:
        [id(DISPID_BEFORENAVIGATE), helpstring("Fired when a new hyperlink is being navigated to."), helpcontext(0x0000)]
        void BeforeNavigate([in] BSTR URL, long Flags, BSTR TargetFrameName, VARIANT * PostData, BSTR Headers, [in, out]VARIANT_BOOL * Cancel);

        [id(DISPID_NAVIGATECOMPLETE), helpstring("Fired when the document being navigated to becomes visible and enters the navigation stack."), helpcontext(0x0000)]
        void NavigateComplete([in] BSTR URL );

        [id(DISPID_STATUSTEXTCHANGE), helpstring("Statusbar text changed."), helpcontext(0x0000)]
        void StatusTextChange([in]BSTR Text);

        [id(DISPID_PROGRESSCHANGE), helpstring("Fired when download progress is updated."), helpcontext(0x0000)]
        void ProgressChange([in] long Progress, [in] long ProgressMax);

        [id(DISPID_DOWNLOADCOMPLETE), helpstring("Download of page complete."), helpcontext(0x0000)]
        void DownloadComplete();

        [id(DISPID_COMMANDSTATECHANGE), helpstring("The enabled state of a command changed"), helpcontext(0x0000)]
        void CommandStateChange([in] long Command, [in] VARIANT_BOOL Enable);

        [id(DISPID_DOWNLOADBEGIN), helpstring("Download of a page started."), helpcontext(0x000)]
        void DownloadBegin();

        [id(DISPID_NEWWINDOW), helpstring("Fired when a new window should be created."), helpcontext(0x0000)]
        void NewWindow([in] BSTR URL, [in] long Flags, [in] BSTR TargetFrameName, [in] VARIANT * PostData, [in] BSTR Headers, [in,out] VARIANT_BOOL * Processed);

        [id(DISPID_TITLECHANGE), helpstring("Document title changed."), helpcontext(0x0000)]
        void TitleChange([in]BSTR Text);

        [id(DISPID_FRAMEBEFORENAVIGATE), helpstring("Fired when a new hyperlink is being navigated to in a frame."), helpcontext(0x0000)]
        void FrameBeforeNavigate([in] BSTR URL, long Flags, BSTR TargetFrameName, VARIANT * PostData, BSTR Headers, [in, out]VARIANT_BOOL * Cancel);

        [id(DISPID_FRAMENAVIGATECOMPLETE), helpstring("Fired when a new hyperlink is being navigated to in a frame."), helpcontext(0x0000)]
        void FrameNavigateComplete([in] BSTR URL );

        [id(DISPID_FRAMENEWWINDOW), helpstring("Fired when a new window should be created."), helpcontext(0x0000)]
        void FrameNewWindow([in] BSTR URL, [in] long Flags, [in] BSTR TargetFrameName, [in] VARIANT * PostData, [in] BSTR Headers, [in,out] VARIANT_BOOL * Processed);

        // The following are IWebBrowserApp specific:
        //
        [id(DISPID_QUIT), helpstring("Fired when application is quiting."), helpcontext(0x0000)]
        void Quit([in, out] VARIANT_BOOL * Cancel);

        [id(DISPID_WINDOWMOVE), helpstring("Fired when window has been moved."), helpcontext(0x0000)]
        void WindowMove();

        [id(DISPID_WINDOWRESIZE), helpstring("Fired when window has been sized."), helpcontext(0x0000)]
        void WindowResize();

        [id(DISPID_WINDOWACTIVATE), helpstring("Fired when window has been activated."), helpcontext(0x0000)]
        void WindowActivate();

        [id(DISPID_PROPERTYCHANGE), helpstring("Fired when the PutProperty method has been called."), helpcontext(0x0000)]
        void PropertyChange([in] BSTR Property);
    }


	[
		uuid(1339B54C-3453-11D2-93B9-000000000000),
		helpstring("MozillaBrowser Class")
	]
	coclass MozillaBrowser
	{
		[default] interface IWebBrowser;
		interface IDispatch;
//		[default, source] dispinterface DWebBrowserEvents2;
		[default, source] dispinterface DWebBrowserEvents;
	};
};
