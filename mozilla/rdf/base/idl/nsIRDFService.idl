/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsIRDFResource.idl"
#include "nsIRDFLiteral.idl"
#include "nsIRDFDataSource.idl"


// The RDF service interface. This is a singleton object, and should be
// obtained from the <tt>nsServiceManager</tt>.
[scriptable, uuid(BFD05261-834C-11d2-8EAC-00805F29F370)]
interface nsIRDFService : nsISupports {
    // Construct an RDF resource from a single-byte URI. <tt>nsIRDFSerivce</tt>
    // caches resources that are in-use, so multiple calls to <tt>GetResource()</tt>
    // for the same <tt>uri</tt> will return identical pointers. FindResource
    // is used to find out whether there already exists a resource corresponding to that url.
    nsIRDFResource GetResource(in string aURI);

    // Construct an RDF resource from a Unicode URI. This is provided
    // as a convenience method, allowing automatic, in-line C++
    // conversion from <tt>nsString</tt> objects. The <tt>uri</tt> will
    // be converted to a single-byte representation internally.
    nsIRDFResource GetUnicodeResource(in wstring aURI);

    nsIRDFResource GetAnonymousResource();

    // Construct an RDF literal from a Unicode string.
    nsIRDFLiteral  GetLiteral(in wstring aValue);

    // Construct an RDF literal from a PRTime.
    nsIRDFDate     GetDateLiteral(in long long aValue);

    // Construct an RDF literal from an int.
    nsIRDFInt      GetIntLiteral(in long aValue);

    boolean IsAnonymousResource(in nsIRDFResource aResource);

    // Registers a resource with the RDF system, making it unique w.r.t.
    // GetResource.
    //
    // An implementation of nsIRDFResource should call this in its
    // Init() method if it wishes the resource to be globally unique
    // (which is usually the case).
    //
    // NOTE that the resource will <i>not</i> be ref-counted by the
    // RDF service: the assumption is that the resource implementation
    // will call nsIRDFService::UnregisterResource() when the last
    // reference to the resource is released.
    //
    // NOTE that the nsIRDFService implementation may choose to
    // maintain a reference to the resource's URI; therefore, the
    // resource implementation should ensure that the resource's URI
    // (accessable via nsIRDFResource::GetValue(const char* *aURI)) is
    // valid before calling RegisterResource(). Furthermore, the
    // resource implementation should ensure that this pointer
    // <i>remains</i> valid for the lifetime of the resource. (The
    // implementation of the resource cache in nsIRDFService uses the
    // URI maintained "internally" in the resource as a key into the
    // cache rather than copying the resource URI itself.)
    void RegisterResource(in nsIRDFResource aResource, in boolean aReplace);

    // Called to notify the resource manager that a resource is no
    // longer in use. This method should only be called from the
    // destructor of a "custom" resource implementation to notify the
    // RDF service that the last reference to the resource has been
    // released, so the resource is no longer valid.
    //
    // NOTE. As mentioned in nsIRDFResourceFactory::CreateResource(),
    // the RDF service will use the result of
    // nsIRDFResource::GetValue() as a key into its cache. For this
    // reason, you must always un-cache the resource <b>before</b>
    // releasing the storage for the <tt>const char*</tt> URI.
    void UnregisterResource(in nsIRDFResource aResource);

    // Register a <i>named data source</i>. The RDF service will call
    // <tt>nsIRDFDataSource::GetURI()</tt> to determine the URI under
    // which to register the data source.
    //
    // Note that the data source will <i>not</i> be refcounted by the
    // RDF service! The assumption is that an RDF data source
    // registers with the service once it is initialized (via
    // <tt>nsIRDFDataSource::Init()</tt>), and unregisters when the
    // last reference to the data source is released.
    void RegisterDataSource(in nsIRDFDataSource aDataSource,
                            in boolean          aReplace);

    // Unregister a <i>named data source</i>. The RDF service will call
    // <tt>nsIRDFDataSource::GetURI()</tt> to determine the URI under which the
    // data source was registered.
    void UnregisterDataSource(in nsIRDFDataSource aDataSource);

    // Get the <i>named data source</i> corresponding to the URI. If a data
    // source has been registered via <tt>RegisterDataSource()</tt>, that
    // data source will be returned.
    //
    // If no data source is currently
    // registered for the specified URI, and a data source <i>constructor</i>
    // function has been registered via <tt>RegisterDatasourceConstructor()</tt>,
    // the RDF service will call the constructor to attempt to construct a
    // new data source. If construction is successful, the data source will
    // be initialized via <tt>nsIRDFDataSource::Init()</tt>.
    nsIRDFDataSource GetDataSource(in string aURI);
};

%{C++
extern nsresult
NS_NewRDFService(nsIRDFService** result);
%}

