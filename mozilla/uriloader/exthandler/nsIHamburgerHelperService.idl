/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla browser.
 *
 * The Initial Developer of the Original Code is Mozilla.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Myk Melez <myk@mozilla.org>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIHandlerInfo;
interface nsIHandlerApp;

[scriptable, uuid(7c754635-139b-4d80-894e-6c71594ceb44)]
interface nsIHamburgerHelperService : nsISupports
{
  /**
   * Set the preferred handler for a given content type.
   *
   * @param aContentType      {nsIHandlerInfo}  the content type
   * @param aPreferredHandler {nsIHandlerApp}   the preferred handler
   */
  void setPreferredHandler(in nsIHandlerInfo aContentType,
                           in nsIHandlerApp aPreferredHandler);

  /**
   * Set the preferred action for a given content type.
   *
   * @param aContentType      {nsIHandlerInfo}  the content type
   * @param aPreferredAction  {integer}         the preferred action
   *        (one of the constants defined in nsIHandlerInfo)
   */
  void setPreferredAction(in nsIHandlerInfo aContentType,
                          in long aPreferredAction);

  /**
   * Set the "always ask" flag for a given content type, which indicates
   * whether or not to always prompt the user before handling the type.
   *
   * @param aContentType  {nsIHandlerInfo}  the content type
   * @param aAlwaysAsk    {boolean}         whether or not to always ask
   */
  void setAlwaysAsk(in nsIHandlerInfo aContentType, in boolean aAlwaysAsk);

  /**
   * Add a handler to the list of possible handlers for the given content type.
   *
   * @param aContentType      {nsIHandlerInfo}  the content type
   * @param aPossibleHandler  {nsIHandlerApp}   the possible handler
   */
  void addPossibleHandler(in nsIHandlerInfo aContentType,
                          in nsIHandlerApp aPossibleHandler);

  /**
   * Remove a handler from the list of possible handlers for the given content
   * type.
   *
   * @param aContentType      {nsIHandlerInfo}  the content type
   * @param aPossibleHandler  {nsIHandlerApp}   the possible handler
   */
  void removePossibleHandler(in nsIHandlerInfo aContentType,
                             in nsIHandlerApp aPossibleHandler);
};
