/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Blake Ross <blaker@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIWebProgressListener2.idl"

interface nsIURI;
interface nsIObserver;
interface nsIWebBrowserPersist;
interface nsIMIMEInfo;

[scriptable, uuid(4af66079-938d-4093-9cc4-561dac709c7b)]
interface nsITransfer : nsIWebProgressListener2 {

    /**
     * Initializes the transfer with certain properties.  This function must
     * be called prior to accessing any properties on this interface.
     *
     * @param aSource The source URI of the transfer.
     *
     * @param aTarget The target URI of the transfer.
     *
     * @param aDisplayName The user-readable description of the transfer.
     *
     * @param aMIMEInfo The MIME info associated with the target,
     *                  including MIME type and helper app when appropriate.
     *                  This parameter is optional.
     *
     * @param aPersist The "persist" used for this transfer.  If set,
     *                 the manager will set its listener to the transfer item
     *                 and use it for cancellation.  If not set, the client
     *                 is expected to set the transfer item as the listener on
     *                 whatever transfer component is being used, and to
     *                 set an observer on the transfer item that listens for
     *                 the "oncancel" topic and cancels the transfer.
     */
    void init(in nsIURI aSource,
              in nsIURI aTarget,
              in wstring aDisplayName,
              in nsIMIMEInfo aMIMEInfo,
              in long long startTime,
              in nsIWebBrowserPersist aPersist);

    /**
     * If set, receives notifications of events like cancel ("oncancel").
     * Must be set if no persist object is specified (see above).
     */
    attribute nsIObserver observer;
};

%{C++
/**
 * A component with this contract ID will be created each time a download is
 * started, and nsITransfer::Init will be called on it and an observer will be set.
 *
 * Notifications of the download progress will happen via
 * nsIWebProgressListener.
 *
 * If nsIObserver is implemented, the component may get a notification with
 * topic "temp-file" and an nsILocalFile instance as subject, which indicates
 * the location of a temporary file; i.e. a file in which the received data will
 * be stored, but which is not equal to the target file.
 *
 * INTERFACES THAT MUST BE IMPLEMENTED:
 *   nsITransfer
 *   nsIWebProgressListener
 *
 * INTERFACES THAT MAY BE IMPLEMENTED:
 *   nsIObserver
 */
#define NS_TRANSFER_CONTRACTID "@mozilla.org/transfer;1"
%}
