/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is
 *  Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir.vukicevic@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(44fc1d3b-dc91-4d17-8bc5-2069d8fd3cca)]
interface mozIStorageValueArray : nsISupports {

  const long VALUE_TYPE_NULL = 0;
  const long VALUE_TYPE_INTEGER = 1;
  const long VALUE_TYPE_FLOAT = 2;
  const long VALUE_TYPE_TEXT = 3;
  const long VALUE_TYPE_BLOB = 4;

  /**
   * numColumns
   *
   * number of columns in the array
   */
  readonly attribute unsigned long numColumns;

  long getTypeOfIndex (in unsigned long aIndex);

  /* Due to SQLite's type conversion rules, any of these is valid */
  
  long getAsInt32(in unsigned long aIndex);
  long long getAsInt64(in unsigned long aIndex);
  double getAsDouble(in unsigned long aIndex);
  string getAsCString(in unsigned long aIndex);
  AUTF8String getAsUTF8String(in unsigned long aIndex);
  AString getAsString(in unsigned long aIndex);
  void getAsBlob(in unsigned long aIndex, [array,size_is(aDataSize)] out octet aData, out unsigned long aDataSize);
  boolean getIsNull (in unsigned long aIndex);

  /* XXX handle blobs! */

  /* Native stuff */
  [notxpcom] long asInt32(in unsigned long aIndex);
  [notxpcom] long long asInt64(in unsigned long aIndex);
  [notxpcom] double asDouble(in unsigned long aIndex);
  [notxpcom] string asSharedCString(in unsigned long aIndex, out unsigned long aLength);
  [notxpcom] wstring asSharedWString(in unsigned long aIndex, out unsigned long aLength);

  [noscript] void asSharedBlob(in unsigned long aIndex, [shared] out voidPtr aData, out unsigned long aDataSize);

  [notxpcom] boolean isNull(in unsigned long aIndex);
};
