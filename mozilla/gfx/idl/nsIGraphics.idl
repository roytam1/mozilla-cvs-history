/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *   Patrick C. Beard <beard@netscape.com>
 */

#include "nsISupports.idl"

typedef unsigned long nscolor;
typedef long nscoord;

/**
 * Simplified graphics interface for JS rendering.
 */
[scriptable, uuid(812EAE54-1DD2-11B2-B17B-D0ACC700F975)]
interface nsIGraphics : nsISupports
{
	/**
	 * The color used to paint with.
	 */
	attribute nscolor color;
    
    /**
     * Clipping.
     */
    void clipRect(in nscoord x, in nscoord y, in nscoord width, in nscoord height);
    
    /**
     * Primitives.
     */
    void drawLine(in nscoord x1, in nscoord y1, in nscoord x2, in nscoord y2);

    void drawRect(in nscoord x, in nscoord y, in nscoord width, in nscoord height);
    void fillRect(in nscoord x, in nscoord y, in nscoord width, in nscoord height);
    void invertRect(in nscoord x, in nscoord y, in nscoord width, in nscoord height);

    void drawEllipse(in nscoord x, in nscoord y, in nscoord width, in nscoord height);
    void fillEllipse(in nscoord x, in nscoord y, in nscoord width, in nscoord height);
    void invertEllipse(in nscoord x, in nscoord y, in nscoord width, in nscoord height);

    void drawArc(in nscoord x, in nscoord y, in nscoord width, in nscoord height, in float startAngle, in float endAngle);
    void fillArc(in nscoord x, in nscoord y, in nscoord width, in nscoord height, in float startAngle, in float endAngle);
    void invertArc(in nscoord x, in nscoord y, in nscoord width, in nscoord height, in float startAngle, in float endAngle);

	
    void drawPolygon(in unsigned long count, [array, size_is(count)] in long points);
    void fillPolygon(in unsigned long count, [array, size_is(count)] in long points);
    void invertPolygon(in unsigned long count, [array, size_is(count)] in long points);

	void drawString(in wstring text, in nscoord x, in nscoord y);
	
	void setFont(in wstring name, in nscoord size);
    
	/**
	 * Stack of graphics states.
	 */
    void gsave();
    void grestore();
};
