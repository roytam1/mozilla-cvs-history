/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * Contributor(s): Jungshik Shin <jshin@mailaps.org> (Original developer)
 *
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

 /*========================================================
  This file contains  a precompiled CCMap for a class of Unicode
  characters (blank_glyph) to be identified quickly by Mozilla. 
  It was generated  by  ccmapbin.pl which you can find  under 
  mozilla/intl/unicharutil/tools.

  Enumerated below are characters included in the precompiled CCMap
  which is human-readable but not so human-friendly.  If you 
  needs to modify the list of characters belonging to "blank_glyph",
  you have to make a new file (with the name of your choice)
  listing characters (one character per line) you want to put 
  into "blank_glyph" in the format

         0xuuuu // comment

  In addition, the input file can have the following optional lines that
  read

      CLASS::blank_glyph
      DESCRIPTION:: description of a character class 
      FILE:: mozilla source file to include output files
      

  Then, run the following in the current directory.

    perl ccmapbin.pl input_file [blank_glyph] 

  which will generate blank_glyph.ccmap.

  (see bug 180266 and bug 167136)

 */


/*
   CLASS:: blank_glyph

   0X3000 : IDEOGRAPHIC SPACE
   0X3164 : HANGUL COMPATIBILITY JAMO FILLER
   0X00A0 : NO-BREAK SPACE
   0X0020 : SPACE
   0X115F : HANGUL LEADING CONSONANT FILLER
   0X1160 : HANGUL VOWEL FILLER
   0XFEFF : BYTE ORDER MARK^L
   0XFFA0 : HALFWIDTH HANGUL FILLER
   0XFFF9 : INTERLINEAR ANNOTATION ANCHOR
   0XFFFA : INTERLINEAR ANNOTATION SEPARATOR
   0XFFFB : INTERLINEAR ANNOTATION TERMINATOR
   0X2000 : EN QUAD
   0X2001 : EM QUAD
   0X2002 : EN SPACE
   0X2003 : EM SPACE
   0X2004 : THREE-PER-EM SPACE
   0X2005 : FOUR-PER-EM SPACE
   0X2006 : SIX-PER-EM SPACE
   0X2007 : FIGURE SPACE
   0X2008 : PUNCTUATION SPACE
   0X2009 : THIN SPACE
   0X200A : HAIR SPACE
   0X200B : ZERO WIDTH SPACE
   0X200C : ZERO WIDTH NON-JOINER
   0X200D : ZERO WIDTH JOINER
   0X200E : LEFT-TO-RIGHT MARK
   0X200F : RIGHT-TO-LEFT MARK
   0X202A : LEFT-TO-RIGHT EMBEDDING
   0X202B : RIGHT-TO-LEFT EMBEDDING
   0X202C : POP DIRECTIONAL FORMATTING
   0X202D : LEFT-TO-RIGHT OVERRIDE
   0X202E : RIGHT-TO-LEFT OVERRIDE
   0X202F : NARROW NO-BREAK SPACE
*/

#if (defined(IS_LITTLE_ENDIAN) || ALU_SIZE == 16)
// Precompiled CCMap for Big Endian(16bit)/Little  Endian(16/32/64bit) 
/* 0000 */ 0x0030,0x0050,0x0070,0x0090,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x00C0,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0040,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0020,0x0060,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0060 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x8000,0x0001,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0070 */ 0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0080 */ 0xFFFF,0x0000,0xFC00,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0090 */ 0x00A0,0x00B0,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 00a0 */ 0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00b0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0010,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00c0 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x00D0,0x00E0,
/* 00d0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8000,
/* 00e0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0E00,
#elif (ALU_SIZE == 32)
// Precompiled CCMap for  Big Endian(32bit)
/* 0000 */ 0x0030,0x0050,0x0070,0x0090,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x00C0,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0040,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0020,0x0060,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0060 */ 0x0000,0x0000,0x0000,0x0000,0x8000,0x0000,0x0000,0x0001,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0070 */ 0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0080 */ 0x0000,0xFFFF,0x0000,0xFC00,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0090 */ 0x00A0,0x00B0,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 00a0 */ 0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00b0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0010,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00c0 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x00D0,0x00E0,
/* 00d0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8000,0x0000,
/* 00e0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0001,0x0000,0x0000,0x0E00,0x0000,
#elif (ALU_SIZE == 64)
// Precompiled CCMap for Big Endian(64bit)
/* 0000 */ 0x0030,0x0050,0x0070,0x0090,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x00C0,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0040,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0020,0x0060,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0060 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x8000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0070 */ 0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0080 */ 0x0000,0xFC00,0x0000,0xFFFF,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0090 */ 0x00A0,0x00B0,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 00a0 */ 0x0000,0x0000,0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00b0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0010,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 00c0 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x00D0,0x00E0,
/* 00d0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x8000,0x0000,0x0000,0x0000,
/* 00e0 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0001,0x0000,0x0000,0x0E00,0x0000,0x0000,0x0000,
#else
#error "We don't support this architecture."
#endif

