/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code.
 *
 * Contributor(s): Jungshik Shin <jshin@mailaps.org> (Original developer)
 *
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

 /*========================================================
  This file contains  a precompiled CCMap for a class of Unicode
  characters (dbyte_special_chars) to be identified quickly by Mozilla. 
  It was generated  by  ccmapbin.pl which you can find  under 
  mozilla/intl/unicharutil/tools.

  Enumerated below are characters included in the precompiled CCMap
  which is human-readable but not so human-friendly.  If you 
  needs to modify the list of characters belonging to "dbyte_special_chars",
  you have to make a new file (with the name of your choice)
  listing characters (one character per line) you want to put 
  into "dbyte_special_chars" in the format

         0xuuuu // comment

  In addition, the input file can have the following optional lines that
  read

      CLASS::dbyte_special_chars
      DESCRIPTION:: description of a character class 
      FILE:: mozilla source file to include output files
      

  Then, run the following in the current directory.

    perl ccmapbin.pl input_file [dbyte_special_chars] 

  which will generate dbyte_special_chars.ccmap.

  (see bug 180266 and bug 167136)

 */


/*

   0X0152 : LATIN CAPITAL LIGATURE OE 
   0X0153 : LATIN SMALL LIGATURE OE 
   0X0160 : LATIN CAPITAL LETTER S WITH CARON 
   0X0161 : LATIN SMALL LETTER S WITH CARON 
   0X0178 : LATIN CAPITAL LETTER Y WITH DIAERESIS 
   0X017D : LATIN CAPITAL LETTER Z WITH CARON 
   0X017E : LATIN SMALL LETTER Z WITH CARON 
   0X0192 : LATIN SMALL LETTER F WITH HOOK 
   0X02C6 : MODIFIER LETTER CIRCUMFLEX ACCENT 
   0X02DC : SMALL TILDE 
   0X2013 : EN DASH 
   0X2018 : LEFT SINGLE QUOTATION MARK 
   0X2019 : RIGHT SINGLE QUOTATION MARK 
   0X201A : SINGLE LOW-9 QUOTATION MARK 
   0X201C : LEFT DOUBLE QUOTATION MARK 
   0X201D : RIGHT DOUBLE QUOTATION MARK 
   0X201E : DOUBLE LOW-9 QUOTATION MARK 
   0X2020 : DAGGER 
   0X2021 : DOUBLE DAGGER 
   0X2022 : BULLET 
   0X2026 : HORIZONTAL ELLIPSIS 
   0X2030 : PER MILLE SIGN 
   0X2039 : SINGLE LEFT-POINTING ANGLE QUOTATION MARK 
   0X203A : SINGLE RIGHT-POINTING ANGLE QUOTATION MARK 
   0X20AC : EURO SIGN 
   0X2122 : TRADE MARK SIGN 
*/

#if (defined(IS_LITTLE_ENDIAN) || ALU_SIZE == 16)
// Precompiled CCMap for Big Endian(16bit)/Little  Endian(16/32/64bit) 
/* 0000 */ 0x0030,0x0010,0x0060,0x0010,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0020,0x0040,0x0050,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x000C,0x0003,0x6100,
           0x0000,0x0004,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0040,0x1000,0x0000,0x0000,
/* 0060 */ 0x0070,0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0070 */ 0x0000,0x7708,0x0047,0x0601,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x1000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0080 */ 0x0000,0x0000,0x0004,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
#elif (ALU_SIZE == 32)
// Precompiled CCMap for  Big Endian(32bit)
/* 0000 */ 0x0030,0x0010,0x0060,0x0010,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0020,0x0040,0x0050,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0000,0x0000,0x0000,0x000C,0x0000,0x6100,0x0003,
           0x0004,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x1000,0x0040,0x0000,0x0000,
/* 0060 */ 0x0070,0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0070 */ 0x7708,0x0000,0x0601,0x0047,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x1000,0x0000,0x0000,0x0000,0x0000,
/* 0080 */ 0x0000,0x0000,0x0000,0x0004,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
#elif (ALU_SIZE == 64)
// Precompiled CCMap for Big Endian(64bit)
/* 0000 */ 0x0030,0x0010,0x0060,0x0010,0x0010,0x0010,0x0010,0x0010,
           0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,0x0010,
/* 0010 */ 0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0020 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0030 */ 0x0020,0x0040,0x0050,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0040 */ 0x0000,0x0000,0x0000,0x0000,0x6100,0x0003,0x000C,0x0000,
           0x0000,0x0000,0x0004,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0050 */ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x0040,
/* 0060 */ 0x0070,0x0080,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
           0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,0x0020,
/* 0070 */ 0x0601,0x0047,0x7708,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x1000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
/* 0080 */ 0x0000,0x0004,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
           0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
#else
#error "We don't support this architecture."
#endif

