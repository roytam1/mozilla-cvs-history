/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * IBM Corporation.  Portions created by IBM are
 * Copyright (C) 2000 IBM Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *
 */

#ifndef nsBidiOptions_h___
#define nsBidiOptions_h___

#include "nscore.h"

// --------------------------------------------------
// IBMBIDI 
// --------------------------------------------------
//
// These values are shared with Preferences dialog
//  ------------------
//  If Pref values are to be changed
//  in the XUL file of Prefs. the values
//  Must be changed here too..
//	------------------
//
#define IBMBIDI_TEXTDIRECTION_STR				"bidi.direction"
#define IBMBIDI_TEXTTYPE_STR						"bidi.texttype"
#define IBMBIDI_CONTROLSTEXTMODE_STR		"bidi.controlstextmode"
#define IBMBIDI_CLIPBOARDTEXTMODE_STR		"bidi.clipboardtextmode"
#define IBMBIDI_NUMERAL_STR							"bidi.numeral"
#define IBMBIDI_SUPPORTMODE_STR					"bidi.support"
#define IBMBIDI_CHARSET_STR							"bidi.characterset"

#define IBMBIDI_TEXTDIRECTION				1
#define IBMBIDI_TEXTTYPE						2
#define IBMBIDI_CONTROLSTEXTMODE		3
#define IBMBIDI_CLIPBOARDTEXTMODE		4
#define IBMBIDI_NUMERAL							5
#define IBMBIDI_SUPPORTMODE					6
#define IBMBIDI_CHARSET							7

//	------------------
// 	Text Direction
//	------------------
//	bidi.direction
#define IBMBIDI_TEXTDIRECTION_LTR			1	// 	1 = directionLTRBidi *
#define IBMBIDI_TEXTDIRECTION_RTL			2	//	2 = directionRTLBidi
//	------------------
// 	Text Type
//	------------------
//	bidi.texttype
#define IBMBIDI_TEXTTYPE_CHARSET			1	// 	1 = charsettexttypeBidi *
#define IBMBIDI_TEXTTYPE_LOGICAL			2	//	2 = logicaltexttypeBidi
#define IBMBIDI_TEXTTYPE_VISUAL				3	//	3 = visualtexttypeBidi
//	------------------
// 	Controls Text Mode
//	------------------
//	bidi.controlstextmode
#define IBMBIDI_CONTROLSTEXTMODE_LOGICAL	1	// 	1 = logicalcontrolstextmodeBidiCmd
#define IBMBIDI_CONTROLSTEXTMODE_VISUAL		2	//	2 = visiualcontrolstextmodeBidi
#define IBMBIDI_CONTROLSTEXTMODE_CONTAINER	3	//	3 = containercontrolstextmodeBidi *
//	------------------
// 	Clipboard Text Mode
//	------------------
//	bidi.clipboardtextmode
#define IBMBIDI_CLIPBOARDTEXTMODE_LOGICAL	1	// 	1 = logicalclipboardtextmodeBidi
#define IBMBIDI_CLIPBOARDTEXTMODE_VISUAL	2	//	2 = visiualclipboardtextmodeBidi
#define IBMBIDI_CLIPBOARDTEXTMODE_SOURCE	3	//	3 = sourceclipboardtextmodeBidi *
//	------------------
// 	Numeral Style
//	------------------
//	bidi.numeral
#define IBMBIDI_NUMERAL_REGULAR				1	// 	1 = regularcontextnumeralBidi *
#define IBMBIDI_NUMERAL_HINDICONTEXT		2	//	2 = hindicontextnumeralBidi
#define IBMBIDI_NUMERAL_ARABIC				3	//	3 = arabicnumeralBidi
#define IBMBIDI_NUMERAL_HINDI				4	//	4 = hindinumeralBidi
//	------------------
// 	Support Mode
//	------------------
//	bidi.support
#define IBMBIDI_SUPPORTMODE_MOZILLA			1	// 	1 = mozillaBidisupport *
#define IBMBIDI_SUPPORTMODE_OSBIDI			2	//	2 = OsBidisupport
#define IBMBIDI_SUPPORTMODE_DISABLE			3	//	3 = disableBidisupport
//	------------------
// 	Charset Mode
//	------------------
//	bidi.characterset
#define IBMBIDI_CHARSET_BIDI				1	// 	1 = doccharactersetBidi *
#define IBMBIDI_CHARSET_DEFAULT				2	//	2 = defaultcharactersetBidi

struct nsBidiOptions
{
  PRUint8 mdirection;
  PRUint8 mtexttype;
  PRUint8 mcontrolstextmode;
  PRUint8 mclipboardtextmode;
  PRUint8 mnumeral;
  PRUint8 msupport;
  PRUint8 mcharacterset;
};

/* Constants related to the position of numerics in the codepage */
#define START_ARABIC_DIGITS     0x30
#define END_ARABIC_DIGITS       0x39
#define START_HINDI_DIGITS      0xB0
#define END_HINDI_DIGITS        0xB9
#define DIGIT_INCREMENT         0x80

#define BIDI_START_HINDI_DIGITS   0x0660
#define BIDI_END_HINDI_DIGITS     0x0669
#define BIDI_START_ARABIC_DIGITS  0x0030
#define BIDI_END_ARABIC_DIGITS    0x0039
#define BIDI_DIGIT_INCREMENT      0x0630
/* removed Use IBMBIDI_NUMERAL_*
#define BDA_NUMERALS_NOMINAL    IBMBIDI_NUMERAL_ARABIC // 0x00000000
#define BDA_NUMERALS_NATIONAL   IBMBIDI_NUMERAL_HINDI // 0x00002000
#define BDA_NUMERALS_CONTEXTUAL IBMBIDI_NUMERAL_HINDICONTEXT // 0x00003000
*/
// GCP_NUMERICSLATIN
// GCP_NUMERICSLOCAL

// mameen : we need to convert from logical to visual
// if second char is 0x0000 then there is no second character
/*
static PRUint16 f864tUC[][2]={
	{0x0000,0x0000},	{0x0001,0x0000},	{0x266a,0x0000},	{0x000e,0x0000},
	{0x000f,0x0000},	{0x00cd,0x0000},	{0x00ba,0x0000},	{0x00ce,0x0000},
	{0x00b9,0x0000},	{0x00cb,0x0000},	{0x00cc,0x0000},	{0x00ca,0x0000},
	{0x00bb,0x0000},	{0x00c9,0x0000},	{0x00c8,0x0000},	{0x00bc,0x0000},
	{0x0010,0x0000},	{0x0011,0x0000},	{0x0012,0x0000},	{0x0013,0x0000},
	{0x0014,0x0000},	{0x0015,0x0000},	{0x0016,0x0000},	{0x0017,0x0000},
	{0x0018,0x0000},	{0x0019,0x0000},	{0x001a,0x0000},	{0x001b,0x0000},
	{0x001c,0x0000},	{0x001d,0x0000},	{0x001e,0x0000},	{0x001f,0x0000},
	{0x0020,0x0000},	{0x0021,0x0000},	{0x0022,0x0000},	{0x0023,0x0000},
	{0x0024,0x0000},	{0x0025,0x0000},	{0x0026,0x0000},	{0x0027,0x0000},
	{0x0028,0x0000},	{0x0029,0x0000},	{0x002a,0x0000},	{0x002b,0x0000},
	{0x002c,0x0000},	{0x002d,0x0000},	{0x002e,0x0000},	{0x002f,0x0000},
	{0x0030,0x0000},	{0x0031,0x0000},	{0x0032,0x0000},	{0x0033,0x0000},
	{0x0034,0x0000},	{0x0035,0x0000},	{0x0036,0x0000},	{0x0037,0x0000},
	{0x0038,0x0000},	{0x0039,0x0000},	{0x003a,0x0000},	{0x003b,0x0000},
	{0x003c,0x0000},	{0x003d,0x0000},	{0x003e,0x0000},	{0x003f,0x0000},
	{0x0040,0x0000},	{0x0041,0x0000},	{0x0042,0x0000},	{0x0043,0x0000},
	{0x0044,0x0000},	{0x0045,0x0000},	{0x0046,0x0000},	{0x0047,0x0000},
	{0x0048,0x0000},	{0x0049,0x0000},	{0x004a,0x0000},	{0x004b,0x0000},
	{0x004c,0x0000},	{0x004d,0x0000},	{0x004e,0x0000},	{0x004f,0x0000},
	{0x0050,0x0000},	{0x0051,0x0000},	{0x0052,0x0000},	{0x0053,0x0000},
	{0x0054,0x0000},	{0x0055,0x0000},	{0x0056,0x0000},	{0x0057,0x0000},
	{0x0058,0x0000},	{0x0059,0x0000},	{0x005a,0x0000},	{0x005b,0x0000},
	{0x005c,0x0000},	{0x005d,0x0000},	{0x005e,0x0000},	{0x005f,0x0000},
	{0x0060,0x0000},	{0x0061,0x0000},	{0x0062,0x0000},	{0x0063,0x0000},
	{0x0064,0x0000},	{0x0065,0x0000},	{0x0066,0x0000},	{0x0067,0x0000},
	{0x0068,0x0000},	{0x0069,0x0000},	{0x006a,0x0000},	{0x006b,0x0000},
	{0x006c,0x0000},	{0x006d,0x0000},	{0x006e,0x0000},	{0x006f,0x0000},
	{0x0070,0x0000},	{0x0071,0x0000},	{0x0072,0x0000},	{0x0073,0x0000},
	{0x0074,0x0000},	{0x0075,0x0000},	{0x0076,0x0000},	{0x0077,0x0000},
	{0x0078,0x0000},	{0x0079,0x0000},	{0x007a,0x0000},	{0x007b,0x0000},
	{0x007c,0x0000},	{0x007d,0x0000},	{0x007e,0x0000},	{0x007f,0x0000},
	{0x00f8,0x0000},	{0x00fa,0x0000},	{0x00f9,0x0000},	{0x00fb,0x0000},
	{0x00b1,0x0000},	{0x00c4,0x0000},	{0x00b3,0x0000},	{0x00c5,0x0000},
	{0x00b4,0x0000},	{0x00c2,0x0000},	{0x00c3,0x0000},	{0x00c1,0x0000},
	{0x00bf,0x0000},	{0x00da,0x0000},	{0x00c0,0x0000},	{0x00d9,0x0000},
	{0x00e1,0x0000},	{0x00ec,0x0000},	{0x00ed,0x0000},	{0x00f1,0x0000},
	{0x00ab,0x0000},	{0x00ac,0x0000},	{0x00f7,0x0000},	{0x00ae,0x0000},
	{0x00af,0x0000},	{0x0644,0x0623},	{0x0644,0x0623},	{0x0000,0x0000},
	{0x0000,0x0000},	{0x0644,0x0627},	{0x0644,0x0627},	{0x200a,0x0000},
	{0x0000,0x0000},	{0x0000,0x0000},	{0x0622,0x0000},	{0x009c,0x0000},
	{0x0000,0x0000},	{0x0623,0x0000},	{0x0000,0x0000},	{0x00ee,0x0000},
	{0x0627,0x0000},	{0x0628,0x0000},	{0x062a,0x0000},	{0x062b,0x0000},
	{0x060c,0x0000},	{0x062c,0x0000},	{0x062d,0x0000},	{0x062e,0x0000},
	{0x0660,0x0000},	{0x0661,0x0000},	{0x0662,0x0000},	{0x0663,0x0000},
	{0x0664,0x0000},	{0x0665,0x0000},	{0x0666,0x0000},	{0x0667,0x0000},
	{0x0668,0x0000},	{0x0669,0x0000},	{0x0641,0x0000},	{0x061b,0x0000},
	{0x0633,0x0000},	{0x0634,0x0000},	{0x0635,0x0000},	{0x061f,0x0000},
	{0x009b,0x0000},	{0x0621,0x0000},	{0x0622,0x0000},	{0x0623,0x0000},
	{0x0624,0x0000},	{0x0639,0x0000},	{0x0626,0x0000},	{0x0627,0x0000},
	{0x0628,0x0000},	{0x0629,0x0000},	{0x062a,0x0000},	{0x062b,0x0000},
	{0x062c,0x0000},	{0x062d,0x0000},	{0x062e,0x0000},	{0x062f,0x0000},
	{0x0630,0x0000},	{0x0631,0x0000},	{0x0632,0x0000},	{0x0633,0x0000},
	{0x0634,0x0000},	{0x0635,0x0000},	{0x0636,0x0000},	{0x0637,0x0000},
	{0x0638,0x0000},	{0x0639,0x0000},	{0x063a,0x0000},	{0x007c,0x0000},
	{0x00dc,0x0000},	{0x00f6,0x0000},	{0x00d7,0x0000},	{0x0639,0x0000},
	{0x0640,0x0000},	{0x0641,0x0000},	{0x0642,0x0000},	{0x0643,0x0000},
	{0x0644,0x0000},	{0x0645,0x0000},	{0x0646,0x0000},	{0x0647,0x0000},
	{0x0648,0x0000},	{0x0649,0x0000},	{0x064a,0x0000},	{0x0636,0x0000},
	{0x0639,0x0000},	{0x063a,0x0000},	{0x063a,0x0000},	{0x0645,0x0000},
	{0x0651,0x0640},	{0x0651,0x0000},	{0x0646,0x0000},	{0x0647,0x0000},
	{0x0647,0x0000},	{0x0649,0x0000},	{0x064a,0x0000},	{0x063a,0x0000},
	{0x0642,0x0000},	{0x0644,0x0622},	{0x0644,0x0622},	{0x0644,0x0000},
	{0x0643,0x0000},	{0x064a,0x0000},	{0x00fe,0x0000},	{0x00ff,0x0000}
};
*/
// the Array Index = FE_CHAR - FE_TO_06_OFFSET

#define FE_TO_06_OFFSET 0xfe70

static PRUint16  FE_TO_06 [][2] = {
{0x064a,0x0000},{0x064a,0x0640},{0x064c,0x0000},
{0x0000,0x0000},{0x064d,0x0000},{0x0000,0x0000},
{0x064e,0x0000},{0x064e,0x0640},{0x064f,0x0000},
{0x064f,0x0640},{0x0650,0x0000},{0x0650,0x0640},
{0x0651,0x0000},{0x0651,0x0640},{0x0652,0x0000},
{0x0652,0x0640},{0x0621,0x0000},{0x0622,0x0000},
{0x0622,0x0000},{0x0623,0x0000},{0x0623,0x0000},
{0x0624,0x0000},{0x0624,0x0000},{0x0625,0x0000},
{0x0625,0x0000},{0x0626,0x0000},{0x0626,0x0000},
{0x0626,0x0000},{0x0626,0x0000},{0x0627,0x0000},
{0x0627,0x0000},{0x0628,0x0000},{0x0628,0x0000},
{0x0628,0x0000},{0x0628,0x0000},{0x0629,0x0000},
{0x0629,0x0000},{0x062a,0x0000},{0x062a,0x0000},
{0x062a,0x0000},{0x062a,0x0000},{0x062b,0x0000},
{0x062b,0x0000},{0x062b,0x0000},{0x062b,0x0000},
{0x062c,0x0000},{0x062c,0x0000},{0x062c,0x0000},
{0x062c,0x0000},{0x062d,0x0000},{0x062d,0x0000},
{0x062d,0x0000},{0x062d,0x0000},{0x062e,0x0000},
{0x062e,0x0000},{0x062e,0x0000},{0x062e,0x0000},
{0x062f,0x0000},{0x062f,0x0000},{0x0630,0x0000},
{0x0630,0x0000},{0x0631,0x0000},{0x0631,0x0000},
{0x0632,0x0000},{0x0632,0x0000},{0x0633,0x0000},
{0x0633,0x0000},{0x0633,0x0000},{0x0633,0x0000},
{0x0634,0x0000},{0x0634,0x0000},{0x0634,0x0000},
{0x0634,0x0000},{0x0635,0x0000},{0x0635,0x0000},
{0x0635,0x0000},{0x0635,0x0000},{0x0636,0x0000},
{0x0636,0x0000},{0x0636,0x0000},{0x0636,0x0000},
{0x0637,0x0000},{0x0637,0x0000},{0x0637,0x0000},
{0x0637,0x0000},{0x0638,0x0000},{0x0638,0x0000},
{0x0638,0x0000},{0x0638,0x0000},{0x0639,0x0000},
{0x0639,0x0000},{0x0639,0x0000},{0x0639,0x0000},
{0x063a,0x0000},{0x063a,0x0000},{0x063a,0x0000},
{0x063a,0x0000},{0x0641,0x0000},{0x0641,0x0000},
{0x0641,0x0000},{0x0641,0x0000},{0x0642,0x0000},
{0x0642,0x0000},{0x0642,0x0000},{0x0642,0x0000},
{0x0643,0x0000},{0x0643,0x0000},{0x0643,0x0000},
{0x0643,0x0000},{0x0644,0x0000},{0x0644,0x0000},
{0x0644,0x0000},{0x0644,0x0000},{0x0645,0x0000},
{0x0645,0x0000},{0x0645,0x0000},{0x0645,0x0000},
{0x0646,0x0000},{0x0646,0x0000},{0x0646,0x0000},
{0x0646,0x0000},{0x0647,0x0000},{0x0647,0x0000},
{0x0647,0x0000},{0x0647,0x0000},{0x0648,0x0000},
{0x0648,0x0000},{0x0649,0x0000},{0x0649,0x0000},
{0x064a,0x0000},{0x064a,0x0000},{0x064a,0x0000},
{0x064a,0x0000},{0x0644,0x0622},{0x0644,0x0622},
{0x0644,0x0623},{0x0644,0x0623},{0x0644,0x0625},
{0x0644,0x0625},{0x0644,0x0627},{0x0644,0x0627},
{0x0000,0x0000},{0x0000,0x0000},{0x0000,0x0000}
};

#define IS_DIACRITIC(u)	( \
	( (u) >= 0x0591 && (u) <= 0x05A1) || ( (u) >= 0x05A3 && (u) <= 0x05B9) \
		|| ( (u) >= 0x05BB && (u) <= 0x05BD) || ( (u) == 0x05BF) || ( (u) == 0x05C1) \
		|| ( (u) == 0x05C2) || ( (u) == 0x05C4) \
		|| ( (u) >= 0x064B && (u) <= 0x0652) || ( (u) == 0x0670) \
		|| ( (u) >= 0x06D7 && (u) <= 0x06E4) || ( (u) == 0x06E7) || ( (u) == 0x06E8) \
		|| ( (u) >= 0x06EA && (u) <= 0x06ED) )

#define IS_HINDI_DIGIT(u)		( ( (u) >= BIDI_START_HINDI_DIGITS )	&& ( (u) <= BIDI_END_HINDI_DIGITS ) )
#define IS_ARABIC_DIGIT(u)	( ( (u) >= BIDI_START_ARABIC_DIGITS ) && ( (u) <= BIDI_END_ARABIC_DIGITS ) )
#define IS_HEBREW_CHAR(c) ((0x0590 <= (c)) && ((c)<= 0x05FF))
#define IS_06_CHAR(c) ((0x0600 <= (c)) && ((c)<= 0x06FF))
#define IS_FE_CHAR(c) ((0xfe70 <= (c)) && ((c)<= 0xfeFF))
//#define IS_ARABIC_CHAR(c) (IS_06_CHAR(c) && IS_FE_CHAR(c))
#define IS_ARABIC_CHAR(c) ((0x0600 <= (c)) && ((c)<= 0x06FF))

#define CHAR_IS_HEBREW(c) ((0x0590 <= (c)) && ((c)<= 0x05FF))
#define CHAR_IS_ARABIC(c) ((0x0600 <= (c)) && ((c)<= 0x06FF))

#ifdef ADD_GLYPH
#undef ADD_GLYPH
#endif
#define ADD_GLYPH(map, g) (map)[(g) >> 3] |= (1 << ((g) & 7))

#ifdef FONT_HAS_GLYPH
#undef FONT_HAS_GLYPH
#endif
#define FONT_HAS_GLYPH(map, g) (((map)[(g) >> 3] >> ((g) & 7)) & 1)

#define HAS_ARABIC_PRESENTATION_FORM_B(font) (FONT_HAS_GLYPH((font)->mMap, 0xFE81))
#define HAS_HEBREW_GLYPH(font)               (FONT_HAS_GLYPH((font)->mMap, 0x05D0))

//============ Begin Arabic Basic to Presentation Form B Code ============

static PRUint8 gArabicMap1[] = {
            0x81, 0x83, 0x85, 0x87, 0x89, 0x8D, // 0622-0627
0x8F, 0x93, 0x95, 0x99, 0x9D, 0xA1, 0xA5, 0xA9, // 0628-062F
0xAB, 0xAD, 0xAF, 0xB1, 0xB5, 0xB9, 0xBD, 0xC1, // 0630-0637
0xC5, 0xC9, 0xCD                                // 0638-063A
};

static PRUint8 gArabicMap2[] = {
      0xD1, 0xD5, 0xD9, 0xDD, 0xE1, 0xE5, 0xE9, // 0641-0647
0xED, 0xEF, 0xF1                                // 0648-064A
};

#define PresentationFormB(c, form)                           \
  (((0x0622<=(c)) && ((c)<=0x063A)) ?                        \
    (0xFE00|(gArabicMap1[(c)-0x0622] + (form))) :            \
     (((0x0641<=(c)) && ((c)<=0x064A)) ?                     \
      (0xFE00|(gArabicMap2[(c)-0x0641] + (form))) : (c)))

static enum {
   eIsolated,  // or Char N
   eFinal,     // or Char R
   eInitial,   // or Char L
   eMedial,    // or Char M
} eArabicForm;
static enum {
   eTr = 0, // Transparent
   eRJ = 1, // Right-Joining
   eLJ = 2, // Left-Joining
   eDJ = 3, // Dual-Joining
   eNJ  = 4,// Non-Joining
   eJC = 7, // Joining Causing
   eRightJCMask = 2, // bit of Right-Join Causing 
   eLeftJCMask = 1   // bit of Left-Join Causing 
} eArabicJoiningClass;

#define RightJCClass(j) (eRightJCMask&(j))
#define LeftJCClass(j)  (eLeftJCMask&(j))

#define DecideForm(jl,j,jr)                                 \
  (((eRJ == (j)) && RightJCClass(jr)) ? eFinal              \
                                      :                     \
   ((eDJ == (j)) ?                                          \
    ((RightJCClass(jr)) ?                                   \
     (((LeftJCClass(jl)) ? eMedial                          \
                         : eFinal))                         \
                        :                                   \
     (((LeftJCClass(jl)) ? eInitial                         \
                         : eIsolated))                      \
    )                     : eIsolated))                     \
  

static PRInt8 gJoiningClass[] = {
          eRJ, eRJ, eRJ, eRJ, eDJ, eRJ, // 0620-0627
eDJ, eRJ, eDJ, eDJ, eDJ, eDJ, eDJ, eRJ, // 0628-062F
eRJ, eRJ, eRJ, eDJ, eDJ, eDJ, eDJ, eDJ, // 0630-0637
eDJ, eDJ, eDJ, eNJ, eNJ, eNJ, eNJ, eNJ, // 0638-063F
eJC, eDJ, eDJ, eDJ, eDJ, eDJ, eDJ, eDJ, // 0640-0647
eRJ, eRJ, eDJ, eTr, eTr, eTr, eTr, eTr, // 0648-064F
eTr, eTr, eTr                           // 0650-0652
};

#define GetJoiningClass(c)                   \
  (((0x0622 <= (c)) && ((c) <= 0x0652)) ?    \
       (gJoiningClass[(c) - 0x0622]) :       \
      ((0x200D == (c)) ? eJC : eTr))

static PRUint16 gArabicLigatureMap[] = 
{
0x82DF, // 0xFE82 0xFEDF -> 0xFEF5
0x82E0, // 0xFE82 0xFEE0 -> 0xFEF6
0x84DF, // 0xFE84 0xFEDF -> 0xFEF7
0x84E0, // 0xFE84 0xFEE0 -> 0xFEF8
0x88DF, // 0xFE88 0xFEDF -> 0xFEF9
0x88E0, // 0xFE88 0xFEE0 -> 0xFEFA
0x8EDF, // 0xFE8E 0xFEDF -> 0xFEFB
0x8EE0  // 0xFE8E 0xFEE0 -> 0xFEFC
};


/*
void CopyBidi( nsBidi Source, nsBidi * Dist )
{
	Dist->mdirection				= Source.mdirection;
	Dist->mtexttype					= Source.mtexttype;
	Dist->mcontrolstextmode = Source.mcontrolstextmode;
	Dist->mclipboardtextmode = Source.mclipboardtextmode;
	Dist->mnumeral					= Source.mnumeral;
	Dist->msupport					= Source.msupport;
	Dist->mcharacterset			= Source.mcharacterset;
};
*/


#endif // nsBidiOptions_h___
 