/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is Mozilla Communicator.
 * 
 * The Initial Developer of the Original Code is Netscape Communications
 * Corp.  Portions created by Netscape are Copyright (C) 1999 Netscape 
 * Communications Corp.  All Rights Reserved.
 * 
 * Contributor(s): 
 *   Mike Pinkerton
 */

#include "nsISupports.idl"
#include "nsIFormatConverter.idl"


// these probably shouldn't live here, but in some central repository shared
// by the entire app.


/*! @verbatim */
%{C++
#define kTextMime      "text/plain"
#define kUnicodeMime   "text/unicode"
#define kHTMLMime      "text/html"
#define kAOLMailMime   "AOLMAIL"
#define kPNGImageMime  "image/png"
#define kJPEGImageMime "image/jpg"
#define kGIFImageMime  "image/gif"
#define kFileMime      "application/x-moz-file"
#define kURLMime       "text/x-moz-url"
%}
/*! @endverbatim */

/**
 * nsITransferable interface
 *
 * @author Mike Pinkerton <pinkerton@netscape.com>
 * @version 1.1
 * @see "gfx2"
 */
[scriptable, uuid(d0420dd2-1dd1-11b2-87cd-894b24affa87)]
interface nsITransferable : nsISupports
{
  /**
   * Computes a list of flavors that the transferable can export, either through intrinsic
   * knowledge or output data converters.
   *
   * @param aFlavors An array of strings that contains the supported flavors.
   * @param nFlavors The number of strings in the \a aFlavors array.
   * @note This is a copy of the internal list, so it may be edited w/out affecting the transferable.
   */
  void flavorsTransferableCanExport([array, size_is(nFlavors)] out string aFlavors,
                                    out unsigned long nFlavors);

  /**
   * Given a flavor retrieve the data. 
   *
   * @param  aFlavor The flavor of data to retrieve
   * @param  aData The data. Some variant of class in nsISupportsPrimitives.idl
   * @param  aDataLen The length of the data
   */
  void getTransferData(in string aFlavor, out nsISupports aData, out unsigned long aDataLen);

  /**
   * Returns the best flavor in the transferable, given those that have
   * been added to it with addFlavor()
   *
   * @param  aFlavor The flavor of data that was retrieved
   * @param  aData The data. Some variant of class in nsISupportsPrimitives.idl
   * @param  aDataLen The length of the data
   */
  void getAnyTransferData(out string aFlavor, out nsISupports aData, out unsigned long aDataLen);

  /**
   * Is the data larger than XXXXXX bytes?
   * @attention define "large"
   * @return TRUE if the data is large.
   */
  boolean isLargeDataSet();
  

  ///////////////////////////////
  // Setter part of interface 
  ///////////////////////////////

  /**
   * Computes a list of flavors (mime types) that the transferable can
   * accept into it, either through intrinsic knowledge or input data converters.
   *
   * @param aFlavors An array of strings that contains the supported flavors.
   * @param nFlavors The number of strings in the \a aFlavors array.
   * @note This is a copy of the internal list, so it may be edited w/out affecting the transferable.
   */
  void flavorsTransferableCanImport([array, size_is(nFlavors)] out string aFlavors,
                                    out unsigned long nFlavors);

  /**
   * Sets the data in the transferable with the specified flavor. The transferable
   * will maintain its own copy the data, so it is not necessary to do that beforehand.
   *
   * @param  aFlavor the flavor of data that is being set
   * @param  aData the data, some variant of class in nsISupportsPrimitives.idl
   * @param  aDataLen the length of the data
   */
  void setTransferData(in string aFlavor, in nsISupports aData, in unsigned long aDataLen);

  /**
   * Add the data flavor, indicating that this transferable 
   * can receive this type of flavor
   *
   * @param  aDataFlavor a new data flavor to handle
   */
  void addDataFlavor(in string aDataFlavor);

  /**
   * Removes the data flavor matching the given one (string compare) and the data
   * that goes along with it.
   *
   * @param  aDataFlavor a data flavor to remove
   */
  void removeDataFlavor(in string aDataFlavor);

  attribute nsIFormatConverter converter;

};
