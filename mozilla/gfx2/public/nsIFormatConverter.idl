/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is mozilla.org code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1998-2000 Netscape Communications Corporation.
 * All Rights Reserved.
 * 
 * Contributor(s): 
 *   Mike Pinkerton <pinkerton@netscape.com>
 */

#include "nsISupports.idl"
#include "nsISupportsArray.idl"

/**
 * nsIFormatConverter interface
 *
 * @author Mike Pinkerton <pinkerton@netscape.com>
 * @version 1.1
 */
[scriptable, uuid(ac4bfeac-1dd1-11b2-a070-ef0944f6fe13)]
interface nsIFormatConverter : nsISupports
{  
  /**
   * Get the list of the "input" data flavors (mime types as nsISupportsString),
   * in otherwords, the flavors that this converter can convert "from" (the 
   * incoming data to the converter).
   */
  nsISupportsArray getInputDataFlavors ( ) ;

  /**
   * Get the list of the "output" data flavors (mime types as nsISupportsString),
   * in otherwords, the flavors that this converter can convert "to" (the 
   * outgoing data to the converter).
   *
   * @param  aDataFlavorList fills list with supported flavors
   */
  nsISupportsArray getOutputDataFlavors ( ) ;

  /**
   * Determines whether a converion from one flavor to another is supported
   *
   * @param  aFromFormatConverter flavor to convert from
   * @param  aFromFormatConverter flavor to convert to
   */
  boolean canConvert ( in string aFromDataFlavor, in string aToDataFlavor ) ;

  /**
   * Converts from one flavor to another.
   *
   * @param  aFromFormatConverter flavor to convert from
   * @param  aFromFormatConverter flavor to convert to (destination own the memory)
   * @returns returns NS_OK if it was converted
   */
  void convert ( in string aFromDataFlavor, in nsISupports aFromData, in unsigned long aDataLen,
                 in string aToDataFlavor, out nsISupports aToData, out unsigned long aDataToLen ) ; 

};

