<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Mozilla SVG project.
   -
   - The Initial Developer of the Original Code is
   - Crocodile Clips Ltd.
   - Portions created by the Initial Developer are Copyright (C) 2002
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   
   - Alex Fritze <alex.fritze@crocodile-clips.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!--
     Includes bindings for SVG presentation attributes, see bug#111317.
     Current deficiencies:
     1) Presentation attributes can't be set from JS.
     2) The attributes are mapped into the style-attribute.
     3) We have to implement a separate binding for each svg element
        pending a fix to #41428.
-->

<bindings id="svgBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xbl="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink" >

  <binding id="presAttrs">
    <implementation>
      <constructor>
        this.mapAttribs();
      </constructor>
      <method name="mapAttribs">
        <body>
        dump(this.getAttribute('style'));
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="a" extends="svg:generic">
    <content>
      <svg:g xbl:inherits="style fill fill-opacity fill-rule stroke stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width clip-path clip-rule cursor display filter image-rendering mask opacity pointer-events shape-rendering text-rendering visibility alignment-baseline baseline-shift direction dominant-baseline glyph-orientation-horizontal glyph-orientation-vertical kerning letter-spacing text-anchor text-decoration unicode-bidi word-spacing font-family font-size font-size-adjust font-stretch font-style font-variant font-weight transform" >
        <children/>
      </svg:g>
    </content>
    <implementation>
      <property name="href"
        onget="return this.getAttributeNS('http://www.w3.org/1999/xlink','href');"
      />
      <property name="show"
        onget="return this.getAttributeNS('http://www.w3.org/1999/xlink','show');"
      />
    </implementation>
    <handlers>
      <handler event="mousedown">
        window.open(this.href, this.show=="new" ? "_blank" : "_content", "");
      </handler>
      <handler event="mouseover">
        window.status=this.href;
      </handler>
      <handler event="mouseout">
        window.status=window.defaultStatus;
      </handler>
    </handlers>
  </binding>

  <binding id="circle">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="ellipse">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="g">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility",
               // PresentationAttributes-TextContentElements
                  "alignment-baseline",
                  "baseline-shift",
                  "direction",
                  "dominant-baseline",
                  "glyph-orientation-horizontal",
                  "glyph-orientation-vertical",
                  "kerning",
                  "letter-spacing",
                  "text-anchor",
                  "text-decoration",
                  "unicode-bidi",
                  "word-spacing",
               // PresentationAttributes-FontSpecification
                  "font-family",
                  "font-size",
                  "font-size-adjust",
                  "font-stretch",
                  "font-style",
                  "font-variant",
                  "font-weight"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="line">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="path">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="polygon">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="polyline">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="rect">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="svg">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility",
               // PresentationAttributes-TextContentElements
                  "alignment-baseline",
                  "baseline-shift",
                  "direction",
                  "dominant-baseline",
                  "glyph-orientation-horizontal",
                  "glyph-orientation-vertical",
                  "kerning",
                  "letter-spacing",
                  "text-anchor",
                  "text-decoration",
                  "unicode-bidi",
                  "word-spacing",
               // PresentationAttributes-FontSpecification
                  "font-family",
                  "font-size",
                  "font-size-adjust",
                  "font-stretch",
                  "font-style",
                  "font-variant",
                  "font-weight"                  
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
  <binding id="text">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility",
               // PresentationAttributes-TextContentElements
                  "alignment-baseline",
                  "baseline-shift",
                  "direction",
                  "dominant-baseline",
                  "glyph-orientation-horizontal",
                  "glyph-orientation-vertical",
                  "kerning",
                  "letter-spacing",
                  "text-anchor",
                  "text-decoration",
                  "unicode-bidi",
                  "word-spacing",
               // PresentationAttributes-FontSpecification
                  "font-family",
                  "font-size",
                  "font-size-adjust",
                  "font-stretch",
                  "font-style",
                  "font-variant",
                  "font-weight"                  
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="tspan">
    <implementation>
      <constructor>
        this.mapPresentationAttributes(this.mappedAttributes);
      </constructor>
      <property name="mappedAttributes" readonly="true">
        <getter>
          <![CDATA[
          return [
               // PresentationAttributes-FillStroke
                  "fill",
                  "fill-opacity",
                  "fill-rule",
                  "stroke",
                  "stroke-dasharray",
                  "stroke-dashoffset",
                  "stroke-linecap",
                  "stroke-linejoin",
                  "stroke-miterlimit",
                  "stroke-opacity",
                  "stroke-width",
               // PresentationAttributes-Graphics
                  "clip-path",
                  "clip-rule",
                  "cursor",
                  "display",
                  "filter",
                  "image-rendering",
                  "mask",
                  "opacity",
                  "pointer-events",
                  "shape-rendering",
                  "text-rendering",
                  "visibility",
               // PresentationAttributes-TextContentElements
                  "alignment-baseline",
                  "baseline-shift",
                  "direction",
                  "dominant-baseline",
                  "glyph-orientation-horizontal",
                  "glyph-orientation-vertical",
                  "kerning",
                  "letter-spacing",
                  "text-anchor",
                  "text-decoration",
                  "unicode-bidi",
                  "word-spacing",
               // PresentationAttributes-FontSpecification
                  "font-family",
                  "font-size",
                  "font-size-adjust",
                  "font-stretch",
                  "font-style",
                  "font-variant",
                  "font-weight"
                 ];                  
          ]]>
        </getter>
      </property>
      <method name="mapPresentationAttributes">
        <parameter name="attributes" />
        <body>
          <![CDATA[
          var oldStyle = this.getAttribute('style');
          if (!oldStyle) oldStyle = "";
          var newStyle = oldStyle;
          
          for (var i=0; i<attributes.length; ++i) {
            var attribval = this.getAttribute(attributes[i]);
            if (!attribval) continue;
            var re = new RegExp(attributes[i]+"\s*:[^;]*;");
            if (re.test(oldStyle)) {
              newStyle = newStyle.replace(re, attributes[i]+":"+attribval+"; ");
            }
            else {
              newStyle = attributes[i]+":"+attribval+"; "+newStyle;
            }
          }
          if (newStyle!="") {
            this.setAttribute('style',
                              this.filterStyleDeclaration(newStyle));
          }
          ]]>
        </body>
      </method>
      <method name="filterStyleDeclaration">
        <parameter name="declaration"/>
        <body>
          <![CDATA[
          // set 'px' when no units are given on font-size:
          declaration = declaration.replace(/(font-size\s*:\s*[\d\.]+)\s*(;|$)/, "$1px;");
          // insert quotes around stroke-dasharray:
          declaration = declaration.replace(/(stroke-dasharray\s*:)\s*([^'";]+);/,
                                            "$1'$2';");
          return declaration;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
  
</bindings>
