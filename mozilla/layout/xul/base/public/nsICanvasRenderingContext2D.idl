/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 *   Vladimir Vukicevic <vladimir@pobox.com>
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIDOMHTMLImageElement;

[scriptable, uuid(fd1e2245-8d8c-4146-bf47-fb84ddd6fca0)]
interface nsICanvasRenderingContext2D : nsISupports
{
  // state
  void save();
  void restore();

  // transformations
  void scale(in float x, in float y);
  void rotate(in float angle);
  void translate(in float x, in float y);

  // colors
  // XXX how does setAlpha affect alpha set by StrokeColor and FillColor?
  void setStrokeColor(in string color);
  void setFillColor(in string color);
  void setAlpha(in float alpha);

  // rects
  void clearRect(in float x, in float y, in float w, in float h);
  void fillRect(in float x, in float y, in float w, in float h);
  void strokeRect(in float x, in float y, in float w, in float h);

  // path API
  void beginPath();
  void closePath();
  void fillPath();
  void strokePath();
  void clip();

  void moveToPoint(in float x, in float y);
  void addLineToPoint(in float x, in float y);
  void addQuadraticCurveToPoint(in float cpx, in float cpy, in float x, in float y);
  void addBezierCurveToPoint(in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y);
  void addArcToPoint(in float x1, in float y1, in float x2, in float y2, in float radius);
  void addArc(in float x, in float y, in float r, in float startAngle, in float endAngle, in boolean clockwise);
  void addRect(in float x, in float y, in float w, in float h);

  // line caps/joins
  void setLineWidth(in float width);
  void setLineCap(in string capstyle); // "round" "square"
  void setLineJoin(in string joinstyle); // "round" "bevel" "miter"
  void setMiterLimit(in float limit);

  // image api
  void drawImage(in nsIDOMHTMLImageElement image, in long x, in long y, in long w, in long h, in string composite);
  void drawImageFromRect(in nsIDOMHTMLImageElement image,
                         in long sx, in long sy, in long sw, in long sh,
                         in long dx, in long dy, in long dw, in long dh,
                         in string composite);

  // shadow api (uh..)
  void setShadow(in float width, in float height, in float blur, in string color);
  void clearShadow();

  // compositing
  void setCompositeOperation(in string composite);

  //
  // additions
  //

  // nsIHTMLImageElement getImage(); // snapshot the current canvas

};
