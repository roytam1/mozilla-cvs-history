/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Original Author: David W. Hyatt (hyatt@netscape.com)
 *
 * Contributor(s): 
 */

interface nsIOutlinerBoxObject;

#include "nsISecurityCheckedComponent.idl"

[scriptable, uuid(F848D7CF-F3D6-4775-8C9F-135546E61E1E)]
interface nsIOutlinerSelection : nsISecurityCheckedComponent
{
  // The outliner widget for this selection.
  attribute nsIOutlinerBoxObject outliner;

  // Indicates whether or not the row at the specified index is
  // part of the selection.
  boolean isSelected(in long index);

  // Deselect all rows and select the row at the specified index. 
  void select(in long index);

  // Toggle the selection state of the row at the specified index.
  void toggleSelect(in long index);

  // Select the range specified by the indices.  If augment is true,
  // then we add the range to the selection without clearing out anything
  // else.  If augment is false, everything is cleared except for the specified range.
  void rangedSelect(in long startIndex, in long endIndex, in boolean augment);

  // Clears the selection.
  void clearSelection();

  // Inverts the selection.
  void invertSelection();

  // Selects all rows.
  void selectAll();

  // Iterate the selection using these methods.
  long getRangeCount();
  void getRangeAt(in long i, out long min, out long max);

  // This attribute is a boolean indicating whether or not the
  // "select" event should fire when the selection is changed using
  // one of our methods.  A view can use this to temporarily suppress
  // the selection while manipulating all of the indices, e.g., on 
  // a sort.
  attribute boolean selectEventsSuppressed;

  // The current item (the one that gets a focus rect in addition to being
  // selected).
  attribute long currentIndex;
};

%{C++
// Initializer,
%}
