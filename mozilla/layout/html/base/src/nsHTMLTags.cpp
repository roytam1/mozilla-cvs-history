
/*
** This is a generated file, do not edit it. This file is created by
** genhash.pl
*/

#include "plstr.h"
#include "nsHTMLTags.h"
#define TOTAL_KEYWORDS 90
#define MIN_WORD_LENGTH 1
#define MAX_WORD_LENGTH 11
#define MIN_HASH_VALUE 1
#define MAX_HASH_VALUE 264
/* maximum key range = 264, duplicates = 0 */


struct StaticNameTable {
  char* tag;
  PRInt32 id;
};

static const unsigned char kLowerLookup[256] = {
  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,
  48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,
  64,
    97,98,99,100,101,102,103,104,105,106,107,108,109,
    110,111,112,113,114,115,116,117,118,119,120,121,122,

   91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,
  112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,

  128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
  144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
  160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
  176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
  192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
  208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
  224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,
  240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
};

#define MYLOWER(x) kLowerLookup[((x) & 0x7f)]

/**
 * Map a name to an ID or -1
 */
PRInt32 nsHTMLTags::LookupName(const char* str)
{
  static unsigned short asso_values[] =
    {
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265,   5,
      20,  65,  70,  75,  80, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
     265, 265, 265, 265, 265, 265, 265,   0,  35, 100,
      40,   0,  15,  60,  30,  40,   0,  45,  10,  40,
       0, 120,  45, 265,   0,  15,   5,  85,  15,   0,
      10,   0, 265, 265, 265, 265, 265, 265,
    };
  static unsigned char lengthtable[] =
    {
      0,  1,  0,  0,  4,  0,  0,  2,  0,  0,  0,  0,  0,  0,
      0,  5,  0,  2,  3,  0,  5,  6,  0,  8,  0,  5,  6,  0,
      8,  0,  0,  1,  2,  0,  0,  0,  6,  2,  3,  0,  0,  0,
      2,  0,  0,  5,  0,  0,  3,  4,  0,  6,  2,  0,  4,  5,
      6,  0,  0,  0,  0,  6,  2,  8,  4,  0,  6,  2,  0,  9,
      5,  1,  2,  0,  4,  0,  0,  0,  0,  0,  0,  1,  2,  3,
      0,  0,  6,  2,  0,  4,  5,  1,  2,  0,  0,  5,  0,  0,
      0,  4,  0,  6,  7,  0,  4,  0,  6,  2,  0,  0,  0, 11,
      7,  3,  0,  0,  0,  0,  0,  0,  5,  0,  2,  0,  0,  0,
      6,  0,  0,  4,  0,  0,  7,  3,  0,  5,  0,  7,  0,  0,
      0,  0,  2,  3,  4,  0,  0,  0,  8,  4,  0,  0,  7,  8,
      0,  0,  0,  0,  8,  4,  0,  0,  2,  3,  0,  0,  6,  7,
      0,  0,  0,  1,  2,  3,  0, 10,  6,  0,  0,  4,  0,  0,
      2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  3,  0,  0,
      0,  0,  3,  4,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,
    };
  static struct StaticNameTable wordlist[] =
    {
      {"",}, 
      {"a",  0},
      {"",}, {"",}, 
      {"area",  3},
      {"",}, {"",}, 
      {"tr",  83},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"layer",  45},
      {"",}, 
      {"tt",  84},
      {"var",  87},
      {"",}, 
      {"frame",  26},
      {"server",  69},
      {"",}, 
      {"textarea",  80},
      {"",}, 
      {"style",  75},
      {"strike",  73},
      {"",}, 
      {"frameset",  27},
      {"",}, {"",}, 
      {"s",  65},
      {"hr",  35},
      {"",}, {"",}, {"",}, 
      {"select",  68},
      {"br",  11},
      {"wbr",  88},
      {"",}, {"",}, {"",}, 
      {"h1",  28},
      {"",}, {"",}, 
      {"table",  78},
      {"",}, {"",}, 
      {"pre",  64},
      {"meta",  51},
      {"",}, 
      {"keygen",  44},
      {"dt",  21},
      {"",}, 
      {"base",  5},
      {"title",  82},
      {"ilayer",  39},
      {"",}, {"",}, {"",}, {"",}, 
      {"iframe",  38},
      {"dl",  20},
      {"basefont",  6},
      {"span",  72},
      {"",}, 
      {"spacer",  71},
      {"th",  81},
      {"",}, 
      {"plaintext",  63},
      {"small",  70},
      {"b",  4},
      {"h2",  29},
      {"",}, 
      {"head",  34},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"i",  37},
      {"em",  22},
      {"dir",  18},
      {"",}, {"",}, 
      {"strong",  74},
      {"td",  79},
      {"",}, 
      {"html",  36},
      {"param",  62},
      {"p",  61},
      {"li",  46},
      {"",}, {"",}, 
      {"input",  41},
      {"",}, {"",}, {"",}, 
      {"link",  47},
      {"",}, 
      {"applet",  2},
      {"address",  1},
      {"",}, 
      {"samp",  66},
      {"",}, 
      {"center",  13},
      {"ul",  86},
      {"",}, {"",}, {"",}, 
      {"certificate",  14},
      {"isindex",  42},
      {"div",  19},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"embed",  23},
      {"",}, 
      {"dd",  17},
      {"",}, {"",}, {"",}, 
      {"script",  67},
      {"",}, {"",}, 
      {"menu",  50},
      {"",}, {"",}, 
      {"listing",  48},
      {"map",  49},
      {"",}, 
      {"blink",  8},
      {"",}, 
      {"nolayer",  56},
      {"",}, {"",}, {"",}, {"",}, 
      {"ol",  59},
      {"xmp",  89},
      {"font",  24},
      {"",}, {"",}, {"",}, 
      {"noscript",  57},
      {"cite",  15},
      {"",}, {"",}, 
      {"caption",  12},
      {"multicol",  52},
      {"",}, {"",}, {"",}, {"",}, 
      {"noframes",  55},
      {"nobr",  53},
      {"",}, {"",}, 
      {"h3",  30},
      {"kbd",  43},
      {"",}, {"",}, 
      {"object",  58},
      {"noembed",  54},
      {"",}, {"",}, {"",}, 
      {"u",  85},
      {"h4",  31},
      {"sub",  76},
      {"",}, 
      {"blockquote",  9},
      {"option",  60},
      {"",}, {"",}, 
      {"form",  25},
      {"",}, {"",}, 
      {"h5",  32},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"h6",  33},
      {"sup",  77},
      {"",}, {"",}, {"",}, {"",}, 
      {"big",  7},
      {"body",  10},
      {"",}, {"",}, {"",}, 
      {"img",  40},
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"",}, {"",}, {"",}, {"",}, {"",}, {"",}, 
      {"code",  16},
    };

  if (str != NULL) {
    int len = PL_strlen(str);
    if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH) {
  register int hval = len;

  switch (hval)
    {
      default:
      case 3:
        hval += asso_values[MYLOWER(str[2])];
      case 2:
        hval += asso_values[MYLOWER(str[1])];
      case 1:
        hval += asso_values[MYLOWER(str[0])];
        break;
    }
  hval += asso_values[MYLOWER(str[len - 1])];
      if (hval <= MAX_HASH_VALUE && hval >= MIN_HASH_VALUE) {
        if (len == lengthtable[hval]) {
          register const char *tag = wordlist[hval].tag;

          /*
          ** While not at the end of the string, if they ever differ
          ** they are not equal.  We know "tag" is already lower case.
          */
          while ((*tag != '\0')&&(*str != '\0')) {
            if (*tag != (char) MYLOWER(*str)) {
              return -1;
            }
            tag++;
            str++;
          }

          /*
          ** One of the strings has ended, if they are both ended, then they
          ** are equal, otherwise not.
          */
          if ((*tag == '\0')&&(*str == '\0')) {
            return wordlist[hval].id;
          }
        }
      }
    }
  }
  return -1;
}

const nsHTMLTags::NameTableEntry nsHTMLTags::kNameTable[] = {
  { "a", 0 }, 
  { "address", 1 }, 
  { "applet", 2 }, 
  { "area", 3 }, 
  { "b", 4 }, 
  { "base", 5 }, 
  { "basefont", 6 }, 
  { "big", 7 }, 
  { "blink", 8 }, 
  { "blockquote", 9 }, 
  { "body", 10 }, 
  { "br", 11 }, 
  { "caption", 12 }, 
  { "center", 13 }, 
  { "certificate", 14 }, 
  { "cite", 15 }, 
  { "code", 16 }, 
  { "dd", 17 }, 
  { "dir", 18 }, 
  { "div", 19 }, 
  { "dl", 20 }, 
  { "dt", 21 }, 
  { "em", 22 }, 
  { "embed", 23 }, 
  { "font", 24 }, 
  { "form", 25 }, 
  { "frame", 26 }, 
  { "frameset", 27 }, 
  { "h1", 28 }, 
  { "h2", 29 }, 
  { "h3", 30 }, 
  { "h4", 31 }, 
  { "h5", 32 }, 
  { "h6", 33 }, 
  { "head", 34 }, 
  { "hr", 35 }, 
  { "html", 36 }, 
  { "i", 37 }, 
  { "iframe", 38 }, 
  { "ilayer", 39 }, 
  { "img", 40 }, 
  { "input", 41 }, 
  { "isindex", 42 }, 
  { "kbd", 43 }, 
  { "keygen", 44 }, 
  { "layer", 45 }, 
  { "li", 46 }, 
  { "link", 47 }, 
  { "listing", 48 }, 
  { "map", 49 }, 
  { "menu", 50 }, 
  { "meta", 51 }, 
  { "multicol", 52 }, 
  { "nobr", 53 }, 
  { "noembed", 54 }, 
  { "noframes", 55 }, 
  { "nolayer", 56 }, 
  { "noscript", 57 }, 
  { "object", 58 }, 
  { "ol", 59 }, 
  { "option", 60 }, 
  { "p", 61 }, 
  { "param", 62 }, 
  { "plaintext", 63 }, 
  { "pre", 64 }, 
  { "s", 65 }, 
  { "samp", 66 }, 
  { "script", 67 }, 
  { "select", 68 }, 
  { "server", 69 }, 
  { "small", 70 }, 
  { "spacer", 71 }, 
  { "span", 72 }, 
  { "strike", 73 }, 
  { "strong", 74 }, 
  { "style", 75 }, 
  { "sub", 76 }, 
  { "sup", 77 }, 
  { "table", 78 }, 
  { "td", 79 }, 
  { "textarea", 80 }, 
  { "th", 81 }, 
  { "title", 82 }, 
  { "tr", 83 }, 
  { "tt", 84 }, 
  { "u", 85 }, 
  { "ul", 86 }, 
  { "var", 87 }, 
  { "wbr", 88 }, 
  { "xmp", 89 }, 
};
