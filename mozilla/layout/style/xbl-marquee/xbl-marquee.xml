<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Netscape's XBL Marquee Emulation code.
   -
   - The Initial Developer of the Original Code is
   - Netscape Communications Corporation.
   - Portions created by the Initial Developer are Copyright (C) 2002
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Doron Rosenberg <doron@netscape.com>
   -   L. David Baron <dbaron@dbaron.org>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="marqueeBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  <binding id="marquee" inheritstyle="false">

    <resources>
      <stylesheet src="chrome://xbl-marquee/content/xbl-marquee.css"/>
    </resources>
    <implementation>

      <field name="_scrollAmount">6</field>
      <property name="scrollAmount">
        <getter>
          <![CDATA[
          var val = this.getAttribute("scrollamount");

          if (val <= 0 || isNaN(val) || val == null)
            return this._scrollAmount;

          return val;
          ]]>
        </getter>
        <setter>
          this.setAttribute("scrollamount", val);
        </setter>
      </property>

      <field name="_scrollDelay">85</field>
      <property name="scrollDelay">
        <getter>
          <![CDATA[
          var val = this.getAttribute("scrolldelay");

          if (val <= 0 || isNaN(val) || val == null)
            return this._scrollDelay;

          return val;
          ]]>
        </getter>
        <setter>
          this.setAttribute("scrolldelay", val);
        </setter>
      </property>

      <property name="trueSpeed">
        <getter>
          <![CDATA[
          if (!this.hasAttribute("truespeed") || this.getAttribute('truespeed') == '' ||
              this.getAttribute('truespeed') == 0)
            return false;

          return true;
          ]]>
        </getter>
        <setter>
          <![CDATA[
          if (val)
            this.setAttribute("truespeed", "truespeed");
          else
            this.removeAttribute('truespeed');
          ]]>
        </setter>
      </property>

      <property name="direction">
        <getter>
          return this.getAttribute("direction");
        </getter>
        <setter>
          this.setAttribute("direction", val);
        </setter>
      </property>

      <field name="_direction">"left"</field>

      <property name="behavior">
        <getter>
          return this._behavior;
        </getter>
        <setter>
          this.setAttribute("behavior", val);
        </setter>
      </property>

      <field name="_behavior">"scroll"</field>

      <field name="dirsign">1</field>
      <field name="startAt">0</field>
      <field name="stopAt">0</field>
      <field name="newPosition">0</field>
      <field name="runId">0</field>

      <field name="originalHeight">0</field>
      <field name="startNewDirection">true</field>

      <property name="outerDiv"
        onget="return document.getAnonymousNodes(this)[0]"
      />

      <property name="innerDiv"
        onget="return document.getAnonymousElementByAttribute(this, 'class', 'innerDiv');"
      />

      <property name="height"
        onget="return this.getAttribute('height');"
        onset="this.setAttribute('height', val);"
      />

      <property name="width"
        onget="return this.getAttribute('width');"
        onset="this.setAttribute('width', val);"
      />

      <!-- For sniffing purposes -->
      <field name="nsMarqueeVersion">"0.9.7"</field>

      <method name="_set_scrollDelay">
        <parameter name="aValue"/>
        <parameter name="aCanGenerateError"/>
        <body>
        <![CDATA[
          if (aValue <= 0 || isNaN(aValue) || aValue == null) {
            if (aCanGenerateError)
              throw new Error("Invalid argument for Marquee::scrollDelay");
            else
              aValue = 85; //default value for scrollDelay
          }

          if (aValue < 60) {
            if (this.trueSpeed == true)
              this._scrollDelay = aValue;
            else
              this._scrollDelay = 60;
          }
          else {
            this._scrollDelay = aValue;
          }
        ]]>
        </body>
      </method>

      <method name="_set_scrollAmount">
        <parameter name="aValue"/>
        <parameter name="aCanGenerateError"/>
        <body>
        <![CDATA[
          if (aValue < 0 || isNaN(aValue) || aValue == null) {
            if (aCanGenerateError && aValue < 0)
              throw new Error("Invalid argument for Marquee::scrollAmount");
            if (!aCanGenerateError)
              aValue = 6; //default value for scrollAmount
            else
              aValue = 0;
          }

          this._scrollAmount = aValue;
        ]]>
        </body>
      </method>

      <method name="_set_behavior">
        <parameter name="aValue"/>
        <parameter name="aCanGenerateError"/>
        <body>
        <![CDATA[
          if (typeof aValue == 'string')
            aValue = aValue.toLowerCase();
          if (aValue != 'alternate' && aValue != 'slide' && aValue != 'scroll' && aValue != null) {
            if (aCanGenerateError)
              throw new Error("Invalid argument for Marquee::behavior");
            return;
          }

          //default to "scroll" when removeAttribute is called (aValue == null)
          aValue = aValue ? aValue : "scroll";

          if (aValue != this._behavior) {
            this.startNewDirection = true;
            this._behavior = aValue;
            switch (aValue) {
              case "alternate":
              case "slide":
                this.stop();
                this._doMove(true);
                break;
            }      
          }
        ]]>
        </body>
      </method>

      <method name="_set_direction">
        <parameter name="aValue"/>
        <parameter name="aCanGenerateError"/>
        <body>
        <![CDATA[
          if (typeof aValue == 'string')
            aValue = aValue.toLowerCase();
          if (aValue != 'left' && aValue != 'right' && aValue != 'up' && aValue != 'down' && aValue != null) {
            if (aCanGenerateError)
              throw new Error("Invalid argument for Marquee::direction");
            return;
          }

          //default to "left" when removeAttribute is called (aValue == null)
          aValue = aValue ? aValue : "left";
          if (aValue != this._direction)
            this.startNewDirection = true;
          this._direction = aValue; 
        ]]>
        </body>
      </method>

      <method name="start">
        <body>
        <![CDATA[
          if (this.runId == 0)
            this._doMove(false);
        ]]>
        </body>
      </method>

      <method name="stop">
        <body>
        <![CDATA[
          if (this.runId != 0)
            clearTimeout(this.runId);

          this.runId = 0;
        ]]>
        </body>
      </method>

      <method name="_doMove">
        <parameter name="aResetPosition"/>
        <body>
        <![CDATA[

          //startNewDirection is true at first load and whenever the direction is changed
          if (this.startNewDirection) {
            this.startNewDirection = false; //we only want this to run once every scroll direction change

            var corrvalue = 0;

            switch (this._direction)
            {
              case "up":
                var height = document.defaultView.getComputedStyle(this, "").height;
                this.outerDiv.style.height = height;
                if (this.originalHeight > this.outerDiv.offsetHeight)
                    corrvalue = this.originalHeight - this.outerDiv.offsetHeight;
                this.innerDiv.style.padding = height + " 0";
                this.dirsign = 1;
                this.startAt = (this._behavior == 'alternate') ? (this.originalHeight - corrvalue) : 0;
                this.stopAt  = (this._behavior == 'alternate') ? 
                                (parseInt(height) + corrvalue) : (this.originalHeight + parseInt(height));
              break;

              case "down":
                var height = document.defaultView.getComputedStyle(this, "").height;
                this.outerDiv.style.height = height;
                if (this.originalHeight > this.outerDiv.offsetHeight)
                    corrvalue = this.originalHeight - this.outerDiv.offsetHeight;
                this.innerDiv.style.padding = height + " 0";
                this.dirsign = -1;
                this.startAt  = (this._behavior == 'alternate') ?
                                (parseInt(height) + corrvalue) : (this.originalHeight + parseInt(height));
                this.stopAt = (this._behavior == 'alternate') ? (this.originalHeight - corrvalue) : 0;
              break;

              case "right":
                if (this.innerDiv.offsetWidth > this.outerDiv.offsetWidth)
                    corrvalue = this.innerDiv.offsetWidth - this.outerDiv.offsetWidth;
                this.dirsign = -1;
                this.stopAt  = (this._behavior != 'alternate') ? 0 : (this.innerDiv.offsetWidth - corrvalue);
                this.startAt = this.outerDiv.offsetWidth + ((this._behavior != 'alternate') ? 
                               (this.innerDiv.offsetWidth + this.stopAt) : corrvalue);   
              break;

              case "left":
              default:
                if (this.innerDiv.offsetWidth > this.outerDiv.offsetWidth)
                    corrvalue = this.innerDiv.offsetWidth - this.outerDiv.offsetWidth;
                this.dirsign = 1;
                this.startAt = (this._behavior != 'alternate') ? 0 : (this.innerDiv.offsetWidth - corrvalue);
                this.stopAt  = this.outerDiv.offsetWidth + ((this._behavior != 'alternate') ? 
                               (this.innerDiv.offsetWidth + this.startAt) : corrvalue);
            }

            if (aResetPosition)
              this.newPosition = this.startAt;
          } //end if

          this.newPosition = this.newPosition + (this.dirsign * this._scrollAmount);

          if ((this.dirsign == 1 && this.newPosition > this.stopAt) ||
              (this.dirsign == -1 && this.newPosition < this.stopAt))
          {
            if (this._behavior == "alternate")
            {
              // lets start afresh
              this.startNewDirection = true;

              // swap direction
              const swap = {left: "right", down: "up", up: "down", right: "left"};
              this._direction = swap[this._direction];
              this.newPosition = this.stopAt + (this.dirsign * this._scrollAmount);
            }
            else
            {
              this.newPosition = this.startAt;
            }
          }

          if (!this.startNewDirection) {
            if ((this._direction == "up") || (this._direction == "down"))
              this.outerDiv.scrollTop = this.newPosition;
            else
              this.outerDiv.scrollLeft = this.newPosition;
          }

          var myThis = this;
          var lambda = function myTimeOutFunction(){myThis._doMove(false);}
          this.runId = window.setTimeout(lambda, this._scrollDelay);
        ]]>
        </body>
      </method>

      <method name="init">
        <body>
        <![CDATA[
          this.stop();
          // store the original height before we add padding
          this.innerDiv.style.padding = 0;
          this.originalHeight = this.innerDiv.offsetHeight;

          this._doMove(true);
        ]]>
        </body>
      </method>

      <constructor>
        <![CDATA[
          var myThis = this;
          var lambda = function myScopeFunction() { myThis.init(); }

          this._set_direction(this.getAttribute('direction'), false);
          this._set_behavior(this.getAttribute('behavior'), false);
          this._set_scrollDelay(this.getAttribute('scrolldelay'), false);
          this._set_scrollAmount(this.getAttribute('scrollamount'), false);
          this.startNewDirection = true;

          // init needs to be run after the page has loaded in order to calculate
          // the correct height/width
          window.addEventListener("load", lambda, false);
        ]]>
      </constructor>
    </implementation>

    <handlers>
      <handler event="DOMAttrModified" phase="target">
        <![CDATA[
          var attrName = event.attrName.toLowerCase();
          var oldValue = event.prevValue.toLowerCase();
          var newValue = event.newValue.toLowerCase();
          var canGenerateError = true;
          if (event.attrChange == event.REMOVAL) {
            newValue = null;
            canGenerateError = false;
          };

          if (oldValue != newValue) {
            switch (attrName) {
              case "loop":
                //XXX needs implementing
                break;
              case "scrollamount":
               this._set_scrollAmount(newValue, canGenerateError);
                break;
              case "scrolldelay":
                this._set_scrollDelay(newValue, canGenerateError);
                this.stop();
                this.start();
                break;
              case "truespeed":
                //needed to update this._scrollDelay
                setTimeout(function(x){ x._set_scrollDelay(x.getAttribute('scrolldelay'), false); }, 0, this);              
                break;
              case "behavior":
                this._set_behavior(newValue, canGenerateError);
                break;
              case "direction":
                this._set_direction(newValue, canGenerateError);
                break;
              case "width":
              case "height":
                this.startNewDirection = true;
                break;
              case "onbounce":
                //XXX needs implementing
                break;
              case "onstart":
                //XXX needs implementing
                break;
            }
          }
        ]]>
      </handler>
    </handlers>

  </binding>

  <binding id="marquee-horizontal"
           extends="chrome://xbl-marquee/content/xbl-marquee.xml#marquee"
           inheritstyle="false">

    <content>
      <html:div xbl:inherits="" style="overflow: -moz-scrollbars-none">
        <html:div style="display:table; border-spacing:0; margin: 0 100%;">
          <html:div class="innerDiv" style="white-space: nowrap;">
            <children/>
          </html:div>
        </html:div>
      </html:div>
    </content>

  </binding>

  <binding id="marquee-vertical"
           extends="chrome://xbl-marquee/content/xbl-marquee.xml#marquee">

    <content>
      <html:div xbl:inherits="" style="overflow: -moz-scrollbars-none">
        <html:div class="innerDiv">
          <children/>
        </html:div>
      </html:div>
    </content>

  </binding>

</bindings>
