<?xml version="1.0"?>

<!--
   The contents of this file are subject to the Netscape Public
   License Version 1.1 (the "License"); you may not use this file
   except in compliance with the License. You may obtain a copy of
   the License at http://www.mozilla.org/NPL/
    
   Software distributed under the License is distributed on an "AS
   IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
   implied. See the License for the specific language governing
   rights and limitations under the License.
    
   The Original Code is Mozilla Communicator client code, released
   March 31, 1998.
   
   The Initial Developer of the Original Code is Netscape
   Communications Corporation. Portions created by Netscape are
   Copyright (C) 1998-1999 Netscape Communications Corporation. All
   Rights Reserved.
   
   Contributor(s): 
     Ben Goodger <ben@netscape.com>
     Bill Law    <law@netscape.com>
  -->

<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://global/locale/brand.dtd">
%brandDTD;
<!ENTITY % platformPrefOverlayDTD SYSTEM "chrome://communicator-platform/locale/pref/platformPrefOverlay.dtd">  
%platformPrefOverlayDTD;
]>
  
<overlay id="platformPreferencesOverlay"
         xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Add "set default browser" button to Navigator panel. -->
    <groupbox id="pref-nav-platform-extensions" orient="horizontal" align="center" pack="center">
      <caption label="&defaultBrowserGroup.label;"/>
        <label value="&makeDefaultText;"/>
        <spacer flex="1"/>
        <button label="&defaultBrowserButton.label;"
                oncommand="makeDefault()"/>
    </groupbox>
  <script type="application/x-javascript">
    <![CDATA[
      // This overlay is pulled into multiple places.  We only want this
      // code to kick in when we're overlaid onto pref-navigator.xul.  And,
      // we don't want to conflict with code within other files.  So,
      // we use anonymous functions throughout.
      if (document.documentElement.id == "pref-navigator") {
        // "Install" the SetFields function.  This will be
        // called whenever the Navigator pane is shown.
        window.SetFields = function( pageData ) {
          // Determine if we have been selected as the default browser
          // already, and enable/disable the "Set As Default" button
          // accordingly.

          // We store our state info in the same place as the code in
          // pref-winhooks.js uses so that this panel and the 
          // Advanced/System panel are kept in synch.
          if (!("winHooks" in parent)) {
            // Neither the Advanced/System panel nor this panel has
            // appeared.  Initialize the state information.
            parent.winHooks = new Object;

            // Get winhooks service.
            parent.winHooks.winhooks = Components.classes[ "@mozilla.org/winhooks;1" ]
                                                 .getService( Components.interfaces.nsIWindowsHooks );
          
            // Extract current settings (these are what the user has checked on
            // the Advanced/System panel).
            parent.winHooks.prefs = parent.winHooks.winhooks.settings;
          }

          // Return true to tell caller to process the standard pref fields.
          return true;
        }
        // "Install" the makeDefault function;
        window.makeDefault = function() {
          // Extract current settings (these are what the
          // user has checked on the Advanced/System panel).
          var settings = parent.winHooks.prefs;

          // Turn on all "default browser" settings.
          settings.isHandlingHTTP  = true;
          settings.isHandlingHTTPS = true;
          settings.isHandlingFTP   = true;
          settings.isHandlingHTML  = true;
          settings.isHandlingXHTML = true;
          settings.isHandlingXML   = true;

          // Register callback that will be called when and if the
          // user presses the OK button.
          parent.hPrefWindow.registerOKCallbackFunc( function () {
            // Apply the settings.
            parent.winHooks.winhooks.settings = parent.winHooks.prefs;
          } );
        }
      }
    ]]>
  </script>
         
</overlay>

