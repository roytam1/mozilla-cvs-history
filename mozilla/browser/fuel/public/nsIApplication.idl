#include "nsISupports.idl"
#include "nsIVariant.idl"

/**
 * Interface that gives simplified access to the console
 */
[scriptable, uuid(ae8482e0-aa5a-11db-abbd-0800200c9a66)]
interface nsIConsole : nsISupports
{
  /**
   * Sends a given string to the console.
   * @param   msg
   *          The text to send to the console
   */
  void log(in string msg);

  /**
   * Opens the error console window.
   */
  void open();
};


/**
 * Interface hold information about an event.
 */
[scriptable, function, uuid(05281820-ab62-11db-abbd-0800200c9a66)]
interface nsIEventItem : nsISupports
{
  /**
   * The type of the event
   */
  readonly attribute string type;

  /**
   * Can hold extra details and data associated with the event. This
   * is optional and event specific.
   */
  readonly attribute string data;

  /**
   * 
   */
  void preventDefault();
}; 


/**
 * Interface used as a callback for listening to events.
 */
[scriptable, function, uuid(2dfe3a50-ab2f-11db-abbd-0800200c9a66)]
interface nsIEventListener : nsISupports
{
  /**
   * This method is called whenever an event occurs of the type for which 
   * the EventListener interface was registered.
   *
   * @param   event
   *            The EventItem contains contextual information about the 
   *            event. It also contains the preventDefault method which
   *            is used to cancel default action.
   */
  void handleEvent(in nsIEventItem event);
}; 


/**
 * Interface for supporting custom events.
 */
[scriptable, uuid(3a8ec9d0-ab19-11db-abbd-0800200c9a66)]
interface nsIEvents : nsISupports
{
  /**
   * Adds an event listener from the list. Calling remove
   * with arguments which do not identify any currently registered
   * EventListener has no effect.
   * @param   event
   *          The name of an event
   * @param   listener
   *          The reference to a listener
   */
  void addListener(in string event, in nsIEventListener listener);

  /**
   * Removes an event listener from the list. Calling remove
   * with arguments which do not identify any currently registered
   * EventListener has no effect.
   * @param   event
   *          The name of an event
   * @param   listener
   *          The reference to a listener
   */
  void removeListener(in string event, in nsIEventListener listener);
}; 


/**
 * Interface for simplified access to preferences. This interface is
 * designed to be used in a predefined context. As such, the branch should
 * be preset to a value appropriate to the context.
 */
[scriptable, uuid(ce697d40-aa5a-11db-abbd-0800200c9a66)]
interface nsIPreferences : nsISupports
{
  /**
   * All extensions in this preference area.
   */
  readonly attribute nsIVariant all;
  
  /**
   * The events object for the preferences
   */
  readonly attribute nsIEvents events;

  /**
   * Sets the value of a storage item with the given name.
   * @param   name
   *          The name of an item
   * @param   value
   *          The value to assign to the item
   */
  nsIVariant set(in string name, in nsIVariant value);

  /**
   * Gets the value of a preference. Returns a default value if
   * the preference does not exist.
   * @param   name
   *          The name of preference
   * @param   defaultValue
   *          The value to return if preference does not exist
   * @returns value of the preference or the given default value if preference
   *          does not exists.
   */
  nsIVariant get(in string name, in nsIVariant defaultValue);
  
  /**
   * Check to see if a preference exists.
   * @param   name
   *          The name of preference
   * @returns true if the preference exists, false if not
   */
  nsIVariant has(in string name);

  /**
   * Resets a preference back to the default values. If name is null, all
   * preferences in this branch are reset.
   * @param   name
   *          The name of the preference to reset or null to reset all 
   *          preferences in this branch.
   */
  void reset(in string name);
}; 


/**
 * Interface representing a simple storage system
 */
[scriptable, uuid(bbaf6210-aafe-11db-abbd-0800200c9a66)]
interface nsISessionStorage : nsISupports
{
  /**
   * The events object for the storage
   */
  readonly attribute nsIEvents events;

  /**
   * Determines if a storage item exists with the given name.
   * @param   name
   *          The name of an item
   * @returns true if an item exists with the given name,
   *          false otherwise.
   */
  boolean has(in string name);

  /**
   * Sets the value of a storage item with the given name.
   * @param   name
   *          The name of an item
   * @param   value
   *          The value to assign to the item
   */
  void set(in string name, in string value);

  /**
   * Gets the value of a storage item with the given name. Returns a
   * default value if the item does not exist.
   * @param   name
   *          The name of an item
   * @param   defaultValue
   *          The value to return if no item exists with the given name
   * @returns value of the item or the given default value if no item
   *          exists with the given name.
   */
  string get(in string name, in string defaultValue);
}; 


  /**
   * Interface representing an extension
   */
[scriptable, uuid(ea563b60-aa5a-11db-abbd-0800200c9a66)]
interface nsIExtension : nsISupports
{
  /**
   * The id of the extension.
   */
  readonly attribute string id;

  /**
   * The name of the extension.
   */
  readonly attribute string name;
  
  /**
   * The version number of the extension.
   */
  readonly attribute string version;

  /**
   * Indicates whether this is the extension's first run after install
   */
  readonly attribute boolean firstRun;

  /**
   * The preferences object for the extension. Defaults to the
   * "extensions.@id-of-extension." branch.
   */
  readonly attribute nsIPreferences prefs;

  /**
   * The storage object for the extension.
   */
  readonly attribute nsISessionStorage storage;

  /**
   * The events object for the extension.
   */
  readonly attribute nsIEvents events;
}; 


/**
 * Interface representing a list of all installed extensions
 */
[scriptable, uuid(de281930-aa5a-11db-abbd-0800200c9a66)]
interface nsIExtensions : nsISupports
{
  /**
   * All extensions in the application.
   */
  readonly attribute nsIVariant all;

  /**
   * Determines if an extension exists with the given id.
   * @param   id
   *          The id of an extension
   * @returns true if an extension exists with the given id,
   *          false otherwise.
   */
  boolean has(in string id);

  /**
   * Gets a nsIExtension object for an extension.
   * @param   id
   *          The id of an extension
   * @returns An extension object or null if no extension exists
   *          with the given id.
   */
  nsIExtension get(in string id);
}; 


/**
 * Interface for managing and accessing the applications systems
 */
[scriptable, uuid(fe74cf80-aa2d-11db-abbd-0800200c9a66)]
interface nsIApplication : nsISupports
{
  /**
   * The id of the application.
   */
  readonly attribute string id;

  /**
   * The name of the application.
   */
  readonly attribute string name;
  
  /**
   * The version number of the application.
   */
  readonly attribute string version;
  
  /**
   * The console object for the application.
   */
  readonly attribute nsIConsole console;

  /**
   * The extensions object for the application. Contains a list
   * of all installed extensions.
   */
  readonly attribute nsIExtensions extensions;

  /**
   * The preferences object for the application. Defaults to the
   * root branch.
   */
  readonly attribute nsIPreferences prefs;

  /**
   * The storage object for the application.
   */
  readonly attribute nsISessionStorage storage;

  /**
   * The events object for the application.
   */
  readonly attribute nsIEvents events;
}; 
