/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsIFile.idl"

interface nsICmdLineService;

%{C++
#include "nsICmdLineService.h"
      
#define NS_PROFILE_CID                                 \
  { /* {02b0625b-e7f3-11d2-9f5a-006008a6efe9} */       \
    0x02b0625b,                                        \
    0xe7f3,                                            \
    0x11d2,                                            \
    { 0x9f, 0x5a, 0x00, 0x60, 0x08, 0xa6, 0xef, 0xe9 } \
  }

#define NS_PROFILE_PROGID	\
	"component://netscape/profile/manager"

#define NS_PROFILE_STARTUP_CATEGORY \
        "profile-startup-category"
%}

[scriptable, uuid(02b0625a-e7f3-11d2-9f5a-006008a6efe9)]
interface nsIProfile : nsISupports {
    [noscript] void startupWithArgs(in nsICmdLineService cmdLine);
    void startup(in wstring filename);

    [noscript] void getProfileDir(in wstring profileName,
                                  out nsIFile profileDir);
    readonly attribute long profileCount;
    readonly attribute wstring currentProfile;
    readonly attribute wstring firstProfile;

    // eventually we need to depricate getCurrentProfileDir
    [noscript] void getCurrentProfileDir(out nsIFile profileDir);

    [noscript] void setProfileDir(in wstring profileName,
                                  in nsIFile profileDir);

    boolean profileExists(in wstring profileName);
    
    void migrateProfileInfo();

    void createNewProfile(in wstring profileName, 
                          in wstring nativeProfileDir, 
                          in wstring langcode,
                          in boolean useExistingDir);

    void renameProfile(in wstring oldName, in wstring newName);

    void deleteProfile(in wstring name, in boolean canDeleteFiles);

    wstring getProfileList();

    void startApprunner(in wstring profileName);

    void migrateProfile(in wstring profileName, in boolean showProgressAsModalWindow);

    long get4xProfileCount();

    void migrateAllProfiles();
    void cloneProfile(in wstring profileName);
    void forgetCurrentProfile();
    void loadNewProfilePrefs();
    boolean isCurrentProfileAvailable();

    attribute boolean automigrate;

    readonly attribute nsIFile defaultProfileParentDir;

    [noscript] void updateRegistry(in nsIFile regName);
    void setRegStrings(in wstring profileName, 
                       in wstring regString,
                       in wstring regName,
                       in wstring regEmail,
                       in wstring regOption);
    string isRegStringSet(in wstring profileName); 

};

#endif /* nsIProfile_h__ */
