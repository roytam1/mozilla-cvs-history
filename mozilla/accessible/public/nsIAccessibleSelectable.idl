/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 * 
 * Original Author: John Gaunt (jgaunt@netscape.com)
 * 
 * Contributor(s): 
 * John Gaunt
 * Marc Mulcahy (marc.mulcahy@sun.com)
 * Paul Sandoz (paul.sandoz@sun.com)
 * Bill Haneman (bill.haneman@sun.com)
 * Kyle Yuan (kyle.yuan@sun.com)
*/

#include "nsISupports.idl"
#include "nsIAccessible.idl"
#include "nsISupportsArray.idl"

[scriptable, uuid(34d268d6-1dd2-11b2-9d63-83a5e0ada290)]
interface nsIAccessibleSelectable : nsISupports
{
    nsISupportsArray GetSelectedChildren();
    
    /**
      * Returns the number of accessible children currently selected.
      */
    readonly attribute long selectionCount;

    /**
      * Adds the specified accessible child of the object to the
      * object's selection.
      */
    void addSelection(in long index);

    /**
      * Removes the specified child of the object from the object's selection.
      */
    void removeSelection(in long index);

    /**
      * Clears the selection in the object so that no children in the object
      * are selected.
      */
    void clearSelection();

    /**
      * Returns a reference to the accessible object representing the specified
      * selected child of the object.
      */
    nsIAccessible refSelection(in long index);

    /**
      * Determines if the current child of this object is selected
      */
    boolean isChildSelected(in long index);

    /**
      * If the object does not accept multiple selection, return false.
      */
    boolean selectAllSelection();
};
