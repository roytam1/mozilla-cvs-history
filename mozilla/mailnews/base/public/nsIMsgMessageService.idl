/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsIURI;
interface nsIUrlListener;
interface nsIStreamListener;
interface nsIMsgWindow;
interface nsIFileSpec;
interface nsIMsgFolder;

%{C++
#include "nsMsgKeyArray.h"
%}

[ptr] native nsMsgKeyArrayPtr(nsMsgKeyArray);


[scriptable, uuid(F11009C1-F697-11d2-807F-006008128C4E)]
interface nsIMsgMessageService : nsISupports {
     
     /////////////////////////////////////////////////////////////////
     // If you want a handle on the running task, pass in a valid nsIURI 
     // ptr. You can later interrupt this action by asking the netlib 
     // service manager to interrupt the url you are given back. 
     // Remember to release aURL when you are done with it. Pass nsnull
     // in for aURL if you don't  care about the returned URL.
     /////////////////////////////////////////////////////////////////


     /////////////////////////////////////////////////////////////////
     // CopyMessage: Pass in the URI for the message you want to have 
     // copied.
     // aCopyListener already knows about the destination folder. 
     // Set aMoveMessage to PR_TRUE if you want the message to be moved.
     // PR_FALSE leaves it as just a copy.
     ///////////////////////////////////////////////////////////////
  
	void CopyMessage(in string aSrcURI, in nsIStreamListener aCopyListener, in boolean aMoveMessage,
						   in nsIUrlListener aUrlListener, out nsIURI aURL);

    /* copy multiple messages at a time */
	[noscript] void CopyMessages(in nsMsgKeyArrayPtr keys, in nsIMsgFolder srcFolder, in nsIStreamListener aCopyListener, in boolean aMoveMessage,
						   in nsIUrlListener aUrlListener, out nsIURI aURL);

     /////////////////////////////////////////////////////////////////////
     //  DisplayMessage: When you want a message displayed....
     //  aMessageURI is a uri representing the message to display.
     //  aDisplayConsumer is (for now) a nsIWebshell which we'll use to load 
     // the message into. 
     // It would be nice if we can figure this out for ourselves in the 
     // protocol but we can't do that right now. 
     ///////////////////////////////////////////////////////////////////

	void DisplayMessage(in string aMessageURI, in nsISupports aDisplayConsumer, 
						in nsIMsgWindow aMsgWindow,
						in nsIUrlListener aUrlListener, 
						out nsIURI aURL);

     /////////////////////////////////////////////////////////////////////
     // SaveMessageToDisk: When you want to spool a message out to a file
	 // on disk. This is an asynch operation of course. You must pass in a
	 // url listener in order to figure out when the operation is done.
	 // aMessageURI--> uri representing the message to spool out to disk.
	 // aFile - the file you want the message saved to
	 // aGenerateDummyEnvelope --> usually FALSE. Set to TRUE if you want the msg
	 //					  appended at the end of the file. 
     ///////////////////////////////////////////////////////////////////

	void SaveMessageToDisk(in string aMessageURI, in nsIFileSpec aFile,
                           in boolean aGenerateDummyEnvelope, 
						   in nsIUrlListener aUrlListener, out nsIURI aURL,
                           in boolean canonicalLineEnding, in nsIMsgWindow aMsgWindow);

    /////////////////////////////////////////////////////////////////////
	// GetUrlForUri: when you have a uri and you would like to convert that
	// to a url which can be run through necko, you can use this method.
	// the Uri MUST refer to a message and not a folder! 
    /////////////////////////////////////////////////////////////////////
    
	void GetUrlForUri(in string aMessageURI, out nsIURI aURL, in nsIMsgWindow aMsgWindow);

	// tells if the message service can download mime parts directly, like IMAP
	readonly attribute boolean canFetchMimeParts;
     /////////////////////////////////////////////////////////////////////
     //  DisplayMessageForPrinting: When you want a message displayed in a
     //  format that is suitable for printing....
     //  aMessageURI is a uri representing the message to display.
     //  aDisplayConsumer is (for now) a nsIWebshell which we'll use to load 
     // the message into. 
     ///////////////////////////////////////////////////////////////////

	void DisplayMessageForPrinting(in string aMessageURI, in nsISupports aDisplayConsumer, 
						in nsIMsgWindow aMsgWindow,
						in nsIUrlListener aUrlListener, 
						out nsIURI aURL);
};
