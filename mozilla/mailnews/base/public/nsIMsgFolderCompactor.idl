/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsISupportsArray.idl"

interface nsIMsgFolder;
interface nsIMsgDatabase;
interface nsIFileSpec;
interface nsIMsgWindow;

[scriptable, uuid(2af7d7a2-e5b6-11d4-a5b7-0060b0fc04b7)]

/*  Use this for any object that wants to handle compacting folders */

interface nsIMsgFolderCompactor :  nsISupports
{
  void Init(in nsIMsgFolder folder, in string baseMsgUri, in nsIMsgDatabase db,
                           in nsIFileSpec pathSpec, in nsIMsgWindow aMsgWindow);
  void startCompactingAll(in nsISupportsArray aArrayOfFoldersToCompact, in nsIMsgWindow aMsgWindow, in boolean compactOfflineAlso, in nsISupportsArray aOfflineFolderArray);
  // we probably want to add the ability to set an enumerator to determine which
  // messages to copy over in the compaction process.
  void StartCompacting();
  void FinishCompact();
};
