/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 */

#include "nsISupports.idl"
#include "MailNewsTypes2.idl"

interface nsIMsgFolder;

typedef long nsMsgViewSortOrderValue;
typedef long nsMsgViewSortTypeValue;
typedef long nsMsgDBViewTypeValue;
typedef long nsMsgViewNotificationCodeValue;
typedef long nsMsgViewCommandCheckStateValue;
typedef long nsMsgViewCommandTypeValue;
typedef long nsMsgViewFlagsTypeValue;

[scriptable, uuid(682a18be-fd18-11d4-a5be-0060b0fc04b7)]
interface nsMsgViewSortOrder
{
	const nsMsgViewSortOrderValue none = 0;
	const nsMsgViewSortOrderValue ascending = 1;
	const nsMsgViewSortOrderValue descending = 2;
};

[scriptable, uuid(64852276-1dd2-11b2-8103-afe12002c053)]
interface nsMsgViewFlagsType
{
    /**
     * flags for GetViewFlags
     */
    const nsMsgViewFlagsTypeValue kNone = 0x0;
    const nsMsgViewFlagsTypeValue kOutlineDisplay = 0x1;
    const nsMsgViewFlagsTypeValue kFlatDisplay = 0x2;
    const nsMsgViewFlagsTypeValue kShowIgnored = 0x8;
    const nsMsgViewFlagsTypeValue kUnreadOnly = 0x10;
};

[scriptable, uuid(b2f31bca-fd18-11d4-a5be-0060b0fc04b7)]
interface nsMsgViewSortType
{
	const nsMsgViewSortTypeValue byDate = 0x12;
	const nsMsgViewSortTypeValue bySubject = 0x13;
	const nsMsgViewSortTypeValue byAuthor = 0x14;
	const nsMsgViewSortTypeValue byId = 0x15;
	const nsMsgViewSortTypeValue byThread = 0x16;
	const nsMsgViewSortTypeValue byPriority = 0x17;
	const nsMsgViewSortTypeValue byStatus = 0x18;
	const nsMsgViewSortTypeValue bySize = 0x19;
	const nsMsgViewSortTypeValue byFlagged = 0x1a;
	const nsMsgViewSortTypeValue byUnread = 0x1b;
	const nsMsgViewSortTypeValue byRecipient = 0x1c;
};

[scriptable, uuid(255d1c1e-fde7-11d4-a5be-0060b0fc04b7)]
interface nsMsgViewNotificationCode
{
  const nsMsgViewNotificationCodeValue none = 0;				
                  /* No change; this call is just being used
								   to potentially nest other sets of calls
								   inside it.  The "where" and "num" parameters
								   are unused. */
  const nsMsgViewNotificationCodeValue insertOrDelete = 1;		
                  /* Some lines have been inserted or deleted.
								   The "where" parameter will indicate
								   the first line that has been added or
								   removed; the "num" parameter will indicate
								   how many lines, and will be positive on
								   an insertion and negative on a deletion. */
  const nsMsgViewNotificationCodeValue changed = 2;			
                  /* Some lines have had their contents changed
								   (e.g., messages have been marked read
								   or something.)  "where" indicates the
								   first line with a change; "num" indicates
								   how many chaged. */
 const nsMsgViewNotificationCodeValue  scramble = 3;	
            		/* Everything changed.  Probably means we
								   resorted the folder.  We are still working
								   with the same set of items, or at least
								   have some overlap, but all the indices are
								   invalid.  The "where" and "num" parameters
								   are unused. */
  const nsMsgViewNotificationCodeValue all = 4;				/* Everything changed.  We're now not
								   displaying anything like what we were; we
								   probably opened a new folder or something.
								   The FE needs to forget anything it ever knew
								   about what was being displayed, and start
								   over.  The "where" and "num" parameters are
								   unused.  */
  const nsMsgViewNotificationCodeValue totalContentChanged = 5;
							    /* Introduced for the address book to support
								   virtual list views.  The total number of
								   entries on the LDAP directory has changed
								   and the FE must update its scrollbar.  The
								   "num" parameter contains the total number of
								   entries on the LDAP server. */
  const nsMsgViewNotificationCodeValue newTopIndex = 6;        
                    /* Introduced for the address book to support
								   virtual list views.  The virtual list view
								   cache data has changed and the FE view may
								   be out of date.  The view should be updated
								   so that the first/top index in the view is
								   the index in the "where" parameter.  The
								   scrollbar should be updated to match the new
								   position. */

};

[scriptable, uuid(4ec9248e-0108-11d5-a5be-0060b0fc04b7)]
interface nsMsgViewCommandCheckState
{
  const nsMsgViewCommandCheckStateValue notUsed = 0;
  const nsMsgViewCommandCheckStateValue checked = 1;
  const nsMsgViewCommandCheckStateValue unchecked = 2;
};

[scriptable, uuid(ad36e6cc-0109-11d5-a5be-0060b0fc04b7)]
interface nsMsgViewCommandType
{
  const nsMsgViewCommandTypeValue markMessagesRead = 0;
  const nsMsgViewCommandTypeValue markMessagesUnread = 1;
  const nsMsgViewCommandTypeValue toggleMessageRead = 2;
								   
  const nsMsgViewCommandTypeValue flagMessages = 3;
  const nsMsgViewCommandTypeValue unflagMessages = 4;
  const nsMsgViewCommandTypeValue toggleThreadKilled = 5;
  const nsMsgViewCommandTypeValue toggleThreadWatched = 6;

  const nsMsgViewCommandTypeValue deleteMsg = 7;
  const nsMsgViewCommandTypeValue deleteNoTrash = 8;
  const nsMsgViewCommandTypeValue markThreadRead = 9;
  const nsMsgViewCommandTypeValue markAllRead = 10;

};

[scriptable, uuid(4063bcf8-fd19-11d4-a5be-0060b0fc04b7)]
interface nsMsgDBViewType
{
    /** 
     * this view type matches any other view type, 
	 * for the purpose of matching cached views.
	 * Else, it's equivalent to allThreads
     */
	const nsMsgDBViewTypeValue anyView = 0; 

    /** 
     * default view, no killed threads
     */
	const nsMsgDBViewTypeValue allThreads = 1;			

	const nsMsgDBViewTypeValue onlyThreadsWithUnread = 2;
	const nsMsgDBViewTypeValue onlyUnreadHeaders = 3;		
	const nsMsgDBViewTypeValue watchedThreadsWithNew = 4;

    /** 
     * view built up on demand
     */
	const nsMsgDBViewTypeValue cacheless = 5;	
};


[scriptable, uuid(704c7d28-fd1a-11d4-a5be-0060b0fc04b7)]
interface nsIMsgDBView : nsISupports
{
    void open(in nsIMsgFolder folder, in nsMsgViewSortTypeValue sortType, in nsMsgViewSortOrderValue sortOrder, in nsMsgViewFlagsTypeValue viewFlags, out long count);
    void close();

    void init(out long pCount);
    void addKeys(out nsMsgKey pKeys, out long pFlags, in string pLevels, in nsMsgViewSortTypeValue sortType, in long numKeysToAdd);

    void sort(in nsMsgViewSortTypeValue sortType, in nsMsgViewSortOrderValue sortOrder);

    void doCommand(in nsMsgViewCommandTypeValue command,
						 out nsMsgViewIndex indices, in long numindices);
    void getCommandStatus(in nsMsgViewCommandTypeValue command,
						 out nsMsgViewIndex indices, in long numindices,
						 out boolean selectable_p, out nsMsgViewCommandCheckStateValue selected_p);

    attribute nsMsgViewFlagsTypeValue viewFlags;

    /**
     * temporary, so we can inspect from js
     */
    void dumpView();
};
