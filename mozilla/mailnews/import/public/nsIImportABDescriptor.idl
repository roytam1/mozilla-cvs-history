/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

/*

  Interface for importing mail - ui provided by the import module.  If
  you wish to provide your own UI then implement the nsIImportGeneric
  interface.

  Can I get an attribute set method to take a const value???
  
 */

#include "nsISupports.idl"

interface nsIFileSpec;

[scriptable, uuid(9c1774e0-3538-11d3-a206-00a0cc26da63)]
interface nsIImportABDescriptor : nsISupports
{	
	/*
		use the following 2 attributes however you'd like to
		refer to a specific address book
	*/
	attribute unsigned long 		identifier;
	attribute unsigned long			ref;
	
	/*
		Doesn't have to be accurate, this is merely used to report progress.
		If you're importing a file, using file size and reporting progress
		as the number of bytes processed so far makes sense.  For other formats
		returning the number of records may make more sense.  
	*/
	attribute unsigned long			size;
	
	/*
		The preferred name for this address book.  Depending upon how the 
		user selected import, the caller of the nsIImportAddressBooks interface
		may use this name to create the destination address book or it may
		ignore it.  However, this must be provided in all cases as it is
		also displayed in the UI to the user.
	*/
	wstring	GetPreferredName();
	void	SetPreferredName( [const] in wstring name);
	
	/*
		For address books that want a file descriptor to locate the address book.
		For formats that do not, use identifier & ref to refer to the address book
		OR implement your own nsIImportABDescriptor that contains additional data
		necessary to identify specific address books,
	*/
	
	readonly attribute nsIFileSpec	fileSpec;
	
	/*
		Set by the UI to indicate whether or not this address book should be imported.
	*/
	attribute boolean				import;
};
	


%{ C++

/*
	The default implementation can be obtained from
	nsIImportService::CreateNewABDescriptor();
	
	You should only be interested in using this class if you implement
	the nsIImportAddressBooks interface in which case, just using the service to
	create new ones should work fine for you.  If not, implement your
	own.
*/

%}
