/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"
#include "MailNewsTypes2.idl"
#include "nsIFileSpec.idl"

interface nsIStreamListener;
interface nsIMsgDBHdr;
%{C++
#include "nsIStreamListener.h"
%}

typedef long nsMailboxAction;

[scriptable, uuid(C272A1C1-C166-11d2-804E-006008128C4E)]
interface nsIMailboxUrl : nsISupports {

	// Mailbox urls which parse a mailbox folder require a consumer of the
    // stream which will represent the mailbox. This consumer is the mailbox
    // parser. As data from the mailbox folder is read in, the data will be
    // written to a stream and the consumer will be notified through
    // nsIStreamListenter::OnDataAvailable that the stream has data
	// available...
	// mscott: I wonder if the caller should be allowed to create and set
    // the stream they want the data written to as well? Hmm....
	
    attribute nsIStreamListener mailboxParser;
    
	/////////////////////////////////////////////////////////////////////////
	// Copy/Move mailbox urls require a mailbox copy handler which actually
    // performs the copy.
	/////////////////////////////////////////////////////////////////////////
    attribute nsIStreamListener mailboxCopyHandler;

    // mailbox URL state
    readonly attribute nsFileSpecPtr fileSpec;

    // a message db header for that message.
    readonly attribute nsIMsgDBHdr messageHeader;

    // Some mailbox urls include a message key for the message in question.
    readonly attribute nsMsgKey messageKey;
    
	// mailbox urls to fetch a mail message can specify the size of
    // the message...
	// this saves us the trouble of having to open up the msg db and ask
    // ourselves...
    attribute unsigned long messageSize;
    
    attribute nsMailboxAction mailboxAction;

    /* these are nsMailboxActions */
	const long ActionParseMailbox = 0;
    const long ActionDisplayMessage = 1;
    const long ActionCopyMessage = 2;
	const long ActionMoveMessage = 3;
	const long ActionSaveMessageToDisk = 4;
	const long ActionAppendMessageToDisk = 5;
};

