/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsrootidl.idl"
#include "nsIFileSpec.idl"

%{C++
%}

[scriptable, uuid(ED3D3227-2803-11d3-82B7-444553540002)]
interface nsIMsgSendListener : nsISupports {

    /**
     * Notify the observer that the message has started to be delivered. This method is
     * called only once, at the beginning of a message send operation.
     *
     * @return The return value is currently ignored.  In the future it may be
     * used to cancel the URL load..
     */
    void OnStartSending(in string aMsgID, in PRUint32 aMsgSize);

    /**
     * Notify the observer that progress as occurred for the message send
     */
    void OnProgress(in string aMsgID, in PRUint32 aProgress, in PRUint32 aProgressMax);

    /**
     * Notify the observer with a status message for the message send
     */
    void OnStatus(in string aMsgID, in wstring aMsg);

    /**
     * Notify the observer that the message has been sent.  This method is 
     * called once when the networking library has finished processing the 
     * message.
     * 
     * This method is called regardless of whether the the operation was successful.
     * aMsgID   The message id for the mail message
     * status   Status code for the message send.
     * msg      A text string describing the error.
     * returnFileSpec The returned file spec for save to file operations.
     */
    void OnStopSending(in string aMsgID, in nsresult aStatus, in wstring aMsg, 
					             in nsIFileSpec returnFileSpec);

    /**
     * Notify the observer with the folder uri before the draft is copied.
     */
    void OnGetDraftFolderURI(in string aFolderURI);

};

