/* -*- Mode: idl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
*/

#include "nsISupports.idl"
#include "domstubs.idl"
#include "nsIMsgCompFields.idl"
#include "nsIEditorShell.idl"
#include "nsIMsgIdentity.idl"


%{ C++
#include "nsIDOMWindow.h"
#include "nsIEditorShell.h"
%}


typedef long MSG_ComposeType;

[scriptable, uuid(c7035852-7531-11d3-9a73-006008948010)]
interface nsIMsgCompType {
    const long New                      = 0;
    const long Reply                    = 1;
    const long ReplyAll                 = 2;
    const long ForwardAsAttachment      = 3;
    const long ForwardInline            = 4;
    const long NewsPost		            = 5;
    const long ReplyToGroup     		= 6;
    const long ReplyToSenderAndGroup    = 7;
    const long Draft		            = 8;
    const long Template		            = 9;
    const long MailToUrl	            = 10;
};


typedef long MSG_ComposeFormat;

[scriptable, uuid(a28325e8-7531-11d3-8f1c-006008948010)]
interface nsIMsgCompFormat {
    const long Default   = 0;
    const long HTML      = 1;
    const long PlainText = 2;
    const long OppositeOfDefault = 3;
};

typedef long MSG_ComposeSaveType;

[scriptable, uuid(6953e50a-7531-11d3-85fe-006008948010)]
interface nsIMsgCompSaveType {
    const long File     = 0;
    const long Template = 1;
    const long Draft    = 2;
};

typedef long MSG_DeliverMode;

[scriptable, uuid(f338eba4-7530-11d3-8833-006008948010)]
interface nsIMsgCompDeliverMode {
    const long Now = 0;
    const long Later = 1;
    const long Save = 2;
    const long SaveAs = 3;
    const long SaveAsDraft = 4;
    const long SaveAsTemplate = 5;
};

[scriptable, uuid(f38ea280-e090-11d3-a449-e3153319347c)]
interface nsIMsgCompSendFormat {
    const long AskUser = 0;
    const long PlainText = 1;
    const long HTML = 2;
    const long Both = 3;
};

[scriptable, uuid(e72c6981-992a-11d3-a449-eb15bb19bc7c)]
interface nsIMsgComposeStateListener : nsISupports
{
	/* ... */
	void        NotifyComposeFieldsReady();
	void        SendAndSaveProcessDone();
};

[scriptable, uuid(4E606270-B588-11D2-8289-00805F2A0107)]
interface nsIMsgCompose : nsISupports {

	/* ... */
	void Initialize(in nsIDOMWindow aWindow, in wstring originalMsgURI,
                    in MSG_ComposeType type, in MSG_ComposeFormat format,
                    in nsIMsgCompFields compFields,
                    in nsIMsgIdentity identity); 

	/* ... */
	void SetDocumentCharset(in wstring charset);
	
	/* ... */
	void RegisterStateListener(in nsIMsgComposeStateListener stateListener);

	/* ... */
	void UnregisterStateListener(in nsIMsgComposeStateListener stateListener);

	/* ... */
	void SendMsg(in MSG_DeliverMode deliverMode,
                 in nsIMsgIdentity identity);

	/* ... */
    void SendMsgEx(in MSG_DeliverMode deliverMode,
                   in nsIMsgIdentity identity,
                   in wstring addrTo, in wstring addrCc, in wstring addrBcc,
                   in wstring newsgroup, in wstring subject, in wstring body);
    
	/* ... */
    void CloseWindow();
    
    /*
    	AttachmentPrettyName will return only the leafName if the it's a file URL.
    	It will also convert the filename to the right character set.
    	This UI utility function should probably go into it's own class
    */
    wstring AttachmentPrettyName(in wstring url);
    
    /* GetNoHtmlRecipients: if null is passed as recipient, the function will automatically
        looks for all the recipients (to, cc, bcc) stored in the compose fields
    */
    wstring GetNoHtmlRecipients(in wstring recipients);
    
    /* GetNoHtmlNewsgroups: if null is passed as recipient, the function will automatically
        looks for newsgroups stored in compose fields 
    */
    wstring GetNoHtmlNewsgroups(in wstring newsgroups);
    
    /* BodyContainsHTMLTag: will return true if the node passed contains any HTML tag that really affect the formating 
    */
    boolean BodyContainsHTMLTag(in nsIDOMNode node);

    /* ResetNodeEventHandlers: Temporary API to go around bug 26528. THis API will be removed when bug 26528 is fixed.
    */
    void ResetNodeEventHandlers(in nsIDOMNode node);

	/* ... */
	attribute nsIEditorShell editor;

	/* ... */
    readonly attribute nsIDOMWindow domWindow;

	/* ... */
    readonly attribute nsIMsgCompFields compFields;
    
	/* ... */
    readonly attribute boolean composeHTML;

	/* ... */
    readonly attribute long wrapLength;

	/* by reading this value, you can determine if yes or not the message has been mofified
	   by the user. When you set this value to false, you reset the modification count
	   of the body to 0 (clean).
	*/
	attribute boolean bodyModified;
};

