/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *
 * This Original Code has been modified by IBM Corporation. Modifications
 * made by IBM described herein are Copyright (c) International Business
 * Machines Corporation, 2000.  Modifications to Mozilla code or
 * documentation identified per MPL Section 3.3
 *
 * Date             Modified by     Description of modification
 * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
 */
 
/*
 * This interface allows any module to access the encoder/decoder 
 * routines for RFC822 headers, base64 and QP encoders. This will 
 * allow any mail/news module to call on these routines.
 */

#include "nsISupports.idl"

%{C++

/* Opaque objects used by the encoder/decoder to store state. */
typedef struct MimeDecoderData MimeDecoderData;
typedef struct MimeEncoderData MimeEncoderData;

typedef nsresult (*PR_CALLBACK MimeConverterOutputCallback)
    (const char *buf, PRInt32 size, void *closure);

// default line length for calling the encoder
#define kMIME_ENCODED_WORD_SIZE       72 

// Max length of charset name. 
#define kMAX_CSNAME                   64 

%}

[ptr] native MimeDecoderDataPtr(MimeDecoderData);
[ptr] native MimeEncoderDataPtr(MimeEncoderData);
native MimeConverterOutputCallback(MimeConverterOutputCallback);

/**
 * These methods are all implemented by libmime to be used by 
 * modules that need to encode/decode mail headers
 */
[scriptable, uuid(ea5b631e-1dd1-11b2-be0d-e02825f300d0)]
interface nsIMimeConverter : nsISupports
{
    /**
     * Decode routine.
     *
     * @return 	decoded string, or null if no decoding is necessary
     *
     * XXXdmose should be marked [noscript], because the result is not
     * necessarily restricted to US-ASCII.  However, this method currently
     * needs to be used from JS for the junkmail plugin.
     */
    string decodeMimeHeaderToCString(in string header, 
			    in string default_charset,
			    in boolean override_charset,
			    in boolean eatContinuations);

    /** 
     * Decode routine (also converts output to unicode).  This routine is
     * deprecated, because the |wstring|s are now deprecated in favor of
     * |AString|s.
     * 
     * @return decoded string (never null on success)
     */
    wstring deprecatedDecodeMimeHeaderToWString(in string header, 
						in string default_charset,
						in boolean override_charset,
						in boolean eatContinuations);

    /** 
     * Decode routine (also converts output to unicode).
     * 
     * @return decoded string (never null on success)
     */
    AString decodeMimeHeader(in string header, 
				      in string default_charset,
				      in boolean override_charset,
				      in boolean eatContinuations);

    /**
     * Encode routine
     *
     * Marked not scriptable because |header| may be in a non-ASCII 
     * charset.
     */
    [noscript]
    string encodeMimePartIIStr(in string header,
			       in boolean structured, 
			       in string mailCharset, 
                               in long fieldnamelen,
                               in long encodedWordSize);

    /**
     * Encode routine (utf-8 input)
     *
     * Marked not scriptable because |header| may be non-ASCII, and UTF8 is
     * being returned.
     *
     * XXXdmose is the mailCharset param actually necessary?  I.E. isn't
     * it _always_ required to be UTF8?
     */
    [noscript] 
    string encodeMimePartIIStr_UTF8(in string header,
				    in boolean structured,
				    in string mailCharset,
				    in long fieldnamelen,
				    in long encodedWordSize);

    [noscript]
    MimeEncoderDataPtr b64EncoderInit(in MimeConverterOutputCallback output_fn,
				      in voidPtr closure);

    [noscript]
    MimeEncoderDataPtr qPEncoderInit(in MimeConverterOutputCallback output_fn,
				     in voidPtr closure);

    [noscript]
    MimeEncoderDataPtr uUEncoderInit(in string filename,
				     in MimeConverterOutputCallback output_fn,
				     in voidPtr closure);

    [noscript]
    void EncoderDestroy(in MimeEncoderDataPtr data, in boolean abort_p);

    [noscript]
    long EncoderWrite (in MimeEncoderDataPtr data, in string buffer,
		       in long size);
}; 

