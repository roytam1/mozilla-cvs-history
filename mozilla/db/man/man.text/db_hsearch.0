

NNAAMMEE
       hsearch - hsearch, hcreate, hdestroy

SSYYNNOOPPSSIISS
       ##ddeeffiinnee DDBB__DDBBMM__HHSSEEAARRCCHH    11
       ##iinncclluuddee <<ddbb..hh>>

       ttyyppeeddeeff eennuumm {{
               FFIINNDD,, EENNTTEERR
       }} AACCTTIIOONN;;

       ttyyppeeddeeff ssttrruucctt eennttrryy {{
               cchhaarr **kkeeyy;;
               vvooiidd **ddaattaa;;
       }} EENNTTRRYY;;

       EENNTTRRYY **
       hhsseeaarrcchh((EENNTTRRYY iitteemm,, AACCTTIIOONN aaccttiioonn));;

       iinntt
       hhccrreeaattee((ssiizzee__tt nneelleemm));;

       vvooiidd
       hhddeessttrrooyy((vvooiidd));;

DDEESSCCRRIIPPTTIIOONN
       The  _h_s_e_a_r_c_h  interface  to  the DB library is intended to
       provide source code compatibility  for  historic  applica-
       tions.  It is not recommended for any other purpose.

       To compile _h_s_e_a_r_c_h applications, replace the application's
       _#_i_n_c_l_u_d_e of the hsearch  include  file  (e.g.,  ``#include
       <search.h>'') with the following two lines:

              #define DB_DBM_HSEARCH    1
              #include <db.h>

       and recompile.

       The  _h_c_r_e_a_t_e  function creates an in-memory database.  The
       _n_e_l_e_m argument is an estimation of the maximum  number  of
       key/data pairs that will be stored in the database.

       The _h_d_e_s_t_r_o_y function discards the database.

       Database elements are structures of type _E_N_T_R_Y, which con-
       tain at least two fields: _k_e_y and _d_a_t_a.  The field _k_e_y  is
       declared  to be of type ``char *'' and is the key used for
       storage and retrieval.  The field _d_a_t_a is declared  to  be
       of type ``void *'' and is its associated data.

       The  _h_s_e_a_r_c_h  function  retrieves key/data pairs from, and
       stores key/data pairs into, the database.

       The _a_c_t_i_o_n argument must be set to one of two values:

       ENTER
            If the key does not already appear in  the  database,
            insert  the  key/data pair into the database.  If the
            key already appears in the database, return a  refer-
            ence  to  an _E_N_T_R_Y structure referencing the existing
            key and its associated data element.

       FIND Retrieve  the  specified  key/data  pair   from   the
            database.


CCOOMMPPAATTIIBBIILLIITTYY NNOOTTEESS
       Historically,  _h_s_e_a_r_c_h  required  applications to maintain
       the keys and data in the application's memory for as  long
       as  the  _h_s_e_a_r_c_h  database existed.  As DB handles key and
       data management internally, there is no  requirement  that
       applications  maintain local copies of key and data items,
       although the only effect of doing so should be the alloca-
       tion of additional memory.

DDIIAAGGNNOOSSTTIICCSS
       The  _h_c_r_e_a_t_e function returns 0 on failure, setting _e_r_r_n_o,
       and non-zero on success.

       The _h_s_e_a_r_c_h function returns a pointer to an ENTRY  struc-
       ture  on  success,  and NULL, setting _e_r_r_n_o, if the _a_c_t_i_o_n
       specified was FIND and the item  did  not  appear  in  the
       database.

EERRRROORRSS
       The  _h_c_r_e_a_t_e function may fail and return _e_r_r_n_o for any of
       the errors specified for  the  following  DB  and  library
       functions: db_open(3), and memset(3).

       The  _h_s_e_a_r_c_h function may fail and return _e_r_r_n_o for any of
       the errors specified for  the  following  DB  and  library
       functions: DB->get(3), DB->put(3), memset(3), and
       strlen(3).

       In addition, the _h_s_e_a_r_c_h function will fail, setting _e_r_r_n_o
       to  0,  if  the _a_c_t_i_o_n specified was FIND and the item did
       not appear in the database.

SSEEEE AALLSSOO
       The DB library is a family of  groups  of  functions  that
       provides  a  modular programming interface to transactions
       and record-oriented file  access.   The  library  includes
       support  for  transactions, locking, logging and file page
       caching, as well as various indexed access methods.   Many
       of  the  functional  groups  (e.g.,  the file page caching
       functions) are useful independent of the  other  DB  func-
       tions,  although  some  functional  groups  are explicitly
       based on other functional groups (e.g.,  transactions  and
       logging).   For  a  general description of the DB package,
       see _d_b___i_n_t_r_o(3).

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
