

NNAAMMEE
       dbm - dbminit, fetch, store, delete, firstkey, nextkey

       ndbm - dbm_open, dbm_close, dbm_fetch, dbm_store, dbm_delete,
       dbm_firstkey, dbm_nextkey, dbm_error, dbm_clearerr

SSYYNNOOPPSSIISS
       ##ddeeffiinnee DDBB__DDBBMM__HHSSEEAARRCCHH    11
       ##iinncclluuddee <<ddbb..hh>>

       ttyyppeeddeeff ssttrruucctt {{
            cchhaarr **ddppttrr;;
            iinntt ddssiizzee;;
       }} ddaattuumm;;

DDBBMM FFUUNNCCTTIIOONNSS
       iinntt
       ddbbmmiinniitt((cchhaarr **ffiillee));;

       ddaattuumm
       ffeettcchh((ddaattuumm kkeeyy));;

       iinntt
       ssttoorree((ddaattuumm kkeeyy,, ddaattuumm ccoonntteenntt));;

       iinntt
       ddeelleettee((ddaattuumm kkeeyy));;

       ddaattuumm
       ffiirrssttkkeeyy((vvooiidd));;

       ddaattuumm
       nneexxttkkeeyy((ddaattuumm kkeeyy));;

NNDDBBMM FFUUNNCCTTIIOONNSS
       DDBBMM **
       ddbbmm__ooppeenn((cchhaarr **ffiillee,, iinntt ffllaaggss,, iinntt mmooddee));;

       vvooiidd
       ddbbmm__cclloossee((DDBBMM **ddbb));;

       ddaattuumm
       ddbbmm__ffeettcchh((DDBBMM **ddbb,, ddaattuumm kkeeyy));;

       iinntt
       ddbbmm__ssttoorree((DDBBMM **ddbb,, ddaattuumm kkeeyy,, ddaattuumm ccoonntteenntt,, iinntt ffllaaggss));;

       iinntt
       ddbbmm__ddeelleettee((DDBBMM **ddbb,, ddaattuumm kkeeyy));;

       ddaattuumm
       ddbbmm__ffiirrssttkkeeyy((DDBBMM **ddbb));;

       ddaattuumm
       ddbbmm__nneexxttkkeeyy((DDBBMM **ddbb));;

       iinntt
       ddbbmm__eerrrroorr((DDBBMM **ddbb));;
       iinntt
       ddbbmm__cclleeaarreerrrr((DDBBMM **ddbb));;

DDEESSCCRRIIPPTTIIOONN
       The _d_b_m and _n_d_b_m interfaces to the DB library are intended
       to provide source code compatibility for historic applica-
       tions.   They  are  not recommended for any other purpose.
       The historic _d_b_m and _n_d_b_m  database  format  is  nnoott  sup-
       ported,  and databases previously built using the real _d_b_m
       or _n_d_b_m libraries cannot be read by the DB functions.

       To compile _d_b_m or _n_d_b_m applications, replace the  applica-
       tion's  _#_i_n_c_l_u_d_e  of  the  dbm or ndbm include file (e.g.,
       ``#include <dbm.h>'' or ``#include  <ndbm.h>'')  with  the
       following two lines:

              #define DB_DBM_HSEARCH    1
              #include <db.h>

       and  recompile.   If  the  application  attempts  to  load
       against  a  dbm  library  (e.g.,  ``-ldbm''),  remove  the
       library from the load line.

       _K_e_ys  and  _c_o_n_t_e_n_ts are described by the _d_a_t_u_m typedef.  A
       _d_a_t_u_m specifies a string of  _d_s_i_z_e  bytes  pointed  to  by
       _d_p_t_r.   Arbitrary  binary  data,  as  well  as normal text
       strings, are allowed.

DDBBMM FFUUNNCCTTIIOONNSS
       Before a database can be accessed, it must  be  opened  by
       _d_b_m_i_n_i_t.   This  will  open  and/or  create  the  database
       _f_i_l_e.db.   If  created,  the  database  file  is   created
       read/write  by  owner  only (as described in _c_h_m_o_d(2)) and
       modified by the process' umask value at the time  of  cre-
       ation  (see  _u_m_a_s_k(2)).   The  group  ownership of created
       files is based on the system and directory  defaults,  and
       is not further specified by DB.

       Once  open,  the  data  stored  under a key is accessed by
       _f_e_t_c_h and data is placed under a key by _s_t_o_r_e.  A key (and
       its  associated  contents) is deleted by _d_e_l_e_t_e.  A linear
       pass through all keys in a database may  be  made,  in  an
       (apparently) random order, by use of _f_i_r_s_t_k_e_y and _n_e_x_t_k_e_y.
       _F_i_r_s_t_k_e_y will return the first key in the database.   With
       any  key _n_e_x_t_k_e_y will return the next key in the database.
       This code will traverse the data base:

              for (key = firstkey();
                   key.dptr != NULL; key = nextkey(key))

NNDDBBMM FFUUNNCCTTIIOONNSS
       Before a database can be accessed, it must  be  opened  by
       _d_b_m___o_p_e_n.   This will open and/or create the database file
       _f_i_l_e.db depending on the flags  parameter  (see  _o_p_e_n(2)).

       If  created,  the  database file is created with mode _m_o_d_e
       (as described in _c_h_m_o_d(2)) and modified  by  the  process'
       umask  value  at the time of creation (see _u_m_a_s_k(2)).  The
       group ownership of created files is based  on  the  system
       and  directory  defaults,  and is not further specified by
       DB.

       Once open, the data stored under  a  key  is  accessed  by
       _d_b_m___f_e_t_c_h  and  data  is  placed under a key by _d_b_m___s_t_o_r_e.
       The _f_l_a_g_s field can be either DDBBMM__IINNSSEERRTT  or  DDBBMM__RREEPPLLAACCEE..
       DDBBMM__IINNSSEERRTT  will only insert new entries into the database
       and will not change an existing entry with the  same  key.
       DDBBMM__RREEPPLLAACCEE  will  replace an existing entry if it has the
       same key.  A key (and its associated contents) is  deleted
       by  _d_b_m___d_e_l_e_t_e.   A  linear  pass  through  all  keys in a
       database may be made, in an (apparently) random order,  by
       use  of  _d_b_m___f_i_r_s_t_k_e_y  and _d_b_m___n_e_x_t_k_e_y.  _D_b_m___f_i_r_s_t_k_e_y will
       return the first key in the  database.   _D_b_m___n_e_x_t_k_e_y  will
       return  the next key in the database.  This code will tra-
       verse the data base:

              for (key = dbm_firstkey(db);
                   key.dptr != NULL; key = dbm_nextkey(db))

       _D_b_m___e_r_r_o_r returns non-zero  when  an  error  has  occurred
       reading  or writing the database.  _D_b_m___c_l_e_a_r_e_r_r resets the
       error condition on the named database.

CCOOMMPPAATTIIBBIILLIITTYY NNOOTTEESS
       The historic _d_b_m and _n_d_b_m libraries created two underlying
       database files, traditionally named _f_i_l_e.dir and _f_i_l_e.pag.
       The DB  library  creates  a  single  database  file  named
       _f_i_l_e.db.   Applications  that  are aware of the underlying
       database file names may  require  additional  source  code
       modifications.

       The  historic _d_b_m_i_n_i_t interface required that the underly-
       ing ``.dir''  and  ``.pag''  files  already  exist  (empty
       databases  were  created  by creating zero-length ``.dir''
       and ``.pag'' files).  Applications that expect  to  create
       databases  using this method may require additional source
       code modifications.

       The historic _d_b_m___d_i_r_f_n_o and  _d_b_m___p_a_g_f_n_o  macros  are  sup-
       ported,  but  will  return  identical  file descriptors as
       there is only a single underlying  file  used  by  the  DB
       hashing  access  method.   Applications  using  both  file
       descriptors for locking may require additional source code
       modifications.

       If  an  application using the _n_d_b_m interface exits without
       closing the database, it may lose updates because  the  DB
       library   buffers  all  writes.   Such  applications  will
       require  additional  source  code  modifications  to  work
       correctly with the DB library.

DDBBMM DDIIAAGGNNOOSSTTIICCSS
       The _d_b_m_i_n_i_t function returns -1 on failure, setting _e_r_r_n_o,
       and 0 on success.

       The _f_e_t_c_h function sets the returned _d_a_t_u_m's _d_p_t_r field to
       NULL  on  failure,  setting  _e_r_r_n_o, and returns a non-NULL
       _d_p_t_r on success.

       The _s_t_o_r_e function returns -1 on failure,  setting  _e_r_r_n_o,
       and 0 on success.

       The  _d_e_l_e_t_e function returns -1 on failure, setting _e_r_r_n_o,
       and 0 on success.

       The _f_i_r_s_t_k_e_y function sets the returned _d_a_t_u_m's _d_p_t_r field
       to  NULL on failure, setting _e_r_r_n_o, and returns a non-NULL
       _d_p_t_r on success.

       The _n_e_x_t_k_e_y function sets the returned _d_a_t_u_m's _d_p_t_r  field
       to  NULL on failure, setting _e_r_r_n_o, and returns a non-NULL
       _d_p_t_r on success.

NNDDBBMM DDIIAAGGNNOOSSTTIICCSS
       The _d_b_m___o_p_e_n function returns  NULL  on  failure,  setting
       _e_r_r_n_o, and 0 on success.

       The  _d_b_m___f_e_t_c_h  function  sets  the  returned _d_a_t_u_m's _d_p_t_r
       field to NULL on failure, setting  _e_r_r_n_o,  and  returns  a
       non-NULL _d_p_t_r on success.

       The  _d_b_m___s_t_o_r_e  function  returns  -1  on failure, setting
       _e_r_r_n_o, 0 on success, and 1 if DBM_INSERT was set  and  the
       specified key already existed in the database.

       The  _d_b_m___d_e_l_e_t_e  function  returns  -1 on failure, setting
       _e_r_r_n_o, and 0 on success.

       The _d_b_m___f_i_r_s_t_k_e_y function sets the returned  _d_a_t_u_m's  _d_p_t_r
       field  to  NULL  on  failure, setting _e_r_r_n_o, and returns a
       non-NULL _d_p_t_r on success.

       The _d_b_m___n_e_x_t_k_e_y function sets the  returned  _d_a_t_u_m's  _d_p_t_r
       field  to  NULL  on  failure, setting _e_r_r_n_o, and returns a
       non-NULL _d_p_t_r on success.

       The _d_b_m___e_r_r_o_r function  returns  -1  on  failure,  setting
       _e_r_r_n_o, and 0 on success.

       The  _d_b_m___c_l_e_a_r_e_r_r  function returns -1 on failure, setting
       _e_r_r_n_o, and 0 on success.


EERRRROORRSS
       The _d_b_m_i_n_i_t function may fail and return _e_r_r_n_o for any  of
       the  errors  specified  for  the  following DB and library
       functions: dbm_close(3), and dbm_open(3).

       The _f_e_t_c_h function may fail and return _e_r_r_n_o  for  any  of
       the  errors  specified  for  the  following DB and library
       functions: dbm_fetch(3).

       The _s_t_o_r_e function may fail and return _e_r_r_n_o  for  any  of
       the  errors  specified  for  the  following DB and library
       functions: dbm_store(3).

       The _d_e_l_e_t_e function may fail and return _e_r_r_n_o for  any  of
       the  errors  specified  for  the  following DB and library
       functions: dbm_delete(3).

       The _f_i_r_s_t_k_e_y function may fail and return _e_r_r_n_o for any of
       the  errors  specified  for  the  following DB and library
       functions: dbm_firstkey(3).

       The _n_e_x_t_k_e_y function may fail and return _e_r_r_n_o for any  of
       the  errors  specified  for  the  following DB and library
       functions: dbm_nextkey(3).

       The _d_b_m___o_p_e_n function may fail and return _e_r_r_n_o for any of
       the  errors  specified  for  the  following DB and library
       functions: db_open(3), and memset(3).

       The _d_b_m___c_l_o_s_e function may fail and return _e_r_r_n_o  for  any
       of  the  errors specified for the following DB and library
       functions: DB->close(3).

       The _d_b_m___f_e_t_c_h function may fail and return _e_r_r_n_o  for  any
       of  the  errors specified for the following DB and library
       functions: DB->get(3), and memset(3).

       The _d_b_m___s_t_o_r_e function may fail and return _e_r_r_n_o  for  any
       of  the  errors specified for the following DB and library
       functions: DB->put(3), and memset(3).

       The _d_b_m___d_e_l_e_t_e function may fail and return _e_r_r_n_o for  any
       of  the  errors specified for the following DB and library
       functions: memset(3).

       The _d_b_m___f_i_r_s_t_k_e_y function may fail and  return  _e_r_r_n_o  for
       any  of  the  errors  specified  for  the following DB and
       library functions: DB->cursor(3), and memset(3).

       The _d_b_m___n_e_x_t_k_e_y function may fail and return _e_r_r_n_o for any
       of  the  errors specified for the following DB and library
       functions: DB->cursor(3), and memset(3).


SSEEEE AALLSSOO
       The DB library is a family of  groups  of  functions  that
       provides  a  modular programming interface to transactions
       and record-oriented file  access.   The  library  includes
       support  for  transactions, locking, logging and file page
       caching, as well as various indexed access methods.   Many
       of  the  functional  groups  (e.g.,  the file page caching
       functions) are useful independent of the  other  DB  func-
       tions,  although  some  functional  groups  are explicitly
       based on other functional groups (e.g.,  transactions  and
       logging).   For  a  general description of the DB package,
       see _d_b___i_n_t_r_o(3).

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
