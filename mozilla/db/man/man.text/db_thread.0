

NNAAMMEE
       db_thread - using threads in the DB library.

DDEESSCCRRIIPPTTIIOONN
       The  DB  library  is  a family of groups of functions that
       provides a modular programming interface  to  transactions
       and  record-oriented  file  access.   The library includes
       support for transactions, locking, logging and  file  page
       caching,  as well as various indexed access methods.  Many
       of the functional groups  (e.g.,  the  file  page  caching
       functions)  are  useful  independent of the other DB func-
       tions, although  some  functional  groups  are  explicitly
       based  on  other functional groups (e.g., transactions and
       logging).  For a general description of  the  DB  package,
       see _d_b___i_n_t_r_o(3).

       This  manual pages describes the specific details of using
       DB from within threaded programs.

       The DB library is not itself multi-threaded.  The  library
       was deliberately architected to not use threads internally
       because of the portability  problems  that  using  threads
       within   the  library  would  introduce.   Object  handles
       returned from  DB  library  functions  are  free-threaded,
       i.e.,  threads may use handles concurrently, by specifying
       the DB_THREAD flag to _d_b___a_p_p_i_n_i_t(3) (or, in the  C++  API,
       _D_b_E_n_v_:_:_a_p_p_i_n_i_t(3)) and the other subsystem open functions.
       Threading is assumed in the Java API, so no special  flags
       are  required,  and  DB functions will always behave as if
       the DB_THREAD flag was specified.

       DB supports multi-threaded applications  with  the  caveat
       that it loads and calls functions that are commonly avail-
       able in C language environments and which  may  not  them-
       selves  be  thread-safe.  Other than this usage, DB has no
       static data and maintains no local context  between  calls
       to  DB  functions.  To ensure that applications can safely
       use threads in the context of DB, porters to new operating
       systems  and/or  C  libraries must confirm that the system
       and C library functions used by the DB library are thread-
       safe.

       There  are  some additional caveats about using threads to
       access the DB library:

       +o The DB_THREAD flag must be specified for all  subsystems
         either explicitly or via the _d_b___a_p_p_i_n_i_t (_D_b_E_n_v_:_:_a_p_p_i_n_i_t)
         function in the C and C++ APIs.  Threading is assumed in
         the  Java  API, so no special flags are required, and DB
         functions will always behave as if  the  DB_THREAD  flag
         was specified.

         Setting  the DB_THREAD flag inconsistently may result in
         database corruption.

       +o Only a single thread may call the close function  for  a
         returned  database  or subsystem handle.  See _d_b___o_p_e_n(3)
         (_D_b_:_:_o_p_e_n(3)) and the appropriate subsystem manual pages
         for more information.

       +o Either the DB_DBT_MALLOC or DB_DBT_USERMEM flags must be
         set in a DBT  used  for  key  or  data  retrieval.   See
         _d_b___d_b_t(3) (_D_b_t(3)) for more information.

       +o The DB_CURRENT, DB_NEXT and DB_PREV flags to the _l_o_g___g_e_t
         (_D_b_L_o_g_:_:_g_e_t) function may not be used by a free-threaded
         handle.   If  such  calls are necessary, a thread should
         explicitly create a  unique  DB_LOG  handle  by  calling
         _l_o_g___o_p_e_n(3) (_D_b_L_o_g_:_:_o_p_e_n).  See _d_b___l_o_g(3) (_D_b_L_o_g(3)) for
         more information.

       +o Each database operation (i.e., any call  to  a  function
         underlying   the  handles  returned  by  _d_b___o_p_e_n(3)  and
         _d_b___c_u_r_s_o_r(3)) (_D_b(3) and _D_b_c(3)) is  normally  performed
         on  behalf  of  a  unique  locker.   If, within a single
         thread of control, multiple calls on behalf of the  same
         locker are desired, then transactions must be used.  For
         example, consider the case where a cursor scan locates a
         record,  and  then  based  on that record, accesses some
         other item in the database.  If these are done using the
         default  lockers  for  the handle, there is no guarantee
         that these two operations will  not  conflict.   If  the
         application  wishes  to guarantee that the operations do
         not conflict, locks must be  obtained  on  behalf  of  a
         transaction,  instead  of  the  default locker id, and a
         transaction must be specified to the cursor creation and
         the subsequent db call.

       +o Transactions  may  not span threads, i.e., each transac-
         tion must begin and end in the  same  thread,  and  each
         transaction may only be used by a single thread.

       +o Spinlocks  must  have  been  implemented  for  the  com-
         piler/architecture combination.  Attempting  to  specify
         the DB_THREAD flag will fail if spinlocks are not avail-
         able.

       +o The DB library makes a system call  to  pause  for  some
         number of microseconds when it is necessary to wait on a
         lock.  This may not be optimal, especially in a  thread-
         only  environment  where  it  will  be more efficient to
         explicitly yield the processor to another thread.  It is
         possible  to specify a yield function on an per-applica-
         tion basis, see _d_b___j_u_m_p___s_e_t(3) for more information.

CCOOMMPPIILLIINNGG TTHHRREEAADDEEDD AAPPPPLLIICCAATTIIOONNSS
       Special compile-time flags  are  required  when  compiling
       threaded  applications with the UNIX include files on some
       architectures.

       On IRIX, if you are compiling a threaded application,  you
       must compile with the -D_SGI_MP_SOURCE flag:
            cc -D_SGI_MP_SOURCE ...

       On OSF/1, if you are compiling a threaded application, you
       must compile with the -D_REENTRANT flag:

            cc -D_REENTRANT ...

       On Solaris, if you are compiling a  threaded  application,
       you  must compile with the -D_REENTRANT flag and link with
       the -lthread library:

            cc -D_REENTRANT ... -lthread

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
