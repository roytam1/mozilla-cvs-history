

NNAAMMEE
       db_recover - the DB database recovery utility

SSYYNNOOPPSSIISS
       ddbb__rreeccoovveerr [--ccvv] [--hh hhoommee]

DDEESSCCRRIIPPTTIIOONN
       The  _d_b___r_e_c_o_v_e_r  utility  must  be run after an unexpected
       application, DB, or system failure to restore the database
       to  a  consistent  state.   All committed transactions are
       guaranteed to appear after _d_b___r_e_c_o_v_e_r  has  run,  and  all
       uncommitted transactions will be completely undone.

       The options are as follows:

       --cc   Failure was catastrophic.

       --hh   Specify a home directory for the database.

       --vv   Run in verbose mode.

       In  the case of catastrophic failure, an archival copy, or
       ``snapshot'' of all database files must be restored  along
       with  all of the log files written since the database file
       snapshot was made.  (If disk space is a problem, log files
       may  be referenced by symbolic links).  For further infor-
       mation on creating a database snapshot, see ``DB  ARCHIVAL
       PROCEDURES'' in _d_b___a_r_c_h_i_v_e(1).

       If  the failure was not catastrophic, the files present on
       the system at the time of failure are sufficient  to  per-
       form recovery.

       If  log  files  are  missing, _d_b___r_e_c_o_v_e_r will identify the
       missing log file(s) and fail, in which  case  the  missing
       log  files  need  to  be  restored  and recovery performed
       again.

       The  _d_b___r_e_c_o_v_e_r  utility  attaches  to  DB  shared  memory
       regions.   In  order to avoid region corruption, it should
       always be given the chance to detach and exit  gracefully.
       To  cause  _d_b___r_e_c_o_v_e_r  to  clean up after itself and exit,
       send it an interrupt signal (SIGINT).

       The _d_b___r_e_c_o_v_e_r utility exits 0 on success, and  >0  if  an
       error occurs.

FFIILLEESSYYSSTTEEMM OOPPEERRAATTIIOONNSS
       FFiilleessyysstteemm  ooppeerraattiioonnss,, ee..gg..,, mmoovviinngg tthhee ddaattaabbaassee eennvviirroonn--
       mmeenntt ttoo aa ddiiffffeerreenntt mmaacchhiinnee oorr ffiillee ccrreeaattiioonn,, ddeelleettiioonn  oorr
       rreennaammiinngg,,  ccaannnnoott bbee ttrraannssaaccttiioonn pprrootteecctteedd..  For this rea-
       son, _d_b___r_e_c_o_v_e_r cannot re-create, delete or  rename  files
       as part of recovery.

       If  _d_b___r_e_c_o_v_e_r  cannot  find a database file referenced in
       the log, it will output a  warning  message  that  it  was
       unable to locate a file it expected to find.  This message
       is only a warning, as the file may have subsequently  been
       deleted  as  part of normal database operations before the
       failure occurred.  NNoottee tthhaatt ccoommmmiitttteedd  ttrraannssaaccttiioonnss  tthhaatt
       iinnvvoollvveedd  tthheessee  mmiissssiinngg  ffiilleess  aarree  rroolllleedd ffoorrwwaarrdd,, eevveenn
       tthhoouugghh tthhee ffiilleess wweerree nnoott ffoouunndd..  IIff tthhee  ffiilleess  wweerree  nnoott
       iinntteennttiioonnaallllyy  ddeelleetteedd  ((ee..gg..,, tthheeyy wweerree ccrreeaatteedd aafftteerr tthhee
       llaasstt ddaattaabbaassee ssnnaappsshhoott,, bbuutt wweerree lloosstt dduurriinngg  aa  ffaaiilluurree)),,
       tthheeyy  mmuusstt  bbee  mmaannuuaallllyy  ccrreeaatteedd  ((uussiinngg _d_b___o_p_e_n(3)), and
       _d_b___r_e_c_o_v_e_r must be rerun.

       Generally, it is simplest to perform filesystem operations
       at the same time as making a snapshot of the database.  To
       perform filesystem operations:

              1.   Cleanly shutdown database operations.
              2.   Rename, create or delete files.
              3.   Make a snapshot of the database.
              4.   Restart database applications.

       To cleanly shutdown database operations, all  applications
       accessing  the  database environment must be shutdown.  If
       the applications are not implemented such that they can be
       shutdown  gracefully  (i.e., closing all references to the
       database environment), _d_b___r_e_c_o_v_e_r must be  run  after  all
       applications  have been killed to ensure that the underly-
       ing database is consistent and flushed to disk.

RREECCOOVVEERRYY
       After an application or system failure, there are two pos-
       sible  approaches  to  database  recovery.  If there is no
       need to retain state across the failure, and all databases
       can  be started anew, the database home directory can sim-
       ply be removed and  recreated.   If  it  is  necessary  to
       retain   persistent   state   across  failures,  then  the
       _d_b___r_e_c_o_v_e_r(1) utility should be run for each  DB  applica-
       tion environment, i.e., each database home directory.

       The  _d_b___r_e_c_o_v_e_r utility will remove all the shared regions
       (which may have been corrupted by the failure),  establish
       the  end of the log by identifying the last record written
       to  the  log,  and  then  perform  transaction   recovery.
       Database applications must not be restarted until recovery
       completes.  During transaction recovery, all changes  made
       by aborted transactions are undone and all changes made by
       committed transactions are redone,  as  necessary.   After
       recovery  runs, the environment is properly initialized so
       that applications may be restarted.  Any time an  applica-
       tion crashes or the system fails, _d_b___r_e_c_o_v_e_r should be run
       on any exiting database environments.

       Additionally, there are  two  forms  of  recovery:  normal
       recovery   and  catastrophic  recovery.   The  DB  package
       defines catastrophic failure to be  failure  where  either
       the database or log files have been destroyed or corrupted
       from the point of view of the  filesystem.   For  example,
       catastrophic  failure  includes  the  case  where the disk
       drive on which either the database or logs are stored  has
       crashed,  or  when  filesystem recovery is unable to bring
       the database and log files  to  a  consistent  state  with
       respect  to  the filesystem.  If the failure is non-catas-
       trophic, i.e., the database files and log  are  accessible
       on  a  filesystem  that  has recovered cleanly, _d_b___r_e_c_o_v_e_r
       will review the logs and database files to ensure that all
       committed  transactions  appear  and  that all uncommitted
       transactions are undone.  If the failure is  catastrophic,
       a  snapshot  of  the  database  files and the archived log
       files must be restored onto the system.   Then  _d_b___r_e_c_o_v_e_r
       will  review  the  logs  and  database  files to bring the
       database to a consistent state as of the date of the  last
       archived  log  file.   Only  transactions committed before
       that date will appear in the database.  See _d_b___a_r_c_h_i_v_e _(_1_)
       for  specific  information  about archiving and recovering
       databases after catastrophic failure.


EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables affect  the  execution
       of _d_b___r_e_c_o_v_e_r:

       DB_HOME
            If the --hh option is not specified and the environment
            variable _D_B___H_O_M_E is set, it is used as  the  path  of
            the database home, as described in _d_b___a_p_p_i_n_i_t(3).

BBUUGGSS
       Future  versions of DB are expected to remove the restric-
       tion that database files must be manually  created  before
       recovery is performed.

SSEEEE AALLSSOO
       The  DB  library  is  a family of groups of functions that
       provides a modular programming interface  to  transactions
       and  record-oriented  file  access.   The library includes
       support for transactions, locking, logging and  file  page
       caching,  as well as various indexed access methods.  Many
       of the functional groups  (e.g.,  the  file  page  caching
       functions)  are  useful  independent of the other DB func-
       tions, although  some  functional  groups  are  explicitly
       based  on  other functional groups (e.g., transactions and
       logging).  For a general description of  the  DB  package,
       see _d_b___i_n_t_r_o(3).

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
