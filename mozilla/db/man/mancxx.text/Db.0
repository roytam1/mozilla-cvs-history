

NNAAMMEE
       Db - database access class

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       ssttaattiicc iinntt
       DDbb::::ooppeenn((ccoonnsstt cchhaarr **ffnnaammee,, DDBBTTYYPPEE ttyyppee,,
            uu__iinntt3322__tt ffllaaggss,, iinntt mmooddee,, DDbbEEnnvv **ddbbeennvv,, DDbbIInnffoo **ddbbiinnffoo,, DDbb ****ddbbpppp));;

       DDBBTTYYPPEE
       DDbb::::ggeett__ttyyppee((vvooiidd)) ccoonnsstt;;

       iinntt
       DDbb::::cclloossee((uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbb::::ccuurrssoorr((DDbbTTxxnn **ttxxnniidd,, DDbbcc ****ccuurrssoorrpp));;

       iinntt
       DDbb::::ddeell((DDbbtt **kkeeyy,, DDbbTTxxnn **ttxxnniidd));;

       iinntt
       DDbb::::ffdd((iinntt **ffddpp));;

       iinntt
       DDbb::::ggeett((DDbbTTxxnn **ttxxnniidd,, DDbbtt **kkeeyy,, DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbb::::ppuutt((DDbbTTxxnn **ttxxnniidd,, DDbbtt **kkeeyy,, DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbb::::ssttaatt((vvooiidd **sspp,, vvooiidd **((**ddbb__mmaalllloocc))((ssiizzee__tt)),, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbb::::ssyynncc((uu__iinntt3322__tt ffllaaggss));;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       This manual page describes the Db class, which is the cen-
       ter of access activity.

       The currently supported file formats are btree, hashed and
       recno.  The btree format is a representation of a  sorted,
       balanced tree structure.  The hashed format is an extensi-
       ble, dynamic hashing scheme.  The  recno  format  supports
       fixed  or  variable  length  records (optionally retrieved
       from a flat text file).

       Storage and retrieval for the Db access methods are  based
       on  key/data  pairs,  using the Dbt class.  See _D_b_t(3) for
       specific information on the structure and capabilities  of
       a Dbt.

       The _D_b_:_:_o_p_e_n method opens the database represented by _f_i_l_e
       for both reading and writing.  Files never intended to  be
       shared  or preserved on disk may be created by setting the
       file parameter to NULL.

       The _D_b_:_:_o_p_e_n method copies a pointer to a Db  object  into
       the  memory  location  referenced by _d_b_p_p.  The methods of
       this object allow you to perform various database actions,
       as described below.  The _D_b_:_:_o_p_e_n method throws a _D_b_E_x_c_e_p_-
       _t_i_o_n(3) or returns the value of _e_r_r_n_o on failure and 0  on
       success.

       Note,  while  most  of  the access methods use _f_i_l_e as the
       name of an underlying file on disk, this  is  not  guaran-
       teed.   Also,  calling  _D_b_:_:_o_p_e_n is a reasonably expensive
       operation.  (This is based on a model where the DBMS keeps
       a  set  of  files open for a long time rather than opening
       and closing them on each query.)

       The _t_y_p_e argument is of type DBTYPE  (as  defined  in  the
       <db_cxx.h>  include  file)  and  must  be  set  to  one of
       DB_BTREE, DB_HASH, DB_RECNO or  DB_UNKNOWN.   If  _t_y_p_e  is
       DB_UNKNOWN,  the  database must already exist and _D_b_:_:_o_p_e_n
       will then determine if it is of type DB_BTREE, DB_HASH  or
       DB_RECNO.

       The  _f_l_a_g_s  and  _m_o_d_e  arguments specify how files will be
       opened and/or created when they don't already exist.   The
       flags value is specified by oorr'ing together one or more of
       the following values:

       DB_CREATE
            Create any underlying files, as  necessary.   If  the
            files  do not already exist and the DB_CREATE flag is
            not specified, the call will fail.


       DB_NOMMAP
            Do not map this  file  (see  _D_b_M_p_o_o_l(3)  for  further
            information).


       DB_RDONLY
            Open  the  database for reading only.  Any attempt to
            write the database using the access methods will fail
            regardless  of the actual permissions of any underly-
            ing files.


       DB_THREAD
            Cause the Db handle returned by the  _D_b_:_:_o_p_e_n  method
            to  be  useable  by  multiple threads within a single
            address space, i.e., to be ``free-threaded''.


       DB_TRUNCATE
            ``Truncate'' the database if it exists, i.e.,  behave
            as  if the database were just created, discarding any
            previous contents.

       All files created by the access methods are  created  with
       mode  _m_o_d_e  (as described in _c_h_m_o_d(2)) and modified by the
       process'  umask  value  at  the  time  of  creation   (see
       _u_m_a_s_k(2)).   The group ownership of created files is based
       on the system and directory defaults, and is  not  further
       specified by DB.

       See  _D_b_E_n_v(3) for a description of the _d_b_e_n_v argument, and
       _D_b_I_n_f_o(3) for a description of the _d_b_i_n_f_o argument.

DDbb OOPPEERRAATTIIOONNSS
       The Db object returned by _D_b_:_:_o_p_e_n  describes  a  database
       type,  and  includes a set of functions to perform various
       actions, as described below.  The methods for  Db  are  as
       follows:


       DBTYPE Db::get_type(void);
            The  type  of  the underlying access method (and file
            format).   Returns  one  of  DB_BTREE,   DB_HASH   or
            DB_RECNO.   This  value  may be used to determine the
            type of the database after  a  return  from  _D_b_:_:_o_p_e_n
            with the _t_y_p_e argument set to DB_UNKNOWN.


       int Db::close(u_int32_t flags);
            A  method  to  flush  any cached information to disk,
            close any open cursors (see _D_b_c(3)), free  any  allo-
            cated  resources,  and  close  any  underlying files.
            Since key/data pairs are cached in memory, failing to
            sync  the  file  with  the  _c_l_o_s_e  or _s_y_n_c method may
            result in inconsistent or lost information.

            The _f_l_a_g_s parameter must be set to 0 or the following
            value:


            DB_NOSYNC
                 Do not flush cached information to disk.

            The  DB_NOSYNC flag is a dangerous option.  It should
            only be set if the application is doing logging (with
            transactions)  so  that  the  database is recoverable
            after a  system  or  application  crash,  or  if  the
            database  is  always generated from scratch after any
            system or application crash.

            IItt iiss iimmppoorrttaanntt ttoo uunnddeerrssttaanndd  tthhaatt  fflluusshhiinngg  ccaacchheedd
            iinnffoorrmmaattiioonn  ttoo  ddiisskk  oonnllyy  mmiinniimmiizzeess  tthhee wwiinnddooww ooff
            ooppppoorrttuunniittyy ffoorr ccoorrrruupptteedd ddaattaa..  While  unlikely,  it
            is  possible  for  database corruption to happen if a
            system or application crash occurs while writing data
            to  the database.  To ensure that database corruption
            never occurs, applications must either: use  transac-
            tions  and  logging with automatic recovery, use log-
            ging and application-specific  recovery,  or  edit  a
            copy  of  the  database,  and,  once all applications
            using the database have  successfully  called  _c_l_o_s_e,
            replace  the original database with the updated copy.

            When multiple threads are using the Db handle concur-
            rently,  only  a single thread may call the Db handle
            close method.

            The _c_l_o_s_e method throws a _D_b_E_x_c_e_p_t_i_o_n(3)  or  returns
            the value of _e_r_r_n_o on failure and 0 on success.


       int Db::cursor(DbTxn *txnid, Dbc **cursorp);
            A  method to create a cursor and copy a pointer to it
            into the memory referenced by _c_u_r_s_o_r_p.

            A cursor is an  object  used  to  provide  sequential
            access through a database.


            If  the file is being accessed under transaction pro-
            tection, the _t_x_n_i_d  parameter  is  a  transaction  ID
            returned  from _t_x_n___b_e_g_i_n, otherwise, NULL.  If trans-
            action protection is enabled, cursors must be  opened
            and  closed  within the context of a transaction, and
            the _t_x_n_i_d parameter specifies the transaction context
            in which the cursor may be used.  See _D_b_c(3) for more
            information.

            The _c_u_r_s_o_r method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or  returns
            the value of _e_r_r_n_o on failure and 0 on success.


       int Db::del(DbTxn *txnid, Dbt *key, u_int32_t flags);
            A  method to remove key/data pairs from the database.
            The key/data pair associated with the  specified  _k_e_y
            is  discarded  from the database.  In the presence of
            duplicate key values, all records associated with the
            designated key will be discarded.

            If  the  file  is  being  accessed  under transaction
            protection, the _t_x_n_i_d parameter is a  transaction  ID
            returned from _t_x_n___b_e_g_i_n, otherwise, NULL.

            The  _f_l_a_g_s parameter is currently unused, and must be
            set to 0.

            The _d_e_l method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns the
            value  of _e_r_r_n_o on failure, 0 on success, and DB_NOT-
            FOUND if the specified _k_e_y did not exist in the file.


       int Db::fd(int *fdp);
            A method that copies a file descriptor representative
            of the underlying database into the memory referenced
            by  _f_d_p.  A file descriptor referencing the same file
            will be returned to all processes that call  _D_b_:_:_o_p_e_n
            with  the  same  _f_i_l_e argument.  This file descriptor
            may be safely used as an argument to the _f_c_n_t_l(2) and
            _f_l_o_c_k(2)  locking  functions.  The file descriptor is
            not necessarily associated with any of the underlying
            files used by the access method.

            The  _f_d method only supports a coarse-grained form of
            locking.  Applications should use  the  lock  manager
            where possible.

            The  _f_d method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns the
            value of _e_r_r_n_o on failure and 0 on success.


       int Db::get(DbTxn *txnid, Dbt *key, Dbt *data, u_int32_t
            flags);
            A  method  that  is  an interface for keyed retrieval
            from the database.  The address  and  length  of  the
            data  associated  with the specified _k_e_y are returned
            in the object referenced by _d_a_t_a.

            In the presence of duplicate  key  values,  _g_e_t  will
            return  the  first  data item for the designated key.
            Duplicates are sorted by insert  order  except  where
            this  order has been overridden by cursor operations.
            RReettrriieevvaall ooff dduupplliiccaatteess rreeqquuiirreess tthhee  uussee  ooff  ccuurrssoorr
            ooppeerraattiioonnss..  See _D_b_c(3) for details.

            If  the file is being accessed under transaction pro-
            tection, the _t_x_n_i_d  parameter  is  a  transaction  ID
            returned from _t_x_n___b_e_g_i_n, otherwise, NULL.

            The _f_l_a_g_s parameter must be set to 0 or the following
            value:


            DB_GET_RECNO
                 Retrieve  a  specific  numbered  record  from  a
                 database.   Upon  return,  both the _k_e_y and _d_a_t_a
                 items will have been filled  in,  not  just  the
                 data  item  as is done for all other uses of the
                 _g_e_t method.

                 For DB_GET_RECNO to be specified, the underlying
                 database must be of type btree, and it must have
                 been  created  with  the  DB_RECNUM  flag   (see
                 _D_b_:_:_o_p_e_n(3)).   In  this case, the _d_a_t_a field of
                 the _k_e_y must be a pointer to a  memory  location
                 of type _d_b___r_e_c_n_o___t, as described in _D_b_t(3).

            If the database is a recno database and the requested
            key exists, but was never explicitly created  by  the
            application  or  was  later  deleted,  the _g_e_t method
            returns DB_KEYEMPTY.  Otherwise, if the requested key
            isn't in the database, the _g_e_t method returns DB_NOT-
            FOUND.  Otherwise, the _g_e_t method throws  a  _D_b_E_x_c_e_p_-
            _t_i_o_n(3)  or returns the value of _e_r_r_n_o on failure and
            0 on success.


       int Db::put(DbTxn *txnid, Dbt *key, Dbt *data, u_int32_t
            flags);
            A method to store key/data pairs in the database.  If
            the database supports duplicates, the _p_u_t method adds
            the new data value at the end of the duplicate set.

            If  the file is being accessed under transaction pro-
            tection, the _t_x_n_i_d  parameter  is  a  transaction  ID
            returned from _t_x_n___b_e_g_i_n, otherwise, NULL.

            The  flags  value is specified by oorr'ing together one
            or more of the following values:


            DB_APPEND
                 Append the key/data  pair  to  the  end  of  the
                 database.   For  DB_APPEND  to be specified, the
                 underlying database must be of type recno.   The
                 record   number   allocated  to  the  record  is
                 returned in the specified _k_e_y.


            DB_NOOVERWRITE
                 Enter the new key/data pair only if the key does
                 not already appear in the database.

            The  default  behavior  of the _p_u_t method is to enter
            the  new  key/data  pair,  replacing  any  previously
            existing  key if duplicates are disallowed, or to add
            a duplicate entry if duplicates are allowed.  Even if
            the  designated database allows duplicates, a call to
            _p_u_t with the DB_NOOVERWRITE flag set will fail if the
            key already exists in the database.

            The _p_u_t method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns the
            value  of  _e_r_r_n_o  on  failure,  0  on  success,   and
            DB_KEYEXIST  if  the  DB_NOOVERWRITE _f_l_a_g was set and
            the key already exists in the file.


       int Db::sync(u_int32_t flags);
            A method to flush any cached information to disk.  If
            the  database  is in memory only, the _s_y_n_c method has
            no effect and will always succeed.

            The _f_l_a_g_s parameter is currently unused, and must  be
            set to 0.

            See  the _c_l_o_s_e method description above for a discus-
            sion of Db and cached data.

            The _s_y_n_c method throws a  _D_b_E_x_c_e_p_t_i_o_n(3)  or  returns
            the value of _e_r_r_n_o on failure and 0 on success.


       int Db::stat(void *sp,
                 void *(*db_malloc)(size_t), u_int32_t flags);
            A method to create a statistical structure and copy a
            pointer to it into user-specified  memory  locations.
            Specifically,  if  _s_p  is  non-NULL, a pointer to the
            statistics for the database are copied into the  mem-
            ory location it references.

            Statistical  structures are created in allocated mem-
            ory.  If _d_b___m_a_l_l_o_c is non-NULL, it is called to allo-
            cate the memory, otherwise, the library function _m_a_l_-
            _l_o_c(3) is used.  The function  _d_b___m_a_l_l_o_c  must  match
            the calling conventions of the _m_a_l_l_o_c(3) library rou-
            tine.  Regardless,  the  caller  is  responsible  for
            deallocating  the returned memory.  To deallocate the
            returned memory, free each returned  memory  pointer;
            pointers inside the memory do not need to be individ-
            ually freed.

            IInn tthhee pprreesseennccee  ooff  mmuullttiippllee  tthhrreeaaddss  oorr  pprroocceesssseess
            aacccceessssiinngg  aann  aaccttiivvee ddaattaabbaassee,, tthhee rreettuurrnneedd iinnffoorrmmaa--
            ttiioonn mmaayy bbee oouutt--ooff--ddaattee..

            TThhiiss mmeetthhoodd mmaayy  aacccceessss  aallll  ooff  tthhee  ppaaggeess  iinn  tthhee
            ddaattaabbaassee,,  aanndd  tthheerreeffoorree  mmaayy iinnccuurr aa sseevveerree ppeerrffoorr--
            mmaannccee ppeennaallttyy aanndd hhaavvee oobbvviioouuss  nneeggaattiivvee  eeffffeeccttss  oonn
            tthhee uunnddeerrllyyiinngg bbuuffffeerr ppooooll..


            The _f_l_a_g_s parameter must be set to 0 or the following
            value:
            DB_RECORDCOUNT
                 In the case of a btree or recno  database,  fill
                 in  the  _b_t___n_r_e_c_s  field, but do not collect any
                 other information.  This flag makes  it  reason-
                 able  for applications to request a record count
                 from a database without incurring a  performance
                 penalty.

            The  _s_t_a_t  method  throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns
            the value of _e_r_r_n_o on failure and 0 on success.


            In the case of a btree or recno database, the statis-
            tics  are stored in a structure of type DB_BTREE_STAT
            (typedef'd in <db_cxx.h>).  The following fields will
            be filled in:

            u_int32_t bt_magic;
                 Magic number that identifies the file as a btree
                 file.
            u_int32_t bt_version;
                 The version of the btree file type.
            u_int32_t bt_flags;
                 Permanent  database  flags,  including   DB_DUP,
                 DB_FIXEDLEN, DB_RECNUM and DB_RENUMBER.
            u_int32_t bt_minkey;
                 The _b_t___m_i_n_k_e_y value specified to _D_b_:_:_o_p_e_n(3), if
                 any.
            u_int32_t bt_re_len;
                 The _r_e___l_e_n value specified  to  _D_b_:_:_o_p_e_n(3),  if
                 any.
            u_int32_t bt_re_pad;
                 The  _r_e___p_a_d  value  specified to _D_b_:_:_o_p_e_n(3), if
                 any.
            u_int32_t bt_pagesize;
                 Underlying tree page size.
            u_int32_t bt_levels;
                 Number of levels in the tree.
            u_int32_t bt_nrecs;
                 Number of data items in the  tree  (since  there
                 may  be multiple data items per key, this number
                 may not be the same as the number of keys).
            u_int32_t bt_int_pg;
                 Number of tree internal pages.
            u_int32_t bt_leaf_pg;
                 Number of tree leaf pages.
            u_int32_t bt_dup_pg;
                 Number of tree duplicate pages.
            u_int32_t bt_over_pg;
                 Number of tree overflow pages.
            u_int32_t bt_free;
                 Number of pages on the free list.
            u_int32_t bt_freed;
                 Number of pages made available for reuse because
                 they were emptied.
            u_int32_t bt_int_pgfree;
                 Number of bytes free in tree internal pages.
            u_int32_t bt_leaf_pgfree;
                 Number of bytes free in tree leaf pages.
            u_int32_t bt_dup_pgfree;
                 Number of bytes free in tree duplicate pages.
            u_int32_t bt_over_pgfree;
                 Number of bytes free in tree overflow pages.
            u_int32_t bt_pfxsaved;
                 Number of bytes saved by prefix compression.
            u_int32_t bt_split;
                 Total  number of tree page splits (includes fast
                 and root splits).
            u_int32_t bt_rootsplit;
                 Number of root page splits.
            u_int32_t bt_fastsplit;
                 Number of fast splits.   When  sorted  keys  are
                 added  to the database, the Db btree implementa-
                 tion will split left or right  to  increase  the
                 page-fill  factor.   This number is a measure of
                 how often it was possible to make such a  split.
            u_int32_t bt_added;
                 Number of keys added.
            u_int32_t bt_deleted;
                 Number of keys deleted.
            u_int32_t bt_get;
                 Number  of  keys  retrieved.   (Note, this value
                 will not reflect any  keys  retrieved  when  the
                 database was open for read-only access, as there
                 is no permanent location to store  the  informa-
                 tion in this case.)
            u_int32_t bt_cache_hit;
                 Number  of  hits in tree fast-insert code.  When
                 sorted keys are added to the  database,  the  Db
                 btree  implementation  will  check the last page
                 where an insert occurred  before  doing  a  full
                 lookup.   This  number is a measure of how often
                 the lookup was successful.
            u_int32_t bt_cache_miss;
                 Number of misses in tree fast-insert code.   See
                 the  description of bt_cache_hit; this number is
                 a measure of how often the lookup failed.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables affect  the  execution
       of _D_b_:_:_o_p_e_n:

       DB_HOME
            If  the  _d_b_e_n_v  argument  to _D_b_:_:_o_p_e_n was initialized
            using _d_b___a_p_p_i_n_i_t, the  environment  variable  DB_HOME
            may  be used as the path of the database home for the
            interpretation of the _d_i_r argument  to  _D_b_:_:_o_p_e_n,  as
            described  in  _d_b___a_p_p_i_n_i_t(3).  Specifically, _D_b_:_:_o_p_e_n
            is affected by  the  configuration  string  value  of
            DB_DATA_DIR.

EEXXAAMMPPLLEESS
       Applications  that  create  short-lived databases that are
       discarded or recreated  when  the  system  fails  and  are
       unconcerned with concurrent access and loss of data due to
       catastrophic failure, may wish to use the  _D_b_:_:_o_p_e_n  func-
       tionality  without  other  parts  of the Db library.  Such
       applications will only be concerned  with  the  Db  access
       methods.   The  Db access methods will use the memory pool
       subsystem, but the application is unlikely to be aware  of
       this.   See the file _e_x_a_m_p_l_e_s___c_x_x_/_A_c_c_e_s_s_E_x_a_m_p_l_e_._c_p_p in the
       Db source distribution for a C++ language code example  of
       how such an application might use the Db library.

EERRRROORRSS
       Methods  marked as returning _e_r_r_n_o will, by default, throw
       an exception that encapsulates the error information.  The
       default error behavior can be changed, see _D_b_E_x_c_e_p_t_i_o_n(3).

       The _D_b_:_:_o_p_e_n method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: Db::sync(3),
       DbLock::get(3), DbLock::put(3), DbLockTab::id(3), DbLock-
       Tab::vec(3), DbLog::db_register(3), DbLog::put(3), DbM-
       pool::close(3), DbMpool::db_register(3), DbMpool::open(3),
       DbMpoolFile::close(3), DbMpoolFile::get(3), DbM-
       poolFile::open(3), DbMpoolFile::put(3), DbM-
       poolFile::set(3), DbMpoolFile::sync(3), calloc(3),
       close(2), fcntl(2), fflush(3), malloc(3), memcpy(3), mem-
       move(3), memset(3), mmap(2), munmap(2), open(2), read(2),
       realloc(3), sigfillset(3), sigprocmask(2), stat(2), str-
       cpy(3), strdup(3), strerror(3), strlen(3), time(3), and
       unlink(2).

       In addition, the _D_b_:_:_o_p_e_n method  may  fail  and  throw  a
       _D_b_E_x_c_e_p_t_i_o_n(3)  or  return  _e_r_r_n_o for the following condi-
       tions:

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag  value  or  parameter  was  specified
            (e.g., unknown database type, page size, hash method,
            recno pad byte, byte order) or a flag value or param-
            eter that is incompatible with the current _f_i_l_e spec-
            ification.

            The DB_THREAD flag was specified  and  spinlocks  are
            not implemented for this architecture.


            There  is  a  mismatch  between the version number of
            _f_i_l_e and the software.

            A  _r_e___s_o_u_r_c_e  file  was  specified  with  either  the
            DB_THREAD  flag  or  a  non-NULL _t_x___i_n_f_o field in the
            DbEnv argument to _D_b_:_:_o_p_e_n.

       [ENOENT]
            A non-existent _r_e___s_o_u_r_c_e file was specified.

       [EPERM]
            Database corruption  was  detected.   All  subsequent
            database  calls  (other  than  _D_b_:_:_c_l_o_s_e) will return
            EPERM.

       The _D_b_:_:_c_l_o_s_e method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: Db::sync(3),
       DbLock::get(3), DbLock::put(3), DbLockTab::vec(3),
       DbLog::db_register(3), DbLog::put(3), DbMpool::close(3),
       DbMpoolFile::close(3), DbMpoolFile::get(3), DbM-
       poolFile::put(3), DbMpoolFile::set(3), DbM-
       poolFile::sync(3), calloc(3), close(2), fflush(3), mal-
       loc(3), memcpy(3), memmove(3), memset(3), munmap(2), real-
       loc(3), and strerror(3).

       The _D_b_:_:_c_u_r_s_o_r method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: calloc(3).

       In  addition,  the  _D_b_:_:_c_u_r_s_o_r method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

       The _D_b_:_:_d_e_l method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3),
       DbLog::put(3), DbMpoolFile::get(3), DbMpoolFile::put(3),
       DbMpoolFile::set(3), calloc(3), fcntl(2), fflush(3), mal-
       loc(3), memcmp(3), memcpy(3), memmove(3), memset(3), real-
       loc(3), and strerror(3).


       In addition, the _D_b_:_:_d_e_l method may fail and throw a _D_b_E_x_-
       _c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following conditions:

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

       [EPERM]
            Database corruption  was  detected.   All  subsequent
            database  calls  (other  than  _D_b_:_:_c_l_o_s_e) will return
            EPERM.

       In addition, the _D_b_:_:_f_d method may fail and throw a  _D_b_E_x_-
       _c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following conditions:

       [ENOENT]
            The   _D_b_:_:_f_d  method  was  called  for  an  in-memory
            database, or no underlying file has yet been created.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

       The _D_b_:_:_g_e_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3),
       DbLog::put(3), DbMpoolFile::get(3), DbMpoolFile::put(3),
       DbMpoolFile::set(3), Dbc::get(3), calloc(3), fcntl(2),
       fflush(3), malloc(3), memcmp(3), memcpy(3), memmove(3),
       memset(3), realloc(3), and strerror(3).

       In addition, the _D_b_:_:_g_e_t method may fail and throw a _D_b_E_x_-
       _c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following conditions:

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

            The DB_THREAD flag was specified to  the  _D_b_:_:_o_p_e_n(3)
            method  and neither the DB_DBT_MALLOC or DB_DBT_USER-
            MEM flags were set in the Dbt.

            A record number of 0 was specified.

       [EPERM]
            Database corruption  was  detected.   All  subsequent
            database  calls  (other  than  _D_b_:_:_c_l_o_s_e) will return
            EPERM.

       The _D_b_:_:_p_u_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3),
       DbLog::put(3), DbMpoolFile::get(3), DbMpoolFile::put(3),
       DbMpoolFile::set(3), calloc(3), fcntl(2), fflush(3), mal-
       loc(3), memcmp(3), memcpy(3), memmove(3), memset(3), real-
       loc(3), and strerror(3).

       In addition, the _D_b_:_:_p_u_t method may fail and throw a _D_b_E_x_-
       _c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following conditions:

       [EACCES]
            An attempt was made to modify a read-only database.

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

            A record number of 0 was specified.

            An attempt was made to add a record to a fixed-length
            database that was too large to fit.

            An attempt was made to do a partial put.

       [EPERM]
            Database corruption  was  detected.   All  subsequent
            database  calls  (other  than  _D_b_:_:_c_l_o_s_e) will return
            EPERM.

       [ENOSPC]
            A btree exceeded the maximum btree depth (255).

       The _D_b_:_:_s_t_a_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3), DbM-
       poolFile::get(3), DbMpoolFile::put(3), calloc(3),
       fcntl(2), fflush(3), malloc(3), memcpy(3), and  memset(3).

       The _D_b_:_:_s_y_n_c method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: Db::get(3),
       Db::sync(3), DbLock::get(3), DbLock::put(3), DbLock-
       Tab::id(3), DbLockTab::vec(3), DbLog::put(3), DbM-
       poolFile::get(3), DbMpoolFile::put(3),

       DbMpoolFile::set(3), DbMpoolFile::sync(3), calloc(3),
       close(2), fcntl(2), fflush(3), malloc(3), memcpy(3), mem-
       move(3), memset(3), munmap(2), open(2), realloc(3), str-
       error(3), unlink(2), and write(2).

       In  addition,  the  _D_b_:_:_s_y_n_c  method  may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

SSEEEE AALLSSOO
       _T_h_e  _U_b_i_q_u_i_t_o_u_s  _B_-_t_r_e_e,  Douglas Comer, ACM Comput. Surv.
       11, 2 (June 1979), 121-138.

       _P_r_e_f_i_x _B_-_t_r_e_e_s, Bayer and Unterauer, ACM  Transactions  on
       Database Systems, Vol. 2, 1 (March 1977), 11-26.

       _T_h_e  _A_r_t  _o_f  _C_o_m_p_u_t_e_r  _P_r_o_g_r_a_m_m_i_n_g  _V_o_l_.  _3_:  _S_o_r_t_i_n_g _a_n_d
       _S_e_a_r_c_h_i_n_g, D.E. Knuth, 1968, pp 471-480.

       _D_y_n_a_m_i_c _H_a_s_h _T_a_b_l_e_s, Per-Ake Larson, Communications of the
       ACM, April 1988.

       _A  _N_e_w  _H_a_s_h  _P_a_c_k_a_g_e _f_o_r _U_N_I_X, Margo Seltzer, USENIX Pro-
       ceedings, Winter 1991.

       _D_o_c_u_m_e_n_t  _P_r_o_c_e_s_s_i_n_g  _i_n  _a  _R_e_l_a_t_i_o_n_a_l  _D_a_t_a_b_a_s_e  _S_y_s_t_e_m,
       Michael   Stonebraker,   Heidi  Stettner,  Joseph  Kalash,
       Antonin  Guttman,  Nadene  Lynn,  Memorandum  No.  UCB/ERL
       M82/32, May 1982.

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
