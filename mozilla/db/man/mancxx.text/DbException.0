

NNAAMMEE
       DbException - Exception class for Db activity

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       DDbbEExxcceeppttiioonn::::DDbbEExxcceeppttiioonn((iinntt eerrrr));;
       DDbbEExxcceeppttiioonn::::DDbbEExxcceeppttiioonn((ccoonnsstt cchhaarr **ddeessccrriippttiioonn));;
       DDbbEExxcceeppttiioonn::::DDbbEExxcceeppttiioonn((ccoonnsstt cchhaarr **pprreeffiixx,, iinntt eerrrr));;
       DDbbEExxcceeppttiioonn::::DDbbEExxcceeppttiioonn((ccoonnsstt cchhaarr **pprreeffiixx11,,
            ccoonnsstt cchhaarr **pprreeffiixx22,, iinntt eerrrr));;

       ccoonnsstt iinntt
       DDbbEExxcceeppttiioonn::::ggeett__eerrrrnnoo(());;

       vviirrttuuaall ccoonnsstt cchhaarr **
       DDbbEExxcceeppttiioonn::::wwhhaatt(()) ccoonnsstt;;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       This manual page describes the DbException class  and  how
       it is used by the various Db* classes.


       Most  methods  in  the  Db  classes return an int but also
       throw an exception.  This allows for two  different  error
       behaviors,  that  are  known as _e_r_r_o_r _m_o_d_e_l_s.  By default,
       the error model is configured to throw an exception  when-
       ever  a  serious  error occurs.  This generally allows for
       cleaner logic for transaction processing, as a  try  block
       can  surround  a  single  transaction.  Alternatively, the
       error model can  be  set  to  not  throw  exceptions,  and
       instead request the individual function to return an error
       code.   The  error  model  can  be   changed   using   the
       _D_b_E_n_v_:_:_s_e_t___e_r_r_o_r___m_o_d_e_l method, see _D_b_E_n_v(3).

       A  DbException object contains an informational string and
       an errno.   The  errno  can  be  obtained  using  _D_b_E_x_c_e_p_-
       _t_i_o_n_:_:_g_e_t___e_r_r_n_o().    The   informational  string  can  be
       obtained using _D_b_E_x_c_e_p_t_i_o_n_:_:_w_h_a_t().

       We expect in the future that this class will inherit  from
       the  standard class exception, but certain language imple-
       mentation bugs currently prevent this on some platforms.

       Some methods may return non-zero values without issuing an
       exception.   This  occurs  in situations that are not nor-
       mally considered an error,  but  when  some  informational
       status   is   returned.    For  example,  _D_b_:_:_g_e_t  returns
       DB_KEYNOTFOUND when a requested key does not appear in the
       database.

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
