

NNAAMMEE
       DbMpoolFile - shared memory buffer pool

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       ssttaattiicc iinntt
       DDbbMMppoooollFFiillee::::ooppeenn((DDbbMMppooooll **mmpp,, cchhaarr **ffiillee,, uu__iinntt3322__tt ffllaaggss,, iinntt mmooddee,,
            ssiizzee__tt ppaaggeessiizzee,, DDbbMMppoooollFFiinnffoo **ffiinnffoopp,, DDbbMMppoooollFFiillee ****mmppff));;

       iinntt
       DDbbMMppoooollFFiillee::::cclloossee(());;

       iinntt
       DDbbMMppoooollFFiillee::::ggeett((ddbb__ppggnnoo__tt **ppggnnooaaddddrr,, uu__iinntt3322__tt ffllaaggss,, vvooiidd ****ppaaggeepp));;

       iinntt
       DDbbMMppoooollFFiillee::::ppuutt((vvooiidd **ppggaaddddrr,, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbbMMppoooollFFiillee::::sseett((vvooiidd **ppggaaddddrr,, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbbMMppoooollFFiillee::::ssyynncc(());;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       This manual page describes the  specific  details  of  the
       per-file memory pool interface.

       The  _D_b_M_p_o_o_l(3) and _D_b_M_p_o_o_l_F_i_l_e(3) classes are the library
       interface intended to provide  general-purpose,  page-ori-
       ented  buffer  management  of  one  or  more files.  While
       designed to work with the other Db functions, these  func-
       tions are also useful for more general purposes.  The mem-
       ory pools (_D_b_M_p_o_o_l_:_:'s) are referred to in  this  document
       as  simply  ``pools''.   Pools  may be shared between pro-
       cesses.  Pools are usually filled by  pages  from  one  or
       more   files  (_D_b_M_p_o_o_l_F_i_l_e's).   Pages  in  the  pool  are
       replaced in LRU (least-recently-used) order, with each new
       page  replacing the page that has been unused the longest.
       Pages retrieved from the pool using  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t  are
       ``pinned''  in  the  pool,  by  default,  until  they  are
       returned to the pool's control using the  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t
       method.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n
       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n  method  opens  a  file in the pool
       specified by the _D_b_M_p_o_o_l argument, copying the DbMpoolFile
       pointer  representing  it  into the memory location refer-
       enced by _m_p_f.

       The _f_i_l_e argument is the name of the file  to  be  opened.
       If  _f_i_l_e is NULL, a private file is created that cannot be
       shared with any other process (although it may  be  shared
       with other threads).

       The  _f_l_a_g_s  and  _m_o_d_e  arguments specify how files will be
       opened and/or created when they don't already exist.   The
       flags value is specified by oorr'ing together one or more of
       the following values:

       DB_CREATE
            Create any underlying files, as  necessary.   If  the
            files  do not already exist and the DB_CREATE flag is
            not specified, the call will fail.


       DB_NOMMAP
            Always copy this file into the local cache instead of
            mapping  it  into process memory (see the description
            of the _m_p___m_m_a_p_s_i_z_e field of the DbEnv object for fur-
            ther information).


       DB_RDONLY
            Open  any  underlying  files  for  reading only.  Any
            attempt to write the file using  the  pool  functions
            will  fail,  regardless  of the actual permissions of
            the file.

       All files created by the method _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n are cre-
       ated  with  mode _m_o_d_e (as described in _c_h_m_o_d(2)) and modi-
       fied by the process' umask value at the time  of  creation
       (see  _u_m_a_s_k(2)).   The group ownership of created files is
       based on the system and directory  defaults,  and  is  not
       further specified by DB.

       The  _p_a_g_e_s_i_z_e  argument is the size, in bytes, of the unit
       of transfer between the application and the pool, although
       it  is  not  necessarily  the unit of transfer between the
       pool and the source file.

       Files opened in the pool may be further  configured  based
       on  the  _f_i_n_f_o_p argument to _m_e_m_p___f_o_p_e_n, which is a pointer
       to  a  structure  of  type  DB_MPOOL_FINFO  (typedef'd  in
       <db.h>).   No references to the _f_i_n_f_o_p structure are main-
       tained by DB, so it may be discarded when  the  _m_e_m_p___f_o_p_e_n
       function  returns.   In order to ensure compatibility with
       future releases of DB, all fields  of  the  DB_MPOOL_FINFO
       structure  that  are not explicitly set should be initial-
       ized to 0 before the first time the structure is used.  Do
       this  by declaring the structure external or static, or by
       calling the C library routine _b_z_e_r_o(3) or _m_e_m_s_e_t(3).

       The fields of the DB_MPOOL_FINFO structure  used  by  _D_b_M_-
       _p_o_o_l_F_i_l_e_:_:_o_p_e_n are described  below.  If _f_i_n_f_o_p is NULL or
       any of its fields are set to their default value, defaults
       appropriate for the system are used.

       int ftype;
            The  _f_t_y_p_e  field should be the same as a _f_t_y_p_e argu-
            ment previously specified to the _D_b_M_p_o_o_l_:_:_d_b___r_e_g_i_s_t_e_r
            method,  unless  no input or output processing of the
            file's pages are necessary, in which case  it  should
            be 0.  (See the description of the _D_b_M_p_o_o_l_:_:_d_b___r_e_g_i_s_-
            _t_e_r method for more information.)

       DBT *pgcookie;
            The _p_g_c_o_o_k_i_e argument contains the byte  string  that
            is  passed  to  the _p_g_i_n and _p_g_o_u_t functions for this
            file, if any.  If no  _p_g_i_n  or  _p_g_o_u_t  functions  are
            specified,  the  _p_g_c_o_o_k_i_e field should be NULL.  (See
            the description of  the  _D_b_M_p_o_o_l_:_:_d_b___r_e_g_i_s_t_e_r  method
            for more information.)

       u_int8_t *fileid;
            The _f_i_l_e_i_d field is a unique identifier for the file.
            The mpool functions must be able to uniquely identify
            files in order that multiple processes sharing a file
            will correctly share its underlying pages.  Normally,
            the  _f_i_l_e_i_d  field should be NULL and the mpool func-
            tions will use the file's device  and  inode  numbers
            (see _s_t_a_t(2)) for this purpose.  On some filesystems,
            (e.g., FAT or NFS) file device and inode numbers  are
            not necessarily unique across system reboots.  AAppppllii--
            ccaattiioonnss wwaannttiinngg ttoo mmaaiinnttaaiinn aa  sshhaarreedd  mmeemmoorryy  bbuuffffeerr
            ppooooll  aaccrroossss  ssyysstteemm rreebboooottss,, wwhheerree tthhee ppooooll ccoonnttaaiinnss
            ppaaggeess ffrroomm ffiilleess ssttoorreedd  oonn  ssuucchh  ffiilleessyysstteemmss,,  mmuusstt
            ssppeecciiffyy   aa   uunniiqquuee  ffiillee  iiddeennttiiffiieerr  ttoo  tthhee  _D_b_M_-
            _p_o_o_l_F_i_l_e_:_:_o_p_e_n call and each process opening or  reg-
            istering  the file must provide the same unique iden-
            tifier.  If the _f_i_l_e_i_d field  is  non-NULL,  it  must
            reference a DB_FILE_ID_LEN (as defined in <db_cxx.h>)
            length array of bytes that will be used  to  uniquely
            identify  the file.  This should not be necessary for
            most applications.  Specifically, it is not necessary
            if the memory pool is re-instantiated after each sys-
            tem reboot, the application is using  the  Db  access
            methods instead of calling the pool functions explic-
            itly, or the files in the memory pool are  stored  on
            filesystems  where  the file device and inode numbers
            do not change across system reboots.

       int32_t lsn_offset;
            The _l_s_n___o_f_f_s_e_t argument is the zero-based byte offset
            in  the page of the page's log sequence number (LSN),
            or -1 if  no  LSN  offset  is  specified.   (See  the
            description  of  the  _D_b_M_p_o_o_l_:_:_s_y_n_c  method  for more
            information.)

       u_int32_t clear_len;
            The _c_l_e_a_r___l_e_n field is the number of initial bytes in
            a  page  that  should be set to zero when the page is
            created  as  a  result  of  the  DB_MPOOL_CREATE   or
            DB_MPOOL_NEW    flags   being   specified   to   _D_b_M_-
            _p_o_o_l_F_i_l_e_:_:_g_e_t.  If _f_i_n_f_o_p is NULL or _c_l_e_a_r___l_e_n is  0,
            the entire page is cleared.

       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n  method  throws a _D_b_E_x_c_e_p_t_i_o_n(3) or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_c_l_o_s_e
       The _D_b_M_p_o_o_l_F_i_l_e_:_:_c_l_o_s_e method closes the source file indi-
       cated  by  the  DbMpoolFile  object.  This method does not
       imply a call to _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c, i.e. no pages are writ-
       ten  to  the  source  file  as as a result of calling _D_b_M_-
       _p_o_o_l_F_i_l_e_:_:_c_l_o_s_e.

       In addition, if the _f_i_l_e argument to _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n was
       NULL,  any  underlying  files created for this DbMpoolFile
       will be removed.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_c_l_o_s_e method throws a  _D_b_E_x_c_e_p_t_i_o_n(3)  or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t
       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t  method copies a pointer to the page
       with the page  number  specified  by  _p_g_n_o_a_d_d_r,  from  the
       source  file  specified by the DbMpoolFile object into the
       memory location referenced by _p_a_g_e_p.  If the page does not
       exist  or cannot be retrieved, _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t will fail.

       The returned page is size_t type aligned.

       PPaaggee nnuummbbeerrss bbeeggiinn aatt 00,, ee..gg..,, tthhee ffiirrsstt ppaaggee iinn tthhee  ffiillee
       iiss ppaaggee nnuummbbeerr 00,, nnoott ppaaggee nnuummbbeerr 11..

       The  _f_l_a_g_s argument is specified by oorr'ing together one or
       more of the following values:


       DB_MPOOL_CREATE
            If the specified page does not exist, create it.   In
            this  case, the _p_g_i_n method, if specified, is called.


       DB_MPOOL_LAST
            Return the last page of the source file and copy  its
            page number to the location referenced by _p_g_n_o_a_d_d_r.
       DB_MPOOL_NEW
            Create  a new page in the file and copy its page num-
            ber to the location referenced by _p_g_n_o_a_d_d_r.  In  this
            case, the _p_g_i_n method, if specified, is not called.

       The  DB_MPOOL_CREATE, DB_MPOOL_LAST and DB_MPOOL_NEW flags
       are mutually exclusive.

       Created pages have all their bytes set to 0, unless other-
       wise specified when the file was opened.

       All  pages  returned  by _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t will be retained
       (i.e. ``pinned'') in the pool until a subsequent  call  to
       _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t.

       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t  method  throws  a _D_b_E_x_c_e_p_t_i_o_n(3) or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t
       The _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t method indicates that the page refer-
       enced by _p_g_a_d_d_r can be evicted from the pool.  _P_g_a_d_d_r must
       be an address previously returned by _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t.

       The _f_l_a_g_s argument is specified by oorr'ing together one  or
       more of the following values:


       DB_MPOOL_CLEAN
            Clear  any  previously  set  modification information
            (i.e., don't bother writing  the  page  back  to  the
            source file).


       DB_MPOOL_DIRTY
            The page has been modified and must be written to the
            source file before being evicted from the pool.


       DB_MPOOL_DISCARD
            The page is unlikely to be useful in the near future,
            and  should  be  discarded  before other pages in the
            pool.

       The DB_MPOOL_CLEAN and DB_MPOOL_DIRTY flags  are  mutually
       exclusive.

       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t  method  throws  a _D_b_E_x_c_e_p_t_i_o_n(3) or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t
       The _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t method sets the flags associated with
       the  page  referenced  by _p_g_a_d_d_r without unpinning it from
       the pool.  _P_g_a_d_d_r must be an address  previously  returned
       by    _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t.     The    _f_l_a_g_s    argument    to
       _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t is specified by oorr'ing  together  one  or
       more  of  the  values  specified  as  flags  for  the _D_b_M_-
       _p_o_o_l_F_i_l_e_:_:_p_u_t call.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t method  throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)  or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c
       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c  method writes all pages associated
       with the DbMpoolFile object that were marked  as  modified
       using  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t  or  _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t, back to the
       source file.  If any of the modified pages are also pinned
       (i.e.,  currently  referenced  by this or another process)
       _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c will ignore them.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c method throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)  or
       returns  the  value of _e_r_r_n_o on failure, 0 on success, and
       DB_INCOMPLETE if there were pages which were modified  but
       which _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c was unable to write.

EERRRROORRSS
       Methods  marked as returning _e_r_r_n_o will, by default, throw
       an exception that encapsulates the error information.  The
       default error behavior can be changed, see _D_b_E_x_c_e_p_t_i_o_n(3).

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n method may fail and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DBmemp->pgin(3),
       DBmemp->pgout(3), DbLog::compare(3), DbLog::flush(3),
       close(2), fcntl(2), fflush(3), fsync(2), lseek(2), mal-
       loc(3), memcmp(3), memcpy(3), memset(3), mmap(2), open(2),
       sigfillset(3), sigprocmask(2), stat(2), strcpy(3),
       strdup(3), strerror(3), strlen(3), time(3), unlink(2), and
       write(2).

       In addition, the _D_b_M_p_o_o_l_F_i_l_e_:_:_o_p_e_n  method  may  fail  and
       throw  a  _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following
       conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

            The file has already been entered into the pool,  and
            the  _p_a_g_e_s_i_z_e  value is not the same as when the file
            was entered into the pool, or the length of the  file
            is not zero or a multiple of the _p_a_g_e_s_i_z_e.

            The  DB_RDONLY  flag  was  specified for an in-memory
            pool.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_c_l_o_s_e method may fail and throw  a  _D_b_E_x_-
       _c_e_p_t_i_o_n(3)
       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), munmap(2), and strerror(3).

       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t method may fail and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DBmemp->pgin(3),
       DBmemp->pgout(3), DbLog::compare(3), DbLog::flush(3),
       close(2), fcntl(2), fflush(3), fsync(2), lseek(2), mal-
       loc(3), memcmp(3), memcpy(3), memset(3), mmap(2), open(2),
       read(2), sigfillset(3), sigprocmask(2), stat(2), str-
       cpy(3), strdup(3), strerror(3), strlen(3), time(3),
       unlink(2), and write(2).

       In  addition,  the  _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t  method  may fail and
       throw a _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following
       conditions:

       [EAGAIN]
            The  page  reference  count  has  overflowed.   (This
            should never happen  unless  there's  a  bug  in  the
            application.)

       [EINVAL]
            An invalid flag value or parameter was specified.

            The DB_MPOOL_NEW flag was set and the source file was
            not opened for writing.

            The requested page does not exist and DB_MPOOL_CREATE
            was not set.

            More  than  one of DB_MPOOL_CREATE, DB_MPOOL_LAST and
            DB_MPOOL_NEW was set.

       [ENOMEM]
            The cache is full and no more pages will fit  in  the
            pool.

       The  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t method may fail and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DBmemp->pgin(3),
       DBmemp->pgout(3), DbLog::compare(3), DbLog::flush(3),
       close(2), fcntl(2), fflush(3), fsync(2), lseek(2), mal-
       loc(3), memcmp(3), memcpy(3), memset(3), mmap(2), open(2),
       sigfillset(3), sigprocmask(2), stat(2), strcpy(3),
       strdup(3), strerror(3), strlen(3), time(3), unlink(2), and
       write(2).

       In  addition,  the  _D_b_M_p_o_o_l_F_i_l_e_:_:_p_u_t  method  may fail and
       throw a _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following
       conditions:

       [EACCES]
            The  DB_MPOOL_DIRTY  flag was set and the source file
            was not opened for writing.

       [EINVAL]
            An invalid flag value or parameter was specified.

            The  _p_g_a_d_d_r  parameter  does  not  reference  a  page
            returned by _D_b_M_p_o_o_l_F_i_l_e_:_:_g_e_t.

            More  than  one  of DB_MPOOL_CLEAN and DB_MPOOL_DIRTY
            was set.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t method may fail and throw a  _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: fcntl(2), and
       fflush(3).

       In  addition,  the  _D_b_M_p_o_o_l_F_i_l_e_:_:_s_e_t  method  may fail and
       throw a _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following
       conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

       The _D_b_M_p_o_o_l_F_i_l_e_:_:_s_y_n_c method may fail and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DBmemp->pgin(3),
       DBmemp->pgout(3), DbLog::compare(3), DbLog::flush(3),
       close(2), fcntl(2), fflush(3), fsync(2), lseek(2), mal-
       loc(3), memcpy(3), memset(3), open(2), qsort(3), real-
       loc(3), sigfillset(3), sigprocmask(2), stat(2), strcpy(3),
       strdup(3), strerror(3), strlen(3), unlink(2), and
       write(2).


SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
