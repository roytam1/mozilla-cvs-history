

NNAAMMEE
       DbLog - log management class

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       ssttaattiicc iinntt
       DDbbLLoogg::::ooppeenn((ccoonnsstt cchhaarr **ddiirr,,
            uu__iinntt3322__tt ffllaaggss,, iinntt mmooddee,, DDbbEEnnvv **ddbbeennvv,, DDbbLLoogg ****rreeggiioonnpp));;

       iinntt
       DDbbLLoogg::::cclloossee(());;

       iinntt
       DDbbLLoogg::::fflluusshh((ccoonnsstt DDbbLLssnn **llssnn));;

       iinntt
       DDbbLLoogg::::ggeett((DDbbLLssnn **llssnn,, DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

       ssttaattiicc iinntt
       DDbbLLoogg::::ccoommppaarree((ccoonnsstt DDbbLLssnn **llssnn00,, ccoonnsstt DDbbLLssnn **llssnn11));;

       iinntt
       DDbbLLoogg::::ffiillee((ccoonnsstt DDbbLLssnn **llssnn,, cchhaarr **nnaammeepp,, ssiizzee__tt lleenn));;

       iinntt
       DDbbLLoogg::::ppuutt((DDbbLLssnn **llssnn,, ccoonnsstt DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

       ssttaattiicc iinntt
       DDbbLLoogg::::uunnlliinnkk((ccoonnsstt cchhaarr **ddiirr,, iinntt ffoorrccee,, DDbbEEnnvv **));;

       iinntt
       DDbbLLoogg::::aarrcchhiivvee((cchhaarr ****lliisstt[[]],,
            uu__iinntt3322__tt ffllaaggss,, vvooiidd **((**ddbb__mmaalllloocc))((ssiizzee__tt))));;

       iinntt
       DDbbLLoogg::::ddbb__rreeggiisstteerr((ccoonnsstt DDbb **ddbbpp,,
            ccoonnsstt cchhaarr **nnaammee,, DDBBTTYYPPEE ttyyppee,, uu__iinntt3322__tt **ffiiddpp));;

       iinntt
       DDbbLLoogg::::ddbb__uunnrreeggiisstteerr((uu__iinntt3322__tt ffiidd));;

       iinntt
       DDbbLLoogg::::ssttaatt((DDBB__LLOOGG__SSTTAATT ****sspppp,, vvooiidd **((**ddbb__mmaalllloocc))((ssiizzee__tt))));;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       This manual page describes the specific details of the log
       class.

       This class provide a general-purpose logging facility suf-
       ficient for transaction management.  Logs can be shared by
       multiple processes.

       The  DB transaction log is represented by a directory con-
       taining a set of files.  The  log  is  a  record-oriented,
       append-only file, with records identified and accessed via
       _D_b_L_s_n's (database log sequence numbers).

       DbLsn's are returned on  each  _D_b_L_o_g_:_:_p_u_t  operation,  and
       only  those  DbLsn's  returned  by _D_b_L_o_g_:_:_p_u_t can later be
       used to retrieve records from the log.

  _D_b_L_o_g_:_:_o_p_e_n
       The _D_b_L_o_g_:_:_o_p_e_n method copies a pointer, to the log  iden-
       tified by the ddiirreeccttoorryy _d_i_r, into the memory location ref-
       erenced by _r_e_g_i_o_n_p.

       If the _d_b_e_n_v argument to _D_b_L_o_g_:_:_o_p_e_n was initialized using
       _D_b_E_n_v_:_:_a_p_p_i_n_i_t,   _d_i_r   is  interpreted  as  described  by
       _D_b_E_n_v(3).

       Otherwise, if _d_i_r is not NULL, it is interpreted  relative
       to  the  current working directory of the process.  If _d_i_r
       is NULL, the following environment variables  are  checked
       in  order:  ``TMPDIR'',  ``TEMP'', and ``TMP''.  If one of
       them is set, log files are created relative to the  direc-
       tory  it  specifies.   If  none of them are set, the first
       possible  one  of  the  following  directories  is   used:
       _/_v_a_r_/_t_m_p, _/_u_s_r_/_t_m_p, _/_t_e_m_p, _/_t_m_p, _C_:_/_t_e_m_p and _C_:_/_t_m_p.

       All  files  associated  with  the  log are created in this
       directory.   This  directory  must  already   exist   when
       DbLog::open  is  called.   If  the log already exists, the
       process must have permission to read and write the  exist-
       ing  files.   If  the  log  does  not already exist, it is
       optionally created and initialized.

       If the log region is  being  created  and  log  files  are
       already  present, the log files are ``recovered'' and sub-
       sequent log writes are appended to the end of the log.

       The log is stored in one or more files  in  the  specified
       directory.  Each file is named using the format

            log.NNNNN

       where  ``NNNNN'' is the sequence number of the file within
       the log.

       The _f_l_a_g_s and _m_o_d_e arguments specify  how  files  will  be
       opened  and/or created when they don't already exist.  The
       flags value is specified by oorr'ing together one or more of
       the following values:

       DB_CREATE
            Create  any  underlying  files, as necessary.  If the
            files do not already exist and the DB_CREATE flag  is
            not specified, the call will fail.


       DB_THREAD
            Cause  the  DbLog  handle returned by the _D_b_L_o_g_:_:_o_p_e_n
            method to be useable by  multiple  threads  within  a
            single  address space, i.e., to be ``free-threaded''.

       All files created by the log subsystem  are  created  with
       mode  _m_o_d_e  (as described in _c_h_m_o_d(2)) and modified by the
       process'  umask  value  at  the  time  of  creation   (see
       _u_m_a_s_k(2)).   The group ownership of created files is based
       on the system and directory defaults, and is  not  further
       specified by DB.

       The  logging  subsystem  is  configured based on which set
       methods have been used.  It is expected that  applications
       will  use  a single DbEnv object as the argument to all of
       the subsystems in the DB package.  The fields of the DbEnv
       object used by _D_b_L_o_g_:_:_o_p_e_n are described below.  As refer-
       ences  to  the  DbEnv  object   may   be   maintained   by
       _D_b_L_o_g_:_:_o_p_e_n,  it  is  necessary  that the DbEnv object and
       memory  it  references  be  valid  until  the  object   is
       destroyed.   Any  of the DbEnv fields that are not explic-
       itly set will default to appropriate values.

       The following fields in the DbEnv object may  be  initial-
       ized,  using  the  appropriate  set method, before calling
       _D_b_L_o_g_:_:_o_p_e_n:


       void *(*db_errcall)(char *db_errpfx, char *buffer);
       FILE *db_errfile;
       const char *db_errpfx;
       class ostream *db_error_stream;
       int db_verbose;
            The error fields of the DbEnv behave as described for
            _D_b_E_n_v(3).

       u_int32_t lg_max;
            The  maximum  size  of  a  single  file  in  the log.
            Because DbLsn file offsets are unsigned  4-byte  val-
            ues,  _l_g___m_a_x  may  not  be  larger  than  the maximum
            unsigned 4-byte value.

            If _l_g___m_a_x is 0, a default value is used.

            See the section "LOG FILE LIMITS" below, for  further
            information.

       The  _D_b_L_o_g_:_:_o_p_e_n method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns
       the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_c_l_o_s_e
       The _D_b_L_o_g_:_:_c_l_o_s_e method closes the log associated with the
       DbLog object.

       In  addition,  if the _d_i_r argument to _D_b_L_o_g_:_:_o_p_e_n was NULL
       and _d_b_e_n_v was not initialized  using  _D_b_E_n_v_:_:_a_p_p_i_n_i_t,  all
       files  created  for this shared region will be removed, as
       if _D_b_L_o_g_:_:_u_n_l_i_n_k were called.

       When multiple threads are using the DbLog  handle  concur-
       rently,  only  a  single  thread may call the _D_b_L_o_g_:_:_c_l_o_s_e
       method.

       The _D_b_L_o_g_:_:_c_l_o_s_e method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns
       the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_f_l_u_s_h
       The  _D_b_L_o_g_:_:_f_l_u_s_h  method  guarantees that all log records
       whose DbLsns are less than or equal to the  _l_s_n  parameter
       have been written to disk.  If _l_s_n is NULL, all records in
       the log are flushed.

       The _D_b_L_o_g_:_:_f_l_u_s_h method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns
       the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_g_e_t
       The  _D_b_L_o_g_:_:_g_e_t  method  implements a cursor inside of the
       log, retrieving records from the log according to the  _l_s_n
       and _f_l_a_g_s parameters.

       The  data  field  of  the _d_a_t_a object is set to the record
       retrieved and the size field indicates the number of bytes
       in  the  record.   See  _D_b_t(3)  for a description of other
       fields in the _d_a_t_a  object.   WWhheenn  mmuullttiippllee  tthhrreeaaddss  aarree
       uussiinngg  tthhee  rreettuurrnneedd DDbbLLoogg hhaannddllee ccoonnccuurrrreennttllyy,, eeiitthheerr tthhee
       DDBB__DDBBTT__MMAALLLLOOCC oorr DDBB__DDBBTT__UUSSEERRMMEEMM ffllaaggss  mmuusstt  bbee  ssppeecciiffiieedd
       ffoorr aannyy DDbbtt uusseedd ffoorr ddaattaa rreettrriieevvaall..

       The _f_l_a_g_s parameter must be set to exactly one of the fol-
       lowing values:


       DB_CHECKPOINT
            The last record written with the  DB_CHECKPOINT  flag
            specified to the _D_b_L_o_g_:_:_p_u_t method is returned in the
            _d_a_t_a argument.  The _l_s_n argument is overwritten  with
            the  DbLsn  of the record returned.  If no record has
            been previously written with the  DB_CHECKPOINT  flag
            specified, the first record in the log is returned.

            If the log is empty the _D_b_L_o_g_:_:_g_e_t method will return
            DB_NOTFOUND.


       DB_FIRST
            The first record from any of the log files  found  in
            the  log  directory is returned in the _d_a_t_a argument.
            The _l_s_n argument is overwritten with the DbLsn of the
            record returned.

            If the log is empty the _D_b_L_o_g_:_:_g_e_t method will return
            DB_NOTFOUND.


       DB_LAST
            The last record in the log is returned  in  the  _d_a_t_a
            argument.   The  _l_s_n argument is overwritten with the
            DbLsn of the record returned.

            If the log  is  empty,  the  _D_b_L_o_g_:_:_g_e_t  method  will
            return DB_NOTFOUND.


       DB_NEXT
            The  current  log  position  is  advanced to the next
            record in the log and that record is returned in  the
            _d_a_t_a  argument.  The _l_s_n argument is overwritten with
            the DbLsn of the record returned.

            If the pointer has not been initialized via DB_FIRST,
            DB_LAST, DB_SET, DB_NEXT, or DB_PREV, _D_b_L_o_g_:_:_g_e_t will
            return the first record in the log.  If the last  log
            record has already been returned or the log is empty,
            the _D_b_L_o_g_:_:_g_e_t method will return DB_NOTFOUND.

            If the log was opened with the  DB_THREAD  flag  set,
            calls  to  _D_b_L_o_g_:_:_g_e_t  with the DB_NEXT flag set will
            return EINVAL.


       DB_PREV
            The current log position is  moved  to  the  previous
            record  in the log and that record is returned in the
            _d_a_t_a argument.  The _l_s_n argument is overwritten  with
            the DbLsn of the record returned.

            If the pointer has not been initialized via DB_FIRST,
            DB_LAST, DB_SET, DB_NEXT, or DB_PREV, _D_b_L_o_g_:_:_g_e_t will
            return  the last record in the log.  If the first log
            record has already been returned or the log is empty,
            the _D_b_L_o_g_:_:_g_e_t method will return DB_NOTFOUND.

            If  the  log  was opened with the DB_THREAD flag set,
            calls to _D_b_L_o_g_:_:_g_e_t with the DB_PREV  flag  set  will
            return EINVAL.


       DB_CURRENT
            Return  the  log  record  currently referenced by the
            log.

            If the log  pointer  has  not  been  initialized  via
            DB_FIRST, DB_LAST, DB_SET, DB_NEXT, or DB_PREV, or if
            the log was  opened  with  the  DB_THREAD  flag  set,
            _D_b_L_o_g_:_:_g_e_t will return EINVAL.

       DB_SET
            Retrieve  the  record  specified by the _l_s_n argument.
            If the specified DbLsn is  invalid  (e.g.,  does  not
            appear in the log) _D_b_L_o_g_:_:_g_e_t will return EINVAL.

       Otherwise,  the  _D_b_L_o_g_:_:_g_e_t method throws a _D_b_E_x_c_e_p_t_i_o_n(3)
       or returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_c_o_m_p_a_r_e
       The _D_b_L_o_g_:_:_c_o_m_p_a_r_e method allows the caller to compare two
       DbLsn's.  _D_b_L_o_g_:_:_c_o_m_p_a_r_e returns 0 if the two DbLsn's  are
       equal,  1  if _l_s_n_0 is greater than _l_s_n_1, and -1 if _l_s_n_0 is
       less than _l_s_n_1.

  _D_b_L_o_g_:_:_f_i_l_e
       The _D_b_L_o_g_:_:_f_i_l_e method maps DbLsn's to  file  names.   The
       _D_b_L_o_g_:_:_f_i_l_e  method copies the name of the file containing
       the record named by _l_s_n into the  memory  location  refer-
       enced  by _n_a_m_e_p.  (This mapping of DbLsn to file is needed
       for database administration.  For example,  a  transaction
       manager  typically  records  the earliest DbLsn needed for
       restart,  and  the  database  administrator  may  want  to
       archive  log  files to tape when they contain only DbLsn's
       before the earliest one needed for restart.)

       The _l_e_n argument is the length  of  the  _n_a_m_e_p  buffer  in
       bytes.   If  _n_a_m_e_p  is  too  short  to hold the file name,
       _D_b_L_o_g_:_:_f_i_l_e will return ENOMEM.  Note, as described above,
       log file names are quite short, on the order of 10 charac-
       ters.

       The _D_b_L_o_g_:_:_f_i_l_e method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or  returns
       the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_p_u_t
       The  _D_b_L_o_g_:_:_p_u_t  method  appends  records to the log.  The
       DbLsn of the put record is returned in the _l_s_n  parameter.
       The  _f_l_a_g_s  parameter  may  be set to one of the following
       values:


       DB_CHECKPOINT

            The log should write a checkpoint  record,  recording
            any  information necessary to make the log structures
            recoverable after a crash.


       DB_CURLSN
            The DB_LSN of the next record to be put  is  returned
            in the _l_s_n parameter.


       DB_FLUSH
            The  log is forced to disk after this record is writ-
            ten, guaranteeing that all records with  DbLsns  less
            than or equal to the one being put are on disk before
            this method returns (this function is most often used
            for a transaction commit, see _D_b_:_:_T_x_n in Db (3)).

       The  caller  is  responsible  for  providing any necessary
       structure to _d_a_t_a.  (For example, in a write-ahead logging
       protocol,  the  application  must  understand what part of
       _d_a_t_a is an operation code, what part is redo  information,
       and  what  part  is  undo  information.  In addition, most
       transaction managers will store in _d_a_t_a the DbLsn  of  the
       previous  log  record for the same transaction, to support
       chaining back through the transaction's log records during
       undo.)

       The  _D_b_L_o_g_:_:_p_u_t  method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or returns
       the value of _e_r_r_n_o on failure and 0 on success.


  _D_b_L_o_g_:_:_u_n_l_i_n_k
       The _D_b_L_o_g_:_:_u_n_l_i_n_k method destroys the log  region  identi-
       fied  by  the  directory  _d_i_r,  removing all files used to
       implement the log  region.   (The  directory  _d_i_r  is  not
       removed.)    If  there  are  processes  that  have  called
       _D_b_L_o_g_:_:_o_p_e_n without calling _D_b_L_o_g_:_:_c_l_o_s_e (i.e., there  are
       processes  currently  using the log region), _D_b_L_o_g_:_:_u_n_l_i_n_k
       will fail without further action, unless the force flag is
       set,  in  which  case _D_b_L_o_g_:_:_u_n_l_i_n_k will attempt to remove
       the log region files regardless  of  any  processes  still
       using the log region.

       The  result  of  attempting to forcibly destroy the region
       when a process has the region open is  unspecified.   Pro-
       cesses  using a shared memory region maintain an open file
       descriptor for it.  On UNIX systems,  the  region  removal
       should  succeed and processes that have already joined the
       region should  continue  to  run  in  the  region  without
       change,  however  processes  attempting  to  join  the log
       region will either fail or attempt to create a new region.
       On  other  systems,  e.g., WNT, where the _u_n_l_i_n_k(2) system
       call will fail if any process has an open file  descriptor
       for the file, the region removal will fail.

       In  the  case  of catastrophic or system failure, database
       recovery must  be  performed  (see  _d_b___r_e_c_o_v_e_r(1)  or  the
       DB_RECOVER      and      DB_RECOVER_FATAL     flags     to
       _D_b_E_n_v_:_:_a_p_p_i_n_i_t(3)).  Alternatively,  if  recovery  is  not
       required  because  no  database state is maintained across
       failures, it is possible to  clean  up  a  log  region  by
       removing  all  of  the files in the directory specified to
       the _D_b_L_o_g_:_:_o_p_e_n method, as log region files are never cre-
       ated  in  any  directory  other  than the one specified to
       _D_b_L_o_g_:_:_o_p_e_n.  Note, however, that this has  the  potential
       to remove files created by the other DB subsystems in this
       database environment.

       The  _D_b_L_o_g_:_:_u_n_l_i_n_k  method  throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)   or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_a_r_c_h_i_v_e
       The  _D_b_L_o_g_:_:_a_r_c_h_i_v_e method creates a NULL-terminated array
       of log or database file names and copies a pointer to them
       into the user-specified memory location _l_i_s_t.

       By default, _D_b_L_o_g_:_:_a_r_c_h_i_v_e returns the names of all of the
       log files that are no  longer  in  use  (e.g.,  no  longer
       involved in active transactions), and that may be archived
       for catastrophic recovery and then removed from  the  sys-
       tem.   If there were no file names to return, _l_i_s_t will be
       set to NULL.

       Arrays of log file names are created in allocated  memory.
       If  _d_b___m_a_l_l_o_c  is  non-NULL,  it is called to allocate the
       memory, otherwise, the library function _m_a_l_l_o_c(3) is used.
       The  function _d_b___m_a_l_l_o_c must match the calling conventions
       of the _m_a_l_l_o_c(3) library routine.  Regardless, the  caller
       is  responsible  for deallocating the returned memory.  To
       deallocate the returned memory, free each returned  memory
       pointer;  pointers  inside  the  memory  do not need to be
       individually freed.

       The _f_l_a_g_s argument is specified by oorr'ing together one  or
       more of the following values:


       DB_ARCH_ABS
            All  pathnames  are  returned  as absolute pathnames,
            instead of relative to the database home directory.


       DB_ARCH_DATA
            Return the database files that need to be archived in
            order to recover the database from catastrophic fail-
            ure.  If any of the  database  files  have  not  been
            accessed  during  the  lifetime  of  the  current log
            files, _D_b_L_o_g_:_:_a_r_c_h_i_v_e will not include them  in  this
            list.   It  is  also  possible that some of the files
            referenced in the log have since  been  deleted  from
            the system.


       DB_ARCH_LOG
            Return  all  the log file names regardless of whether
            or not they are in use.

       The DB_ARCH_DATA and DB_ARCH_LOG flags are mutually exclu-
       sive.

       The  _D_b_L_o_g_:_:_a_r_c_h_i_v_e  method  throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)  or
       returns the value of _e_r_r_n_o on failure and 0 on success.

       The _D_b_L_o_g_:_:_a_r_c_h_i_v_e method is based on  the  C  _l_o_g___a_r_c_h_i_v_e
       function,  which  is  the  underlying function used by the
       _d_b___a_r_c_h_i_v_e(1)  utility.   See  the  source  code  for  the
       _d_b___a_r_c_h_i_v_e  utility for an example of using _l_o_g___a_r_c_h_i_v_e in
       a UNIX environment.  See the _d_b___a_r_c_h_i_v_e(1) manual page for
       more information on database archival procedures.

  _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r
       The  _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r  method registers a file name with
       the log manager and copies a  file  identification  number
       into  the  memory  location referenced by _f_i_d_p.  This file
       identification number should be used in all subsequent log
       messages  that  refer to operations on this file.  The log
       manager records all file name to file identification  num-
       ber mappings at each checkpoint so that a recovery process
       can identify the file to which a record in the log refers.

       The  _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r  method  is  called when an access
       method registers the open of a file.   The  _d_b_p  parameter
       should  be  a  pointer  to  the  Db  object which is being
       returned by the access method.

       The _t_y_p_e parameter should be one of the Db types specified
       in _D_b_:_:_o_p_e_n _(_s_e_eDb_(_3_)_)_, e.g., DB_HASH.

       The  _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r  method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_d_b___u_n_r_e_g_i_s_t_e_r
       The _D_b_L_o_g_:_:_d_b___u_n_r_e_g_i_s_t_e_r  method  disassociates  the  file
       name  to  file  identification number mapping for the file
       identification number specified by the _f_i_d parameter.  The
       file identification number may then be reused.

       The _D_b_L_o_g_:_:_d_b___u_n_r_e_g_i_s_t_e_r method throws a _D_b_E_x_c_e_p_t_i_o_n(3) or
       returns the value of _e_r_r_n_o on failure and 0 on success.

  _D_b_L_o_g_:_:_s_t_a_t
       The _D_b_L_o_g_:_:_s_t_a_t function creates a  statistical  structure
       and  copies a pointer to it into the user-specified memory
       location.

       Statistical structures are created  in  allocated  memory.
       If  _d_b___m_a_l_l_o_c  is  non-NULL,  it is called to allocate the
       memory, otherwise, the library function _m_a_l_l_o_c(3) is used.
       The  function _d_b___m_a_l_l_o_c must match the calling conventions
       of the _m_a_l_l_o_c(3) library routine.  Regardless, the  caller
       is  responsible  for deallocating the returned memory.  To
       deallocate the returned memory, free each returned  memory
       pointer;  pointers  inside  the  memory  do not need to be
       individually freed.  The log statistics are  stored  in  a
       structure  of type DB_LOG_STAT (typedef'd in <db.h>).  The
       following DB_LOG_STAT fields will be filled in:

       u_int32_t st_magic;
            The magic number that identifies  a  file  as  a  log
            file.
       u_int32_t st_version;
            The version of the log file type.
       u_int32_t st_refcnt;
            The number of references to the region.
       u_int32_t st_regsize;
            The size of the region.
       u_int32_t st_mode;
            The mode of any created log files.
       u_int32_t st_lg_max;
            The  maximum  size  of any individual file comprising
            the log.
       u_int32_t st_written;
            The total number of bytes written to this log.
       u_int32_t st_written_chkpt;
            The number of bytes written  since  the  last  check-
            point.
       u_int32_t st_region_wait;
            The number of times that a process was able to obtain
            the region lock without waiting.
       u_int32_t st_region_nowait;
            The number of times that a process was forced to wait
            before obtaining the region lock.

LLOOGG FFIILLEE LLIIMMIITTSS
       Log file sizes impose a time limit on the length of time a
       database may be  accessed  under  transaction  protection,
       before  it needs to be dumped and reloaded (see _d_b___d_u_m_p_(_3_)
       and _d_b___l_o_a_d_(_3_)_)_.  Unfortunately,  the  limits  are  poten-
       tially difficult to calculate.

       The log file name consists of "log." followed by 5 digits,
       resulting in a maximum of 99,999 log files.   Consider  an
       application performing 600 transactions per second, for 15
       hours a day, logged into 10Mb log files, where each trans-
       action  is  logging  approximately 100 bytes of data.  The
       calculation:

              (10 * 2^20 * 99999) /
                   (600 * 60 * 60 * 15 * 100) = 323.63

       indicates that the system will run out of log  file  space
       in  roughly  324 days.  If we increase the maximum size of
       the files from 10Mb to 100Mb, the same  calculation  indi-
       cates  that the application will run out of log file space
       in roughly 9 years.

       There is no way to reset the log file name space in Berke-
       ley  DB.   If  your application is reaching the end of its
       log file name space, you should:

       1.   Archive your databases as if to  prepare  for  catas-
            trophic  failure (see _d_b___a_r_c_h_i_v_e(1) for more informa-
            tion).

       2.   Dump and re-load aallll your databases  (see  _d_b___d_u_m_p(1)
            and _d_b___l_o_a_d(1) for more information).

       3.   Remove  all  of the log files from the database envi-
            ronment (see _d_b___a_r_c_h_i_v_e(1) for more information).

       4.   Restart your applications.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables affect  the  execution
       of _d_b___l_o_g:

       DB_HOME
            If  the _d_b_e_n_v argument to _D_b_L_o_g_:_:_o_p_e_n was initialized
            using _d_b___a_p_p_i_n_i_t, the  environment  variable  DB_HOME
            may  be used as the path of the database home for the
            interpretation of the _d_i_r argument to _D_b_L_o_g_:_:_o_p_e_n, as
            described     in     _d_b___a_p_p_i_n_i_t(3).     Specifically,
            _D_b_L_o_g_:_:_o_p_e_n is affected by the  configuration  string
            value of DB_LOG_DIR.

       TMPDIR
            If  the _d_b_e_n_v argument to _D_b_L_o_g_:_:_o_p_e_n was NULL or not
            initialized using _d_b___a_p_p_i_n_i_t, the  environment  vari-
            able  TMPDIR may be used as the directory in which to
            create the log, as described in the _D_b_L_o_g_:_:_o_p_e_n  sec-
            tion above.

EERRRROORRSS
       Methods  marked as returning _e_r_r_n_o will, by default, throw
       an exception that encapsulates the error information.  The
       default error behavior can be changed, see _D_b_E_x_c_e_p_t_i_o_n(3).

       The _D_b_L_o_g_:_:_o_p_e_n method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DbLog::close(3),

       DbLog::unlink(3), atoi(3), close(2), db_version(3),
       fcntl(2), fflush(3), lseek(2), malloc(3), memcpy(3), mem-
       set(3), mmap(2), munmap(2), open(2), opendir(3), read(2),
       readdir(3), realloc(3), sigfillset(3), sigprocmask(2),
       stat(2), strchr(3), strcpy(3), strdup(3), strerror(3),
       strlen(3), strncmp(3), unlink(2), and write(2).

       In addition, the _D_b_L_o_g_:_:_o_p_e_n method may fail and  throw  a
       _D_b_E_x_c_e_p_t_i_o_n(3)  or  return  _e_r_r_n_o for the following condi-
       tions:

       [EAGAIN]
            The shared memory region was locked and  (repeatedly)
            unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

            The  DB_THREAD  flag  was specified and spinlocks are
            not implemented for this architecture.

            The specified file size was too large.

       The _D_b_L_o_g_:_:_c_l_o_s_e method may  fail  and  throw  a  _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), munmap(2), and strerror(3).

       The  _D_b_L_o_g_:_:_f_l_u_s_h  method  may  fail  and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), fsync(2), lseek(2), malloc(3), memcpy(3), mem-
       set(3), open(2), sigfillset(3), sigprocmask(2), stat(2),
       strcpy(3), strdup(3), strerror(3), strlen(3), unlink(2),
       and write(2).

       In  addition, the _D_b_L_o_g_:_:_f_l_u_s_h method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

       The _D_b_L_o_g_:_:_g_e_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: atoi(3), close(2),
       fcntl(2), fflush(3), lseek(2), malloc(3), memcpy(3), mem-
       set(3), open(2), opendir(3), read(2), readdir(3), real-
       loc(3), sigfillset(3), sigprocmask(2), stat(2), strchr(3),
       strcpy(3), strdup(3), strerror(3), strlen(3), strncmp(3),
       and unlink(2).

       In  addition,  the  _D_b_L_o_g_:_:_g_e_t method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

            The DB_FIRST flag was specified and no log files were
            found.

       The _D_b_L_o_g_:_:_f_i_l_e method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), malloc(3), memcpy(3), memset(3), open(2), sig-
       fillset(3), sigprocmask(2), stat(2), strcpy(3), strdup(3),
       strerror(3), strlen(3), and unlink(2).

       In  addition,  the _D_b_L_o_g_:_:_f_i_l_e method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [ENOMEM]
            The  supplied  buffer  was  too small to hold the log
            file name.

       The _D_b_L_o_g_:_:_p_u_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), fsync(2), lseek(2), malloc(3), memcpy(3), mem-
       set(3), open(2), sigfillset(3), sigprocmask(2), stat(2),
       strcpy(3), strdup(3), strerror(3), strlen(3), time(3),
       unlink(2), and write(2).

       In  addition,  the  _D_b_L_o_g_:_:_p_u_t method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

            The  record  to  be logged is larger than the maximum
            log record.

       The _D_b_L_o_g_:_:_u_n_l_i_n_k method may fail  and  throw  a  _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), malloc(3), memcpy(3), memset(3), mmap(2),
       munmap(2), open(2), sigfillset(3), sigprocmask(2),
       stat(2), strcpy(3), strdup(3), strerror(3), strlen(3), and
       unlink(2).

       In addition, the _D_b_L_o_g_:_:_u_n_l_i_n_k method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3)  or  return  _e_r_r_n_o for the following condi-
       tions:

       [EBUSY]
            The shared memory region was in  use  and  the  force
            flag was not set.

       The  _D_b_L_o_g_:_:_a_r_c_h_i_v_e  method  may fail and throw a _D_b_E_x_c_e_p_-
       _t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DbLog::compare(3),
       DbLog::get(3), close(2), fcntl(2), fflush(3), getcwd(3),
       malloc(3), memcpy(3), memset(3), open(2), qsort(3), real-
       loc(3), sigfillset(3), sigprocmask(2), stat(2), strchr(3),
       strcmp(3), strcpy(3), strdup(3), strerror(3), strlen(3),
       and unlink(2).

       In addition, the _D_b_L_o_g_:_:_a_r_c_h_i_v_e method may fail and  throw
       a  _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following condi-
       tions:

       [EINVAL]
            An invalid flag value or parameter was specified.

            The log was corrupted.

       The _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r method may fail and throw  a  _D_b_E_x_-
       _c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), fsync(2), lseek(2), malloc(3), memcmp(3), mem-
       cpy(3), memset(3), open(2), realloc(3), sigfillset(3),
       sigprocmask(2), stat(2), strcpy(3), strdup(3), str-
       error(3), strlen(3), time(3), unlink(2), and write(2).

       In addition, the _D_b_L_o_g_:_:_d_b___r_e_g_i_s_t_e_r method  may  fail  and
       throw  a  _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following
       conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

       The _D_b_L_o_g_:_:_d_b___u_n_r_e_g_i_s_t_e_r method may fail and throw a _D_b_E_x_-
       _c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: close(2), fcntl(2),
       fflush(3), fsync(2), lseek(2), malloc(3), memcpy(3), mem-
       set(3), open(2), sigfillset(3), sigprocmask(2), stat(2),
       strcpy(3), strdup(3), strerror(3), strlen(3), time(3),
       unlink(2), and write(2).

       In addition, the _D_b_L_o_g_:_:_d_b___u_n_r_e_g_i_s_t_e_r method may fail  and
       throw  a  _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following
       conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

BBUUGGSS
       The log files are not  machine  architecture  independent.
       Specifically,  their  metadata  are  not stored in a fixed
       byte order.

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
