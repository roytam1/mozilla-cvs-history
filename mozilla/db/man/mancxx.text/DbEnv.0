

NNAAMMEE
       DbEnv - Db initialization and environment options

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       DDbbEEnnvv::::DDbbEEnnvv((ccoonnsstt cchhaarr **ddbb__hhoommee,, cchhaarr **ccoonnsstt **ddbb__ccoonnffiigg,, uu__iinntt3322__tt ffllaaggss));;
       DDbbEEnnvv::::DDbbEEnnvv(());;
       DDbbEEnnvv::::~~DDbbEEnnvv(());;

       iinntt DDbbEEnnvv::::aappppiinniitt((ccoonnsstt cchhaarr **ddbb__hhoommee,,
            cchhaarr **ccoonnsstt **ddbb__ccoonnffiigg,, uu__iinntt3322__tt ffllaaggss));;

       iinntt DDbbEEnnvv::::ggeett__lloorrddeerr(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__lloorrddeerr((iinntt));;

       ttyyppeeddeeff vvooiidd ((**ddbb__eerrrrccaallll__ffccnn))((ccoonnsstt cchhaarr **,, cchhaarr **));;
       ddbb__eerrrrccaallll__ffccnn DDbbEEnnvv::::ggeett__eerrrrccaallll(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__eerrrrccaallll((ddbb__eerrrrccaallll__ffccnn));;

       FFIILLEE DDbbEEnnvv::::**ggeett__eerrrrffiillee(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__eerrrrffiillee((FFIILLEE **));;

       ccoonnsstt cchhaarr DDbbEEnnvv::::**ggeett__eerrrrppffxx(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__eerrrrppffxx((ccoonnsstt cchhaarr **));;

       iinntt DDbbEEnnvv::::ggeett__vveerrbboossee(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__vveerrbboossee((iinntt));;

       cchhaarr DDbbEEnnvv::::**ggeett__hhoommee(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__hhoommee((cchhaarr **));;

       cchhaarr DDbbEEnnvv::::**ggeett__lloogg__ddiirr(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__lloogg__ddiirr((cchhaarr **));;

       cchhaarr DDbbEEnnvv::::**ggeett__ttmmpp__ddiirr(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__ttmmpp__ddiirr((cchhaarr **));;

       cchhaarr DDbbEEnnvv::::****ggeett__ddaattaa__ddiirr(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__ddaattaa__ddiirr((cchhaarr ****));;

       DDbbLLoocckkTTaabb DDbbEEnnvv::::**ggeett__llkk__iinnffoo(()) ccoonnsstt;;

       uu__iinntt88__tt DDbbEEnnvv::::**ggeett__llkk__ccoonnfflliiccttss(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__llkk__ccoonnfflliiccttss((uu__iinntt88__tt **));;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__llkk__mmooddeess(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__llkk__mmooddeess((uu__iinntt3322__tt));;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__llkk__mmaaxx(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__llkk__mmaaxx((uu__iinntt3322__tt));;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__llkk__ddeetteecctt(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__llkk__ddeetteecctt((uu__iinntt3322__tt));;

       DDbbLLoogg DDbbEEnnvv::::**ggeett__llgg__iinnffoo(()) ccoonnsstt;;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__llgg__mmaaxx(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__llgg__mmaaxx((uu__iinntt3322__tt));;

       DDbbMMppooooll DDbbEEnnvv::::**ggeett__mmpp__iinnffoo(()) ccoonnsstt;;

       ssiizzee__tt DDbbEEnnvv::::ggeett__mmpp__mmmmaappssiizzee(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__mmpp__mmmmaappssiizzee((ssiizzee__tt));;

       ssiizzee__tt DDbbEEnnvv::::ggeett__mmpp__ssiizzee(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__mmpp__ssiizzee((ssiizzee__tt));;

       DDbbTTxxnnMMggrr DDbbEEnnvv::::**ggeett__ttxx__iinnffoo(()) ccoonnsstt;;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__ttxx__mmaaxx(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__ttxx__mmaaxx((uu__iinntt3322__tt));;

       ttyyppeeddeeff iinntt ((**ttxx__rreeccoovveerr__ffccnn))((DDBB__LLOOGG **,, DDBBTT **,, DDBB__LLSSNN **,, iinntt,, vvooiidd **));;
       ttxx__rreeccoovveerr__ffccnn DDbbEEnnvv::::ggeett__ttxx__rreeccoovveerr(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__ttxx__rreeccoovveerr((ttxx__rreeccoovveerr__ffccnn));;

       uu__iinntt3322__tt DDbbEEnnvv::::ggeett__ffllaaggss(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__ffllaaggss((uu__iinntt3322__tt));;

       eennuumm EErrrroorrMMooddeell {{ EExxcceeppttiioonn,, EErrrroorrRReettuurrnn }};;
       vvooiidd DDbbEEnnvv::::sseett__eerrrroorr__mmooddeell((EErrrroorrMMooddeell));;
       EErrrroorrMMooddeell DDbbEEnnvv::::ggeett__eerrrroorr__mmooddeell(()) ccoonnsstt;;

       ccllaassss oossttrreeaamm** DDbbEEnnvv::::ggeett__eerrrroorr__ssttrreeaamm(()) ccoonnsstt;;
       vvooiidd DDbbEEnnvv::::sseett__eerrrroorr__ssttrreeaamm((ccllaassss oossttrreeaamm**));;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       The DbEnv class provides simple access  to  an  underlying
       data  structure, whose elements can be examined or changed
       using the _s_e_t__ or _g_e_t__ methods.  The remainder of the man-
       ual  page  sometimes  refers  to  these accesses using the
       underlying name, e.g., simply _l_o_r_d_e_r instead of _g_e_t___l_o_r_d_e_r
       and  _s_e_t___l_o_r_d_e_r.  The constructors set all elements of the
       underlying structure to zero.  The constructor with  three
       arguments has the effect of calling _D_b_E_n_v_:_:_a_p_p_i_n_i_t immedi-
       ately to initialize the application with  default  parame-
       ters.   To  delay the initialization, use the default con-
       structor.  The various set_ methods can then  be  used  to
       initialize   the   DbEnv,   and   finally,   a   call   to
       _D_b_E_n_v_:_:_a_p_p_i_n_i_t should be made to initialize DB.

       Once the DB environment has been initialized by a call  to
       _D_b_E_n_v_:_:_a_p_p_i_n_i_t,  no  set  methods  other  than  _s_e_t___e_r_r_p_f_x
       should be called.

  _a_p_p_i_n_i_t
       The _a_p_p_i_n_i_t method provides a simple way to initialize and
       configure the Db environment.  It is not necessary that it
       be called, but it provides a method of creating a  consis-
       tent  environment  for  processes using one or more of the
       features of Db.

       The  _d_b___h_o_m_e  and  _d_b___c_o_n_f_i_g  arguments  to  _a_p_p_i_n_i_t   are
       described in the section below entitled ``FILE NAMING''.

       The  _f_l_a_g_s argument specifies the subsystems that are ini-
       tialized and how the environment affects Db  file  naming,
       among  other  things.   The  _f_l_a_g_s  value  is specified by
       oorr'ing together one or more of the following values:


       DB_CREATE
            Cause subsystems to create any underlying  files,  as
            necessary.   (See _D_b(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3), _D_b_M_-
            _p_o_o_l(3) and _D_b_T_x_n_M_g_r(3) for more information.)


       DB_INIT_LOCK
            Initialize  the  lock  subsystem;  see  _D_b_L_o_c_k_T_a_b(3).
            This subsystem should be used when multiple processes
            or threads are going to be reading and writing  a  Db
            database,  so  that  they  do not interfere with each
            other.  If all threads are accessing the  database(s)
            read-only,  then  locking  is  unnecessary.  When the
            DB_INIT_LOCK flag is specified, it is usually  neces-
            sary to run the deadlock detector, _d_b___d_e_a_d_l_o_c_k(1), as
            well.


       DB_INIT_LOG
            Initialize the log  subsystem;  see  _D_b_L_o_g(3).   This
            subsystem  is  used when recovery from application or
            system failure is important.


       DB_INIT_MPOOL
            Initialize the mpool subsystem; see _D_b_M_p_o_o_l(3).  This
            subsystem  is  used whenever the application is using
            the Db access methods for any purpose.


       DB_INIT_TXN
            Initialize the transaction subsystem;  see  _D_b_T_x_n(3).
            This  subsystem  is  used  when atomicity of multiple
            operations   and   recovery   are   important.    The
            DB_INIT_TXN flag implies the DB_INIT_LOG flag.


       DB_MPOOL_PRIVATE
            Create a private memory pool (see _D_b_M_p_o_o_l(3) for fur-
            ther information).  Ignored unless  DB_INIT_MPOOL  is
            also specified.


       DB_NOMMAP
            Do  not  map  any  files within this environment (see
            _D_b_M_p_o_o_l(3) for further information).  Ignored  unless
            DB_INIT_MPOOL is also specified.


       DB_RECOVER
            Run  normal recovery on this environment before open-
            ing it for normal use.  If  this  flag  is  set,  the
            DB_CREATE  flag  must  also  be set since the regions
            will be removed and recreated.

            The _D_b_E_n_v_:_:_a_p_p_i_n_i_t function returns  successfully  if
            DB_RECOVER is specified and no log files exist, so it
            is necessary to ensure all necessary  log  files  are
            present  before running recovery.  For further infor-
            mation, consult the man page  for  _d_b___a_r_c_h_i_v_e(1)  and
            _d_b___r_e_c_o_v_e_r(1).


       DB_RECOVER_FATAL
            Run  catastrophic recovery on this environment before
            opening it for normal use.  If this flag is set,  the
            DB_CREATE  flag  must  also  be set since the regions
            will be removed and recreated.

            The _D_b_E_n_v_:_:_a_p_p_i_n_i_t function returns  successfully  if
            DB_RECOVER is specified and no log files exist, so it
            is necessary to ensure all necessary  log  files  are
            present  before running recovery.  For further infor-
            mation, consult the man page  for  _d_b___a_r_c_h_i_v_e(1)  and
            _d_b___r_e_c_o_v_e_r(1).


       DB_THREAD
            Ensure that handles returned by the Db subsystems are
            useable by multiple threads within a single  process,
            i.e.,  that  the  system  is ``free-threaded''.  (See
            _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3), _D_b_M_p_o_o_l(3),  _D_b_:_:_o_p_e_n(3)  and
            _D_b_T_x_n(3) for more information.)


       DB_TXN_NOSYNC
            On transaction commit, do not synchronously flush the
            log (see _D_b_T_x_n(3) for further information).   Ignored
            unless DB_INIT_TXN is also specified.


       DB_USE_ENVIRON
            The Db process' environment may be permitted to spec-
            ify information to be used when naming files (see the
            section  entitled ``FILE NAMING'' below).  As permit-
            ting users to specify which files are used can create
            security  problems,  environment  information will be
            used in  file  naming  for  all  users  only  if  the
            DB_USE_ENVIRON flag is set.


       DB_USE_ENVIRON_ROOT
            The Db process' environment may be permitted to spec-
            ify information to be used when naming files (see the
            section  entitled ``FILE NAMING'' below).  As permit-
            ting users to specify which files are used can create
            security problems, if the DB_USE_ENVIRON_ROOT flag is
            set, environment information will be  used  for  file
            naming only for users with a user-ID matching that of
            the  superuser  (specifically,  users  for  whom  the
            _g_e_t_u_i_d system call returns the user-ID 0).

       The  Db environment is configured based on which set meth-
       ods have been used.  It is expected that applications will
       use  a  single  DbEnv object as the argument to all of the
       subsystems in the DB package.  The  fields  of  the  DbEnv
       object used by _a_p_p_i_n_i_t are described below.  As references
       to the DbEnv object may be maintained by  _a_p_p_i_n_i_t,  it  is
       necessary  that  the DbEnv object and memory it references
       be valid until the object is destroyed.  The  _d_b_e_n_v  argu-
       ment  may  not be NULL.  If any of the fields of the _d_b_e_n_v
       are set to 0, defaults appropriate for the system are used
       where possible.

       The  following  fields in the DbEnv object may be initial-
       ized, using the appropriate  set  method,  before  calling
       _a_p_p_i_n_i_t:

       void (*db_errcall)(char *db_errpfx, char *buffer);
            When  an  error  occurs  in  the DB package, an _e_r_r_n_o
            value is returned by the method.  In some cases, how-
            ever,  the  _e_r_r_n_o  value  may be insufficient to com-
            pletely describe the cause of the error.

            If _d_b___e_r_r_c_a_l_l is non-NULL,  it  may  be  called  with
            additional error information.  The _d_b___e_r_r_p_f_x argument
            is the current environment's  _d_b___e_r_r_p_f_x  field.   The
            _b_u_f_f_e_r argument contains a nul-terminated string with
            the additional information.

            This error logging facility should  not  be  required
            for  normal operation, but may be useful in debugging
            applications.

       FILE *db_errfile;
            The  _d_b___e_r_r_f_i_l_e  field  behaves  similarly   to   the
            _d_b___e_r_r_c_a_l_l  field,  except  that the error message is
            written to the file stream represented by _d_b___e_r_r_f_i_l_e.

            If  _d_b___e_r_r_p_f_x  is  non-NULL, the message will be pre-
            ceded by the string referenced by _d_b___e_r_r_p_f_x, a  colon
            (``:'') and a space.  The message will be followed by
            a newline character.

       const char *db_errpfx;
            A prefix to prepend to error  messages.   Because  Db
            does  not copy the memory referenced by the _d_b___e_r_r_p_f_x
            field, the application may modify the  error  message
            prefix at any time.

       ostream* error_stream;
            The  error_stream  functions  like  the  error  file,
            allowing errors to  be  redirected  to  a  C++  error
            stream.   It  is unwise to use both error_stream with
            nonzero values of either errcall or errfile.

       int db_verbose;
            Include informational and debugging messages as  well
            as  error  messages  in the _d_b___e_r_r_c_a_l_l and _d_b___e_r_r_f_i_l_e
            output.

       Each of the open functions that _a_p_p_i_n_i_t may call  (_D_b_L_o_c_k_-
       _T_a_b_:_:_o_p_e_n,  _D_b_L_o_g_:_:_o_p_e_n, _D_b_M_p_o_o_l_:_:_o_p_e_n and _D_b_T_x_n_M_g_r_:_:_o_p_e_n)
       is  called  as  follows,  where  the  DB_CREATE  flag   is
       optional:

            XXX::open(NULL, DB_CREATE,
               S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP, dbenv)

       This call will cause each subsystem to construct pathnames
       as described in the section on ``FILE NAMING''.  The  sub-
       system  has  permission to read and write underlying files
       as necessary, and optionally to create files.   (All  cre-
       ated  files  will be created readable and writeable by the
       owner and the group.  The group ownership of created files
       is  based on the system and directory defaults, and is not
       further specified by Db.)

       In addition, the _d_b_e_n_v argument  is  passed  to  the  open
       functions  of  any subsystems initialized by _a_p_p_i_n_i_t.  For
       this reason the fields of the DbEnv object relevant to the
       subsystems  being  initialized must themselves be initial-
       ized before _a_p_p_i_n_i_t is called.  See the  manual  page  for
       each  subsystem for a list of these fields and their uses.

       The return value from each of these calls is placed in the
       appropriate field of the DbEnv object:

       DbLockTab *lk_info;
             The return value of the _D_b_L_o_c_k_T_a_b_:_:_o_p_e_n(3) call.

       DbLog *lg_info;
             The return value of the _D_b_L_o_g_:_:_o_p_e_n(3) call.

       DbMpool *mp_info;
             The return value of the _D_b_M_p_o_o_l_:_:_o_p_e_n(3) call.

       DbTxnMgr *tx_info;
             The return value of the _D_b_T_x_n_M_g_r_:_:_o_p_e_n(3) call.

       In general, these fields are not directly used by applica-
       tions; subsystems of Db that use these fields will  simply
       reference them using the DbEnv argument passed to the sub-
       system.

       For example, an  application  using  the  Db  hash  access
       method  functions  to  access  a  database will first call
       _D_b_:_:_o_p_e_n passing it the DbEnv argument filled  in  by  the
       initial  call  to  _a_p_p_i_n_i_t.  Then, all future calls to the
       hash access method functions for that database will  auto-
       matically  use  the  underlying  shared memory buffer pool
       that was specified by the  _m_p___i_n_f_o  field  of  that  DbEnv
       argument.

       The  single  exception  to this rule is the _t_x___i_n_f_o field,
       which applications must explicitly specify to  the  _D_b_T_x_n_-
       _M_g_r_:_:_b_e_g_i_n, _D_b_T_x_n_M_g_r_:_:_c_h_e_c_k_p_o_i_n_t and _D_b_T_x_n_M_g_r_:_:_c_l_o_s_e func-
       tions.

       The _e_r_r_o_r___m_o_d_e_l field of DbEnv allows the user to  config-
       ure  the  way errors are treated in DB.  It can be changed
       at any time (e.g., after the call to _D_b_E_n_v_:_:_a_p_p_i_n_i_t).  The
       error model is described in _D_b_E_x_c_e_p_t_i_o_n(3).

FFIILLEE NNAAMMIINNGG
       The  most  important  task of _a_p_p_i_n_i_t is to structure file
       naming within Db.

       Each of the locking, logging, memory pool and  transaction
       subsystems  of Db require shared memory regions, backed by
       the filesystem.   Further,  cooperating  applications  (or
       multiple  invocations  of the same application) must agree
       on the location of the shared  memory  regions  and  other
       files used by the Db subsystems, the log files used by the
       logging subsystem, and, of course, the data files.

       Although it is possible to specify full pathnames  to  all
       Db  functions, this is cumbersome and requires that appli-
       cations be recompiled when database files are moved.   The
       _a_p_p_i_n_i_t  method  makes it possible to place database files
       in a single directory, or in multiple directories, grouped
       by their method within the database.

       Applications  are  normally  expected  to specify a single
       directory home for their database.  This can be done  eas-
       ily  in  the call to _a_p_p_i_n_i_t by specifying a value for the
       _d_b___h_o_m_e argument.  There are more  complex  configurations
       where  it  may be desirable to override _d_b___h_o_m_e or provide
       supplementary path information.

       The following describes the possible ways  in  which  file
       naming  information  may  be  specified to the Db library.
       The specific circumstances and order in which  these  ways
       are applied are described in a subsequent paragraph.

       _d_b___h_o_m_e
            If  the  _d_b___h_o_m_e argument to _a_p_p_i_n_i_t is non-NULL, its
            value may be used as the  database  home,  and  files
            named relative to its path.

       DB_HOME
            If  the  DB_HOME  environment  variable  is  set when
            _a_p_p_i_n_i_t is called, its  value  may  be  used  as  the
            database  home, and files named relative to its path.

       _d_b___c_o_n_f_i_g
            The _d_b___c_o_n_f_i_g argument to  _a_p_p_i_n_i_t  may  be  used  to
            specify  an  array of character strings of the format
            ``NAME VALUE'', that specify  file  name  information
            for  the  process'  Db  environment.   The whitespace
            delimiting the two parts of the entry may be  one  or
            more <space> or <tab> characters.  (Leading or trail-
            ing <space>  and  <tab>  characters  are  discarded.)
            Each  entry  must specify both the NAME and the VALUE
            of the pair.  All entries with unrecognized NAME val-
            ues  will  be  ignored.   The _d_b___c_o_n_f_i_g array must be
            NULL terminated.

       DB_CONFIG
            The same information specified to the _d_b___c_o_n_f_i_g argu-
            ment  to  _a_p_p_i_n_i_t may be specified using a configura-
            tion file.  If a database  home  directory  has  been
            specified  (either  by  the  application specifying a
            non-NULL _d_b___h_o_m_e  argument  to  _a_p_p_i_n_i_t,  or  by  the
            application setting the DB_USE_ENVIRON or DB_USE_ENV-
            IRON_ROOT flags and the DB_HOME environment  variable
            being  set),  any  file  named  ``DB_CONFIG''  in the
            database home directory will be read for lines of the
            format ``NAME VALUE''.  The whitespace delimiting the
            two parts of the line may be one or more  <space>  or
            <tab>  characters.   (Leading or trailing <space> and
            <tab> characters are discarded.)  All empty lines  or
            lines  whose first non-whitespace character is a hash
            character (``#'') will be ignored.   Each  line  must
            specify both the NAME and the VALUE of the pair.  All
            lines with unrecognized NAME values will be  ignored.

       The  following ``NAME VALUE'' pairs in the _d_b___c_o_n_f_i_g argu-
       ment and the DB_CONFIG file are currently supported by Db.

       DB_DATA_DIR
            The path of a directory to be used as the location of
            the access method data files, e.g.,  paths  specified
            to  the  _D_b_:_:_o_p_e_n(3)  method will be relative to this
            path.

            The DB_DATA_DIR paths are  additive,  and  specifying
            more than one will result in each specified directory
            being searched for database data files.  If  multiple
            paths  are  specified, created data files will always
            be created in the ffiirrsstt directory specified.

       DB_LOG_DIR
            The path of a directory to be used as the location of
            logging  files,  e.g.,  files created by the _D_b_L_o_g(3)
            subsystem will be relative  to  this  directory.   If
            specified,  this  is  the directory name that will be
            passed to _D_b_L_o_g_:_:_o_p_e_n(3).

       DB_TMP_DIR
            The path of a directory to be used as the location of
            temporary  files, e.g., files created to back in-mem-
            ory access method databases will be created  relative
            to this path.  Note, these temporary files can poten-
            tially be quite large, depending on the size  of  the
            database.

            If  DB_TMP_DIR  is not specified, the following envi-
            ronment variables are checked in  order:  ``TMPDIR'',
            ``TEMP'', ``TMP'' and ``TempFolder''.  If one of them
            is set, temporary files are created relative  to  the
            directory it specifies.

            If  DB_TMP_DIR is not specified and none of the above
            environment variables are set, the first possible one
            of  the  following  directories  is  used:  _/_v_a_r_/_t_m_p,
            _/_u_s_r_/_t_m_p, _/_t_e_m_p, _/_t_m_p, _C_:_/_t_e_m_p and _C_:_/_t_m_p.

       The following describes  the  specific  circumstances  and
       order  in which the different ways of specifying file nam-
       ing information are applied.  Specifically, Db  file  name
       processing  proceeds  sequentially  through  the following
       steps:

       ``/''
            If any file name specified to any  Db  method  begins
            with  a leading slash, that file name is used without
            modification by Db.
       DB_CONFIG
            If   a   relevant   configuration    string    (e.g.,
            DB_DATA_DIR),  is specified in the DB_CONFIG configu-
            ration file, the VALUE from the ``NAME  VALUE''  pair
            is  prepended  to  the  current  file  name.   If the
            resulting file name begins with a leading slash,  the
            file name is used without further modification by Db.

            The DB_CONFIG configuration file is intended to  per-
            mit systems to customize file location for a database
            independent of applications using that database.  For
            example,   a  database  administrator  can  move  the
            database log and data files to a  different  location
            without application recompilation.

       _d_b___c_o_n_f_i_g
            If    a    relevant   configuration   string   (e.g.,
            DB_DATA_DIR), is specified in the _d_b___c_o_n_f_i_g  argument
            and is not specified in the DB_CONFIG file, the VALUE
            from the ``NAME VALUE'' pair is prepended to the cur-
            rent  file  name.   If the resulting file name begins
            with a leading slash, the file name is  used  without
            further modification by Db.

            The _d_b___c_o_n_f_i_g argument is intended to permit applica-
            tions to customize file location for a database.  For
            example,  an  application writer can place data files
            and log files in different directories, or  instanti-
            ate  a  new  log  directory each time the application
            runs.

       DB_HOME
            If the DB_HOME environment variable was set, (and the
            application has set the appropriate DB_USE_ENVIRON or
            DB_USE_ENVIRON_ROOT environment variable), its  value
            is  prepended  to  the  current  file  name.   If the
            resulting file name begins with a leading slash,  the
            file name is used without further modification by Db.

            The DB_HOME environment variable is intended to  per-
            mit  users  and  system  administrators  to  override
            application and installation defaults, e.g.,

                 env DB_HOME=/database/my_home application

            Alternatively, application writers are encouraged  to
            support  the  --hh  option  found  in the supporting Db
            utilities to let users specify a database home.

       _d_b___h_o_m_e
            If the application specified a non-NULL _d_b___h_o_m_e argu-
            ment  to  _a_p_p_i_n_i_t  (and  the  database  home  was not
            already specified using the DB_HOME environment vari-
            able)  its  value  is  prepended  to the current file
            name.  If the resulting file name begins with a lead-
            ing slash, the file name is used without further mod-
            ification by Db.

       (nothing)
            Finally, all file names are interpreted  relative  to
            the current working directory of the process.

       The  common  model  for a Db environment is one where only
       the DB_HOME environment variable, or the _d_b___h_o_m_e argument,
       is  specified.   In this case, all data files will be pre-
       sumed to be relative to that directory, and all files cre-
       ated  by  the Db subsystems will be created in that direc-
       tory.

       The more complex model for a transaction environment might
       be  one  where  a database home is specified, using either
       the DB_HOME environment variable or the  _d_b___h_o_m_e  argument
       to _a_p_p_i_n_i_t, and then DB_DATA_DIR and DB_LOG_DIR are set to
       the relative path names of directories underneath the home
       directory  using  the _d_b___c_o_n_f_i_g argument to _a_p_p_i_n_i_t or the
       DB_CONFIG file.

EEXXAAMMPPLLEESS
       Store all files in the directory _/_a_/_d_a_t_a_b_a_s_e:

              DbEnv::appinit("/a/database", NULL, ...);

       Create temporary backing files in  _/_b_/_t_e_m_p_o_r_a_r_y,  and  all
       other files in _/_a_/_d_a_t_a_b_a_s_e:

              char *config[] = {
                  "DB_TMP_DIR /b/temporary",
                  NULL
              };

              DbEnv::appinit("/a/database", config, ...);

       Store  data  files  in  _/_a_/_d_a_t_a_b_a_s_e_/_d_a_t_a_d_i_r,  log files in
       _/_a_/_d_a_t_a_b_a_s_e_/_l_o_g_d_i_r, and all other files in  the  directory
       _/_a_/_d_a_t_a_b_a_s_e:

              char *config[] = {
                  "DB_DATA_DIR datadir",
                  "DB_LOG_DIR logdir",
                  NULL
              };

              DbEnv::appinit("/a/database", config, ...);

       Store  data  files  in _/_a_/_d_a_t_a_b_a_s_e_/_d_a_t_a_1 and _/_b_/_d_a_t_a_2, and
       all other files in the directory  _/_a_/_d_a_t_a_b_a_s_e.   Any  data
       files that are created will be created in _/_b_/_d_a_t_a_2:

              char *config[] = {
                  "DB_DATA_DIR /b/data2",
                  "DB_DATA_DIR data1",
                  NULL
              };

              DbEnv::appinit("/a/database", config, ...);

       See  the  file  _e_x_a_m_p_l_e_s___c_x_x_/_A_p_p_i_n_i_t_E_x_a_m_p_l_e_._c_p_p  in the Db
       source distribution for a C++ language code example of how
       an application might use _a_p_p_i_n_i_t to configure its Db envi-
       ronment.

EERRRROORRSS
       Methods marked as returning _e_r_r_n_o will, by default,  throw
       an exception that encapsulates the error information.  The
       default error behavior can be changed, see _D_b_E_x_c_e_p_t_i_o_n(3).

       The _a_p_p_i_n_i_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: Db::close(3),
       DbEnv::appexit(3), DbLock::unlink(3), DbLockTab::open(3),
       DbLog::compare(3), DbLog::get(3), DbLog::open(3),
       DbLog::unlink(3), DbMpool::open(3), DbMpool::unlink(3),
       DbTxnMgr::checkpoint(3), DbTxnMgr::open(3), DbTxn-
       Mgr::unlink(3), calloc(3), fclose(3), fcntl(2), fflush(3),
       fgets(3), fopen(3), malloc(3), memcpy(3), memset(3), real-
       loc(3), stat(2), strchr(3), strcmp(3), strcpy(3),
       strdup(3), strerror(3), strlen(3), strsep(3), and time(3).

       In addition, the _a_p_p_i_n_i_t method may fail and throw a _D_b_E_x_-
       _c_e_p_t_i_o_n(3) or return _e_r_r_n_o for the following conditions:

       [EINVAL]
            An invalid flag value or parameter was specified.

            The DB_THREAD flag was specified  and  spinlocks  are
            not implemented for this architecture.

            The  DB_RECOVER  or  DB_RECOVER_FATAL flag was speci-
            fied, and no log files were found.

            The DB_HOME or TMPDIR environment variables were  set
            but empty.

            An incorrectly formatted ``NAME VALUE'' entry or line
            was found.

       [ENOSPC]
            HP-UX only: a previously created Db  environment  for
            this process still exists.

       The   _D_b_E_n_v_:_:_a_p_p_e_x_i_t   method   may   fail   and  throw  a
       _D_b_E_x_c_e_p_t_i_o_n(3)

       or return _e_r_r_n_o for any of the errors  specified  for  the
       following DB and library functions: DbLockTab::close(3),
       DbLog::close(3), DbMpool::close(3), and DbTxn-
       Mgr::close(3).

BBUUGGSS
       Due to the constraints of the PA-RISC memory architecture,
       HP-UX does not allow a process to  map  a  file  into  its
       address  space  multiple  times.  For this reason, each DB
       environment may be opened only once by a process on HP-UX,
       i.e., calls to _a_p_p_i_n_i_t will fail if the specified Db envi-
       ronment has been opened and not subsequently  closed.

       On Windows/95, files that are opened by multiple processes
       do  not  share data correctly.  To tell Berkeley DB to use
       the paging file to share memory among processes,  use  the
       DB_REGION_NAME  flag  of the _d_b___v_a_l_u_e___s_e_t function.  Obvi-
       ously, you do not need to do this if only a single process
       will be accessing database files.

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
