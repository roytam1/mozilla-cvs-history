

NNAAMMEE
       Dbc - database sequential access functions

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ddbb__ccxxxx..hh>>

       iinntt
       DDbbcc::::cclloossee((vvooiidd));;

       iinntt
       DDbbcc::::ddeell((uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbbcc::::ggeett((DDbbtt **kkeeyy,, DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

       iinntt
       DDbbcc::::ppuutt((DDbbtt **kkeeyy,, DDbbtt **ddaattaa,, uu__iinntt3322__tt ffllaaggss));;

DDEESSCCRRIIPPTTIIOONN
       The DB library is a family of classes that provides a mod-
       ular programming interface to transactions and record-ori-
       ented  file  access.   The  library  includes  support for
       transactions, locking, logging and file page  caching,  as
       well  as  various  indexed  access  methods.   Many of the
       classes (e.g., the file page  caching  class)  are  useful
       independent of the other DB classes, although some classes
       are explicitly based on other classes (e.g.,  transactions
       and  logging).   For a general description of the DB pack-
       age, see _d_b___i_n_t_r_o(3).

       This manual page describes the  specific  details  of  the
       cursor support for the access methods in _D_b_(_3_).

       The  _D_b_c  functions  are  the library interface supporting
       sequential access to the  records  stored  by  the  access
       methods of the Db library.  Cursors are created by calling
       _D_b_:_:_c_u_r_s_o_r method described  in  _D_b(3),  which  returns  a
       pointer to a Dbc object.

       Each cursor maintains positioning information within a set
       of key/data pairs.  In the presence of transactions,  cur-
       sors  are only valid within the context of a single trans-
       action, the  one  specified  during  the  _D_b_:_:_c_u_r_s_o_r  call
       described  in  _D_b(3).   All cursor operations will be exe-
       cuted in the context of that transaction.  Before aborting
       or  committing a transaction, all cursors used within that
       transaction must be closed.  In the presence  of  transac-
       tions,  the  application  must call _D_b_T_x_n_:_:_a_b_o_r_t if any of
       the cursor operations returns that a deadlock (EAGAIN)  or
       system failure occurred.

       When  locking  is enabled, page locks are retained between
       consecutive cursor calls.  For this reason, in  the  pres-
       ence  of  locking,  applications should discard cursors as
       soon as they are done with them.   Calling  the  _D_b_:_:_c_l_o_s_e
       method (see _D_b(3)) discards any cursors opened in the con-
       text of a particular Db object returned  by  the  _D_b_:_:_o_p_e_n
       call.

       The methods of the Dbc are defined as follows:

       int Dbc::close();
            A method that discards the cursor.  No further refer-
            ences to the Dbc object should be made.

            The _D_b_c_:_:_c_l_o_s_e  method  throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)  or
            returns  the  value of _e_r_r_n_o on failure and 0 on suc-
            cess.

       int Dbc::del(u_int32_t flags);
            A method that deletes  the  key/data  pair  currently
            referenced by the cursor.

            The  _f_l_a_g_s parameter is currently unused, and must be
            set to 0.

            The cursor position is unchanged after a  delete  and
            subsequent  calls  to  cursor functions expecting the
            cursor to reference an existing key will fail.

            The  _D_b_c_:_:_d_e_l  method  throws  a  _D_b_E_x_c_e_p_t_i_o_n(3)   or
            returns  the value of _e_r_r_n_o on failure, 0 on success,
            and DB_KEYEMPTY  if  the  element  has  already  been
            deleted.

       int Dbc::get(Dbt *key, Dbt *data, u_int32_t flags);
            A  method  that  retrieves  key/data  pairs  from the
            database.  The address and  length  of  the  key  are
            returned  in the object referenced by _k_e_y (except for
            the case of the DB_SET flag where the _k_e_y  object  is
            unchanged),  and  the  address and length of the data
            are returned in the object referenced by _d_a_t_a.

            Modifications to the  database  during  a  sequential
            scan  will  be  reflected  in  the scan, i.e. records
            inserted behind a cursor will not be  returned  while
            records  inserted  in  front  of  a  cursor  will  be
            returned.

            In recno databases, missing  entries  (i.e.,  entries
            that  were never explicitly created or that were cre-
            ated and then deleted),  will  be  skipped  during  a
            sequential scan.

            If  multiple  threads  or processes insert items into
            the same database file  without  using  locking,  the
            results are undefined.  For more detail, see the sec-
            tion below on cursor stability.

            The parameter _f_l_a_g_s must be set to exactly one of the
            following values:


            DB_FIRST
                 The   cursor  is  set  to  reference  the  first
                 key/data pair of the database, and that pair  is
                 returned.  In the presence of duplicate key val-
                 ues, the first data item in the  set  of  dupli-
                 cates is returned.

                 If  the  database  is empty, the _D_b_c_:_:_g_e_t method
                 will return DB_NOTFOUND.


            DB_LAST
                 The cursor is set to reference the last key/data
                 pair of the database, and that pair is returned.
                 In the presence of  duplicate  key  values,  the
                 last  data  item  in  the  set  of duplicates is
                 returned.

                 If the database is empty,  the  _D_b_c_:_:_g_e_t  method
                 will return DB_NOTFOUND.


            DB_NEXT
                 If the cursor is not yet initialized, DB_NEXT is
                 identical to DB_FIRST.

                 Otherwise, move the cursor to the next  key/data
                 pair of the database, and that pair is returned.
                 In the presence of  duplicate  key  values,  the
                 value of the key may not change.

                 If  the  cursor is already on the last record in
                 the database, the _D_b_c_:_:_g_e_t  method  will  return
                 DB_NOTFOUND.


            DB_PREV
                 If the cursor is not yet initialized, DB_PREV is
                 identical to DB_LAST.

                 Otherwise,  move  the  cursor  to  the  previous
                 key/data  pair of the database, and that pair is
                 returned.  In the presence of duplicate key val-
                 ues, the value of the key may not change.

                 If  the cursor is already on the first record in
                 the database, the _D_b_c_:_:_g_e_t  method  will  return
                 DB_NOTFOUND.


            DB_CURRENT
                 Return the key/data pair currently referenced by
                 the cursor.


                 If the cursor key/data pair  has  been  deleted,
                 the _D_b_c_:_:_g_e_t method will return DB_KEYEMPTY.

                 If  the  cursor  is  not  yet  initialized,  the
                 _D_b_c_:_:_g_e_t method will return EINVAL.


            DB_SET
                 Move the cursor to the specified  key/data  pair
                 of the database, and return the datum associated
                 with the given key.

                 In  the  presence  of  duplicate   key   values,
                 _D_b_c_:_:_g_e_t will return the first data item for the
                 given key.

                 If the database is  a  recno  database  and  the
                 requested  key  exists, but was never explicitly
                 created by the application or was later deleted,
                 the _D_b_c_:_:_g_e_t method returns DB_KEYEMPTY.

                 If  no  matching  keys  are  found, the _D_b_c_:_:_g_e_t
                 method will return DB_NOTFOUND.


            DB_SET_RANGE
                 The DB_SET_RANGE flag is identical to the DB_SET
                 flag, except that the key is returned as well as
                 the data item, and, in the  case  of  the  btree
                 access method, the returned key/data pair is the
                 smallest key greater than or equal to the speci-
                 fied  key (as determined by the comparison func-
                 tion), permitting partial key matches and  range
                 searches.


            DB_SET_RECNO
                 Move  the cursor to the specific numbered record
                 of  the  database,  and  return  the  associated
                 key/data  pair.  The _d_a_t_a field of the specified
                 _k_e_y must be a pointer to a memory location  from
                 which  a _d_b___r_e_c_n_o___t may be read, as described in
                 _D_b_t(3).  This memory location will  be  read  to
                 determine the record to be retrieved.

                 For DB_SET_RECNO to be specified, the underlying
                 database must be of type btree and it must  have
                 been   created  with  the  DB_RECNUM  flag  (see
                 _D_b_:_:_o_p_e_n in _D_b(3)).


            DB_GET_RECNO
                 Return the record  number  associated  with  the
                 cursor.   The  record number will be returned in
                 the data Dbt as described in  _D_b_t(3).   The  _k_e_y
                 parameter is ignored.

                 For DB_GET_RECNO to be specified, the underlying
                 database must be of type btree and it must  have
                 been   created  with  the  DB_RECNUM  flag  (see
                 _D_b_:_:_o_p_e_n in _D_b(3)).

            Otherwise, the  _D_b_c_:_:_g_e_t  method  throws  a  _D_b_E_x_c_e_p_-
            _t_i_o_n(3)  or returns the value of _e_r_r_n_o on failure and
            0 on success.

            If _D_b_c_:_:_g_e_t fails for any reason, the  state  of  the
            cursor will be unchanged.

       int Dbc::put(Dbt *key, Dbt *data, u_int32_t flags);
              A  method  that  stores  key/data  pairs  into  the
            database.

            The _f_l_a_g_s parameter must be set to exactly one of the
            following values:


            DB_AFTER
                 In  the  case of the btree and hash access meth-
                 ods, insert the data element as a duplicate ele-
                 ment  of  the key referenced by the cursor.  The
                 new element appears immediately after  the  cur-
                 rent cursor position.  It is an error to specify
                 DB_AFTER  if  the  underlying  btree   or   hash
                 database  was  not created with the DB_DUP flag.
                 The _k_e_y parameter is ignored.

                 In the case of the recno access method, it is an
                 error  to  specify  DB_AFTER  if  the underlying
                 recno  database  was  not   created   with   the
                 DB_RENUMBER  flag.   If the DB_RENUMBER flag was
                 specified, a new key  is  created,  all  records
                 after the inserted item are automatically renum-
                 bered, and the key of the new record is returned
                 in  the  object referenced by the parameter _k_e_y.
                 The  initial  value  of  the  _k_e_y  parameter  is
                 ignored.   See _D_b_:_:_o_p_e_n in _D_b(3) for more infor-
                 mation.

                 If  the  cursor  is  not  yet  initialized,  the
                 _D_b_c_:_:_p_u_t method will return EINVAL.


            DB_BEFORE
                 In  the  case of the btree and hash access meth-
                 ods, insert the data element as a duplicate ele-
                 ment  of  the key referenced by the cursor.  The
                 new  element  appears  immediately  before   the
                 current  cursor  position.   It  is  an error to
                 specify DB_BEFORE if  the  underlying  btree  or
                 hash  database  was  not created with the DB_DUP
                 flag.  The _k_e_y parameter is ignored.

                 In the case of the recno access method, it is an
                 error  to  specify  DB_BEFORE  if the underlying
                 recno  database  was  not   created   with   the
                 DB_RENUMBER  flag.   If the DB_RENUMBER flag was
                 specified, a new key  is  created,  the  current
                 record  and  all  records after it are automati-
                 cally renumbered, and the key of the new  record
                 is  returned  in  the  object  referenced by the
                 parameter _k_e_y.  The initial  value  of  the  _k_e_y
                 parameter is ignored.  See _D_b_:_:_o_p_e_n in _D_b(3) for
                 more information.

                 If  the  cursor  is  not  yet  initialized,  the
                 _D_b_c_:_:_p_u_t method will return EINVAL.


            DB_CURRENT
                 Overwrite  the  data of the key/data pair refer-
                 enced by the  cursor  with  the  specified  data
                 item.

                 The _k_e_y parameter is ignored.

                 If  the  cursor  is  not  yet  initialized,  the
                 _D_b_c_:_:_p_u_t method will return EINVAL.


            DB_KEYFIRST
                 In the case of the btree and hash  access  meth-
                 ods, insert the specified key/data pair into the
                 database.  If the  key  already  exists  in  the
                 database, the inserted data item is added as the
                 first of the data items for that key.

                 The DB_KEYFIRST flag may not be specified to the
                 recno access method.


            DB_KEYLAST
                 Insert  the  specified  key/data  pair  into the
                 database.  If the  key  already  exists  in  the
                 database, the inserted data item is added as the
                 last of the data items for that key.

                 The DB_KEYLAST flag may not be specified to  the
                 recno access method.

            If  the  cursor record has been deleted, the _D_b_c_:_:_p_u_t
            method will return DB_KEYEMPTY.

            Otherwise, the  _D_b_c_:_:_p_u_t  method  throws  a  _D_b_E_x_c_e_p_-
            _t_i_o_n(3)  or returns the value of _e_r_r_n_o on failure and
            0 on success.

            If _D_b_c_:_:_p_u_t fails for any reason, the  state  of  the
            cursor  will  be unchanged.  If _D_b_c_:_:_p_u_t succeeds and
            an item is inserted into the database, the cursor  is
            always  positioned  to  reference  the newly inserted
            item.

CCUURRSSOORR SSTTAABBIILLIITTYY
       In the absence of locking, no guarantees  are  made  about
       the   stability  of  cursors  in  different  processes  or
       threads.  However, the  btree  and  recno  access  methods
       guarantee  that cursor operations, interspersed with other
       cursor or non-cursor operations in the same thread of con-
       trol  (i.e.,  thread  or  single-threaded  process),  will
       always return keys in order  and  will  return  each  non-
       deleted  key/data  pair  exactly  once.   Because the hash
       access method uses a dynamic hashing algorithm, it  cannot
       guarantee any form of stability in the presence of inserts
       and deletes unless locking is performed.

       If locking was specified when the Db file was opened,  but
       transactions are not in effect, the access methods provide
       repeatable reads with respect to the cursor.  That  is,  a
       DB_CURRENT  call on the cursor is guaranteed to return the
       same record as was returned on the last call to  the  cur-
       sor.

       In  the  presence of transactions, the access method calls
       between _D_b_T_x_n_M_g_r_:_:_b_e_g_i_n and _D_b_T_x_n_:_:_a_b_o_r_t or  _D_b_T_x_n_:_:_c_o_m_m_i_t
       provide  degree  3 consistency.  For all access methods, a
       cursor scan of the database performed within  the  context
       of  a  transaction  is  guaranteed to return each key/data
       pair once and only once, except  in  the  following  case.
       If,  while  performing a cursor scan using the hash access
       method, the transaction performing the scan inserts a  new
       pair  into  the  database,  it  is possible that duplicate
       key/data pairs will be returned.

EERRRROORRSS
       Methods marked as returning _e_r_r_n_o will, by default,  throw
       an exception that encapsulates the error information.  The
       default error behavior can be changed, see _D_b_E_x_c_e_p_t_i_o_n(3).

       The _D_b_c_:_:_c_l_o_s_e method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3),
       DbLog::put(3), DbMpoolFile::get(3), DbMpoolFile::put(3),
       DbMpoolFile::set(3), calloc(3), fcntl(2), fflush(3), mal-
       loc(3), memcpy(3), memmove(3), memset(3), realloc(3), and
       strerror(3).

       In  addition,  the  _D_b_c_:_:_c_l_o_s_e method may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EAGAIN]
            A lock was unavailable.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

       The _D_b_c_:_:_d_e_l method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: Db::del(3),
       DbLock::get(3), DbLock::put(3), DbLockTab::id(3), DbLock-
       Tab::vec(3), DbLog::put(3), DbMpoolFile::get(3), DbM-
       poolFile::put(3), DbMpoolFile::set(3), calloc(3),
       fcntl(2), fflush(3), malloc(3), memcpy(3), memmove(3),
       memset(3), realloc(3), and strerror(3).

       In  addition,  the  _D_b_c_:_:_d_e_l  method  may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

       The _D_b_c_:_:_g_e_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: Db::get(3),
       DbLock::get(3), DbLock::put(3), DbLockTab::id(3), DbLock-
       Tab::vec(3), DbLog::put(3), DbMpoolFile::get(3), DbM-
       poolFile::put(3), DbMpoolFile::set(3), calloc(3),
       fcntl(2), fflush(3), malloc(3), memcmp(3), memcpy(3), mem-
       move(3), memset(3), realloc(3), and strerror(3).

       In  addition,  the  _D_b_c_:_:_g_e_t  method  may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:


       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

            The  DB_THREAD  flag  was  specified  to the _D_b_:_:_o_p_e_n
            method described in _D_b(3) and neither the DB_DBT_MAL-
            LOC or DB_DBT_USERMEM flags were set in the Dbt.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

       The _D_b_c_:_:_p_u_t method may fail and throw a _D_b_E_x_c_e_p_t_i_o_n(3)

       or  return  _e_r_r_n_o  for any of the errors specified for the
       following DB and library functions: DbLock::get(3),
       DbLock::put(3), DbLockTab::id(3), DbLockTab::vec(3),
       DbLog::put(3), DbMpoolFile::get(3), DbMpoolFile::put(3),
       DbMpoolFile::set(3), calloc(3), fcntl(2), fflush(3), mal-
       loc(3), memcmp(3), memcpy(3), memmove(3), memset(3), real-
       loc(3), and strerror(3).

       In  addition,  the  _D_b_c_:_:_p_u_t  method  may fail and throw a
       _D_b_E_x_c_e_p_t_i_o_n(3) or return _e_r_r_n_o for  the  following  condi-
       tions:

       [EACCES]
            An attempt was made to modify a read-only database.

       [EAGAIN]
            A lock was unavailable.

       [EINVAL]
            An invalid flag value or parameter was specified.

       [EPERM]
            Database  corruption  was  detected.   All subsequent
            database calls (other  than  _D_b_:_:_c_l_o_s_e)  will  return
            EPERM.

SSEEEE AALLSSOO
       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___i_n_t_e_r_n_a_l(3), _d_b___t_h_r_e_a_d(3), _D_b(3), _D_b_c(3), _D_b_E_n_v(3),
       _D_b_E_x_c_e_p_t_i_o_n(3), _D_b_I_n_f_o(3), _D_b_L_o_c_k(3), _D_b_L_o_c_k_T_a_b(3), _D_b_L_o_g(3),
       _D_b_L_s_n(3), _D_b_M_p_o_o_l(3), _D_b_M_p_o_o_l_F_i_l_e(3), _D_b_t(3), _D_b_T_x_n(3),
       _D_b_T_x_n_M_g_r(3)
