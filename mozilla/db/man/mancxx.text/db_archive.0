

NNAAMMEE
       db_archive - the DB database archiver

SSYYNNOOPPSSIISS
       ddbb__aarrcchhiivvee [--aallssvv] [--hh hhoommee]

DDEESSCCRRIIPPTTIIOONN
       The  _d_b___a_r_c_h_i_v_e  utility writes the pathnames of log files
       that are no longer in use (e.g.,  no  longer  involved  in
       active transactions), to the standard output, one pathname
       per line.  These log files should  be  written  to  backup
       media  to provide for recovery in the case of catastrophic
       failure (which also requires a snapshot  of  the  database
       files),  but  they  may then be deleted from the system to
       reclaim disk space.

       The options are as follows:

       --aa   Write all pathnames as absolute pathnames, instead of
            relative to the database home directories.

       --hh   Specify a home directory for the database.

       --ll   Write  out  the  pathnames of all of the database log
            files, whether or not they  are  involved  in  active
            transactions.

       --ss   Write the pathnames of all of the database files that
            need to be archived in order to recover the  database
            from  catastrophic  failure.   If any of the database
            files have not been accessed during the  lifetime  of
            the  current  log  files, _d_b___a_r_c_h_i_v_e will not include
            them in this output.

            It is possible that some of the files  referenced  in
            the  log have since been deleted from the system.  In
            this  case,  _d_b___a_r_c_h_i_v_e  will  ignore   them.    When
            _d_b___r_e_c_o_v_e_r(1) is run, any files referenced in the log
            that are not present during recovery are  assumed  to
            have been deleted and will not be recovered.

       --vv   Run  in  verbose mode, listing the checkpoints in the
            log files as they are reviewed.

       The  _d_b___a_r_c_h_i_v_e  utility  attaches  to  DB  shared  memory
       regions.   In  order to avoid region corruption, it should
       always be given the chance to detach and exit  gracefully.
       To  cause  _d_b___a_r_c_h_i_v_e  to  clean up after itself and exit,
       send it an interrupt signal (SIGINT).

       The _d_b___a_r_c_h_i_v_e utility exits 0 on success, and  >0  if  an
       error occurs.

DDBB AARRCCHHIIVVAALL PPRROOCCEEDDUURREESS
       There  are  two aspects to managing the recoverability and
       disk consumption of your DB  databases.   First,  you  may
       want to periodically create snapshots of your databases to
       make  it  possible  to  recover  them  from   catastrophic
       failure.   Second,  you'll want to periodically remove log
       files in order to conserve on disk space.  The two  proce-
       dures  are distinct from each other, and you cannot remove
       the current log files simply because you  have  created  a
       database snapshot.

       To  create a snapshot of your database that can be used to
       recover from catastrophic  failure,  the  following  steps
       should be taken:

       1.   Run  _d_b___a_r_c_h_i_v_e  -s  to  identify all of the database
            data files that must be saved, and  copy  them  to  a
            backup  device,  (e.g., tape).  If the database files
            are stored in a separate  directory  from  the  other
            database  files,  it  may  be  simpler to archive the
            directory itself instead of the individual files.

            MMoorree iimmppoorrttaannttllyy,, iiff aannyy ooff tthhee ddaattaabbaassee  ffiilleess  hhaavvee
            nnoott  bbeeeenn aacccceesssseedd dduurriinngg tthhee lliiffeettiimmee ooff tthhee ccuurrrreenntt
            lloogg ffiilleess,, ddbb__aarrcchhiivvee wwiillll nnoott lliisstt tthheemm iinn iittss  oouutt--
            ppuutt!!   For  this reason, it may be important to use a
            separate  database  file  directory,   archiving   it
            instead of the files listed by _d_b___a_r_c_h_i_v_e.

       2.   If  your  database is currently active, i.e., you are
            reading and writing to the database files  while  the
            snapshot  is  being taken, run _d_b___a_r_c_h_i_v_e -l to iden-
            tify the database log  files,  and  copy  them  to  a
            backup  device,  (e.g.,  tape).   If the database log
            files are stored in a  separate  directory  from  the
            other  database  files,  it may be simpler to archive
            the directory itself instead of the individual files.

       Note  that the order of these operations is important, and
       that the database files mmuusstt be archived  before  the  log
       files.

       The  DB  library  supports  on-line backups, and it is not
       necessary to stop reading or writing your databases during
       the  time  when  you  create this snapshot.  Note however,
       that the snapshot of an active database will be consistent
       as  of  some  unspecified  time  between  the start of the
       archival and when archival  is  completed.   To  create  a
       snapshot  as of a specific time, you must stop reading and
       writing  your  databases  for  the  entire  time  of   the
       archival,  force  a checkpoint (see _d_b___c_h_e_c_k_p_o_i_n_t(1)), and
       then archive the files listed by the _d_b___a_r_c_h_i_v_e  command's
       --ss and --ll options.

       Once  these  steps  are  completed,  your  database can be
       recovered from catastrophic failure to its state as of the
       time  the  archival  was done.  To update your snapshot so
       that recovery from catastrophic failure is possible up  to
       a  new point in time, repeat step #2, copying all existing
       log files to a backup device.

       Each time that a  complete  snapshot  is  made,  i.e.  all
       database and log files are copied to backup media, you may
       discard all previous snapshots and saved log files.

       The time to restore from catastrophic failure is  a  func-
       tion  of  the number of log records that have been written
       since the snapshot was originally created.   Perhaps  more
       importantly,  the more separate pieces of backup media you
       use, the more likely that you will have a problem  reading
       from  one of them.  For these reasons, it is often best to
       make snapshots on a regular basis.

       FFoorr aarrcchhiivvaall ssaaffeettyy rreemmeemmbbeerr ttoo eennssuurree tthhaatt yyoouu hhaavvee  mmuull--
       ttiippllee  ccooppiieess  ooff  yyoouurr  ddaattaabbaassee bbaacckkuuppss,, tthhaatt yyoouu vveerriiffyy
       tthhaatt yyoouurr aarrcchhiivvaall mmeeddiiaa iiss eerrrroorr--ffrreeee,, aanndd tthhaatt ccooppiieess ooff
       yyoouurr bbaacckkuuppss aarree ssttoorreedd ooffff--ssiittee!!

       To  restore  your database after catastrophic failure, the
       following steps should be taken:

       1.   Restore the copies of the  database  files  from  the
            backup media.

       2.   Restore  the  copies of the log files from the backup
            media, iinn tthhee  oorrddeerr  iinn  wwhhiicchh  tthheeyy  wweerree  wwrriitttteenn.
            (It's possible that the same log file appears on mul-
            tiple backups, and you only want the most recent ver-
            sion of that log file!)

       3.   Run _d_b___r_e_c_o_v_e_r -c to recover the database.

       It is possible to recreate the database in a location dif-
       ferent than the original, by specifying appropriate  path-
       names to the -h option of the _d_b___r_e_c_o_v_e_r utility.

       To remove log files, the following steps should be taken:

       1.   If you are concerned with catastrophic failure, first
            copy them to backup media (e.g., tape), as  described
            above.   This  is because log files are necessary for
            recovery from catastrophic failure.

       2.   Run _d_b___a_r_c_h_i_v_e, without options, to identify  all  of
            the  log  files  that  are  no  longer  in use (e.g.,
            involved in an active transaction).

       3.   Remove those log files from the system.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables affect  the  execution
       of _d_b___a_r_c_h_i_v_e:

       DB_HOME
            If the --hh option is not specified and the environment
            variable _D_B___H_O_M_E is set, it is used as  the  path  of
            the database home, as described in _d_b___a_p_p_i_n_i_t(3).

SSEEEE AALLSSOO
       The  DB  library  is  a family of groups of functions that
       provides a modular programming interface  to  transactions
       and  record-oriented  file  access.   The library includes
       support for transactions, locking, logging and  file  page
       caching,  as well as various indexed access methods.  Many
       of the functional groups  (e.g.,  the  file  page  caching
       functions)  are  useful  independent of the other DB func-
       tions, although  some  functional  groups  are  explicitly
       based  on  other functional groups (e.g., transactions and
       logging).  For a general description of  the  DB  package,
       see _d_b___i_n_t_r_o(3).

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
