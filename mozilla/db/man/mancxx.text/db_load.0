

NNAAMMEE
       db_load - the DB database loader

SSYYNNOOPPSSIISS
       ddbb__llooaadd [--nnTT] [--cc nnaammee==vvaalluuee]
            [--ff ffiillee] [--hh hhoommee] [--tt bbttrreeee || hhaasshh || rreeccnnoo] db_file

DDEESSCCRRIIPPTTIIOONN
       The _d_b___l_o_a_d utility reads  from  the  standard  input  and
       loads  it into the database _d_b___f_i_l_e.  The database _d_b___f_i_l_e
       is created if it does not already exist.

       The input to _d_b___l_o_a_d must be in the output  format  speci-
       fied   by   the   _d_b___d_u_m_p  or  _d_b___d_u_m_p_1_8_5  utilities  (see
       _d_b___d_u_m_p(1) for more information), or as specified for  the
       --TT option below.

       The options are as follows:

       --cc   Specify  configuration options for the DB_INFO struc-
            ture provided to _d_b___o_p_e_n(3), ignoring any value  they
            may have based on the input.  The command-line format
            is ``name=value''.   Supported  keywords  are  listed
            below.

       --ff   Read  from  the  specified _i_n_p_u_t file instead of from
            the standard input.

       --hh   Specify a home directory for the database.

            If a home directory is specified, the database  envi-
            ronment    is    opened   using   the   DB_INIT_LOCK,
            DB_INIT_LOG,    DB_INIT_MPOOL,    DB_INIT_TXN     and
            DB_USE_ENVIRON  flags  to _d_b___a_p_p_i_n_i_t(3).  (This means
            that _d_b___l_o_a_d can be used to load data into  databases
            while  they  are  in use by other processes.)  If the
            _d_b___a_p_p_i_n_i_t call fails, or if  no  home  directory  is
            specified,  the  database  is  still updated, but the
            environment is ignored, e.g., no locking is done.

       --nn   Do not overwrite existing keys in the  database  when
            loading  into  an  already  existing  database.  If a
            key/data pair cannot be loaded into the database  for
            this  reason,  a  warning message is displayed on the
            standard error  output  and  the  key/data  pair  are
            skipped.

       --TT   The  --TT  option  allows non-DB applications to easily
            load text files into databases.

            If the database to be created is  of  type  bbttrreeee  or
            hhaasshh,  the  input must be paired lines of text, where
            the first line of the pair is the key item,  and  the
            second  line  of  the  pair is its corresponding data
            item.  If the database  to  be  created  is  of  type
            rreeccnnoo,  the  input  must be lines of text, where each
            line is a new data item for the database.


            A simple escape mechanism, where  newline  and  back-
            slash  (``\'')  characters are special, is applied to
            the text input.  Newline characters  are  interpreted
            as  record  separators.   Backslash characters in the
            text will be interpreted in one of two ways:  if  the
            backslash  character precedes another backslash char-
            acter, the pair will  be  interpreted  as  a  literal
            backslash.   If  the backslash character precedes any
            other character, the  two  characters  following  the
            backslash will be interpreted as hexadecimal specifi-
            cation of a single character, e.g., ``\0a'' is a new-
            line character in the ASCII character set.

            For  this reason, any backslash or newline characters
            that naturally  occur  in  the  text  input  must  be
            escaped to avoid misinterpretation by _d_b___l_o_a_d.

            If  the --TT option is specified, the underlying access
            method type must be specified using the --tt option.

       --tt   Specify the  underlying  access  method.   If  no  --tt
            option is specified, the database will be loaded into
            a database of the same type as was  dumped,  e.g.,  a
            hash  database will be created if a hash database was
            dumped.

            Btree and hash databases may be converted from one to
            the  other.   Recno databases may not be converted to
            any other database type or from  any  other  database
            type.

       The  _d_b___l_o_a_d  utility exits 0 on success, 1 if one or more
       key/data pairs were not loaded into the  database  because
       the key already existed, and >1 if an error occurs.

KKEEYYWWOORRDDSS
       The  following  keywords are supported for the --cc command-
       line option.  See _d_b___o_p_e_n(3)  for  further  discussion  of
       these keywords and what values should be specified.

       The  parenthetical listing specifies how the value part of
       the ``name=value'' pair is interpreted.  Items  listed  as
       (boolean) expect value to be ``1'' (set) or ``0'' (unset).
       Items listed as (number) convert value to a number.  Items
       listed as (string) use the characters of value directly.

       bt_minkey (number)
            The minimum number of keys per page.

       db_lorder (number)
            The  byte  order  for integers in the stored database
            metadata.


       db_pagesize (number)
            The size of pages used for  nodes  in  the  tree,  in
            bytes.

       duplicates (boolean)
            The value of the DB_DUP flag.

       h_ffactor (number)
            The density within the hash table.

       h_nelem (number)
            The size of the hash table.

       re_len (number)
            Specify fixed-length records of the specified length.

       re_pad (string)
            Specify the fixed-length record pad character.

       recnum (boolean)
            The value of the DB_RECNUM flag.

       renumber (boolean)
            The value of the DB_RENUMBER flag.

EEXXAAMMPPLLEESS
       The _d_b___l_o_a_d utility can be used to load  text  files  into
       databases.   For  example, the following command loads the
       standard UNIX _/_e_t_c_/_p_a_s_s_w_d file into a database,  with  the
       login  name  as the key item and the entire password entry
       as the data item:
              awk -F: '{print $1; print $0}' < /etc/passwd |
                  sed 's/\\/\\\\/g' | db_load -T -t hash passwd.db

       Note that backslash characters naturally occurring in  the
       text are escaped to avoid interpretation as escape charac-
       ters by _d_b___l_o_a_d.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The following environment variables affect  the  execution
       of _d_b___l_o_a_d:

       DB_HOME
            If the --hh option is not specified and the environment
            variable _D_B___H_O_M_E is set, it is used as  the  path  of
            the database home, as described in _d_b___a_p_p_i_n_i_t(3).

SSEEEE AALLSSOO
       The  DB  library  is  a family of groups of functions that
       provides a modular programming interface  to  transactions
       and  record-oriented  file  access.   The library includes
       support for transactions, locking, logging and  file  page
       caching,  as well as various indexed access methods.  Many
       of the functional groups  (e.g.,  the  file  page  caching
       functions)  are  useful  independent of the other DB func-
       tions, although  some  functional  groups  are  explicitly
       based  on  other functional groups (e.g., transactions and
       logging).  For a general description of  the  DB  package,
       see _d_b___i_n_t_r_o(3).

       _d_b___a_r_c_h_i_v_e(1), _d_b___c_h_e_c_k_p_o_i_n_t(1), _d_b___d_e_a_d_l_o_c_k(1), _d_b___d_u_m_p(1),
       _d_b___l_o_a_d(1), _d_b___r_e_c_o_v_e_r(1), _d_b___s_t_a_t(1), _d_b___i_n_t_r_o(3),
       _d_b___a_p_p_i_n_i_t(3), _d_b___c_u_r_s_o_r(3), _d_b___d_b_m(3), _d_b___i_n_t_e_r_n_a_l(3),
       _d_b___l_o_c_k(3), _d_b___l_o_g(3), _d_b___m_p_o_o_l(3), _d_b___o_p_e_n(3), _d_b___t_h_r_e_a_d(3),
       _d_b___t_x_n(3)
