/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
interface nsIPropertyBag2;
interface zapIMediaNode;

[ptr] native zapIMediaNodeRawPtr(zapIMediaNode);

/**
 * \defgroup ZMK_MODULE ZAP Media Kit (ZMK) module
 * \include readme.txt
 */

/**
 * \ingroup ZMK_MODULE
 */
[scriptable, uuid(f79833a3-7344-4925-b7e4-db02591274b7)]
interface zapIMediaGraph : nsISupports
{
  /**
   * Create and add node of 'type' and return its unique id in the
   * graph. The node will instantiated from the contractid
   * "@mozilla.org/zap/medianode;type='type'".  The node
   * implementation does not need to be threadsafe; it will only be
   * accessed on the media thread. Callers from external threads can
   * obtain access to thread-proxied interfaces on the node through
   * zapIMediaGraph::getNode().
   */
  ACString addNode(in ACString type, in nsIPropertyBag2 node_pars);

  /**
   * Insert the given existing node into the graph and return an id
   * identifying it within this graph. Note that the node will be
   * accessed on the media thread, so in general must be threadsafe if
   * constructed/accessed on different threads.
   *
   * 'node' be a pointer to an object implementing zapIMediaNode. It
   * is of type zapIMediaNodeRawPtr in the IDL to prevent it from
   * being auto-proxified.
   */
  [noscript] ACString addExternalNode(in zapIMediaNodeRawPtr node,
                                      in nsIPropertyBag2 node_pars);

  /**
   * Remove the given node.
   *
   * This method will always fail if the media graph is locked. See
   * lock()/unlock()
   */
  void removeNode(in ACString id_or_alias);

  /**
   * Obtain a proxied interface for the given node.
   */
  void getNode(in ACString id_or_alias, in nsIIDRef uuid,
               in boolean synchronous,
               [iid_is(uuid),retval] out nsQIResult result);

  /** Set or move alias to point to id_or_alias.
   *  Alias MUST NOT start with the special letter '#' which is
   *  reserved as a node id prefix.
   */
  void setAlias(in ACString alias, in ACString id_or_alias);

  /**
   * Connect source to sink and return id for the connection.
   *
   * This method will always fail if the media graph is locked. See
   * lock()/unlock().
   */
  ACString connect(in ACString source_node, in nsIPropertyBag2 source_pars,
                   in ACString sink_node, in nsIPropertyBag2 sink_pars);

  /**
   * Break the connection identified by connection_id.
   *
   * This method will always fail if the media graph is locked. See
   * lock()/unlock()
   */
  void disconnect(in ACString connection_id);

  /**
   * Shutdown this mediagraph instance.
   *
   * This method will always fail if the media graph is locked. See
   * lock()/unlock()
   */
  void shutdown();
};

%{ C++
// {CF53EEE9-5A2E-4533-92C4-0E37E50B2E01}
#define ZAP_MEDIAGRAPH_CID \
{ 0xcf53eee9, 0x5a2e, 0x4533, { 0x92, 0xc4, 0x0e, 0x37, 0xe5, 0x0b, 0x2e, 0x01 } }

#define ZAP_MEDIAGRAPH_CONTRACTID "@mozilla.org/zap/mediagraph;1"
%}

