/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "zapIMediaFrame.idl"

/**
 * An RFC3550 RTP media frame.
 */
[scriptable, uuid(ffbf6655-d72d-41a9-b90a-6bebd2dde428)]
interface zapIRTPFrame : zapIMediaFrame
{
  /**
   * V header field (2 bits)
   */
  attribute unsigned short version;

  /**
   * P header field (1 bit)
   */
  attribute boolean padding;

  /**
   * X header field (1 bit)
   */
  attribute boolean extension;

  /**
   * CC header field (4 bits)
   */
  attribute unsigned short CSRCCount;

  /**
   * M header field (1 bit)
   */
  attribute unsigned short marker;

  /**
   * PT header field (7 bits)
   */
  attribute unsigned short payloadType;

  /**
   * Sequence number header field (16 bits)
   */
  attribute unsigned short sequenceNumber;

  /**
   * Timestamp header field (32 bits)
   */
  attribute unsigned long rtpTimestamp;

  /**
   * SSRC header field (32 bits)
   */
  attribute unsigned long SSRC;

  /**
   * CSRC header list (0 to 15 items, 32 bits each)
   * 'index' must be between 0 and CSRCCount-1
   */
  unsigned long getCSRC(in unsigned short index);
  void setCSRC(in unsigned short index, in unsigned long CSRC);

  // XXX add accessor for extension header
  
  /**
   * Packet payload
   */
  attribute ACString payload;
};

