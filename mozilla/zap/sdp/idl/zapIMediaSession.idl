/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISdpSessionDescription;
interface zapIMediaSessionListener;

/**
 * XXX This will change when we support several concurrent media streams
 */
[scriptable, uuid(a0d1b940-e8d9-47e1-a4b2-42987bc4f472)]
interface zapIMediaSession : nsISupports
{
  void init(in ACString originUsername,
            in ACString originAddress,
            in ACString connectionAddress,
            in ACString callAudioIn,
            in ACString callAudioOut,
            in ACString callTEventIn,
            [array, size_is(codec_count)] in string codecs,
            in unsigned long codec_count,
            [array, size_is(stunServer_count)] in string stunServers,
            in unsigned long stunServer_count,
            in zapIMediaSessionListener listener);

  /**
   * Check if the given offer is acceptable to us, i.e. if we can accept
   * any media sessions proposed in the offer.
   *
   * Returns true if the offer is acceptable, false otherwise.
   */
  boolean isOfferAcceptable(in zapISdpSessionDescription offer);
  
  /**
   * Generate an sdp offer.
   *
   * This function must only be called after the media session is
   * fully initialized (i.e. after
   * zapIMediaSessionListener::mediaSessionInitialized() has been
   * called.
   *
   */
  zapISdpSessionDescription generateSDPOffer();

  /**
   * Process other party's sdp offer and generate an answer.
   *
   * This function must only be called after the media session is
   * fully initialized (i.e. after
   * zapIMediaSessionListener::mediaSessionInitialized() has been
   * called.
   *
   * Throws an exception if the offer is not acceptable.
   */
  zapISdpSessionDescription processSDPOffer(in zapISdpSessionDescription offer);

  /**
   * Process other party's sdp answer.
   *
   * This function must only be called after the media session is
   * fully initialized (i.e. after
   * zapIMediaSessionListener::mediaSessionInitialized() has been
   * called.
   *
   * Throws an exception if the answer is not acceptable.
   */
  void processSDPAnswer(in zapISdpSessionDescription answer);

  /**
   * startSession() must only be called after a successful call to
   * processSDPOffer() or processSDPAnswer()
   */
  void startSession();
  
  readonly attribute unsigned short localRTPPort;
  readonly attribute unsigned short localRTCPPort;

  void shutdown();
};
