/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISdpSessionDescription;
interface zapISdpMediaDescription;
interface zapISdpGenericMediaDescription;
interface zapISdpRtpAvpMediaDescription;
interface zapISdpTime;
interface zapISdpRtpAvpMediaFormat;
interface zapISdpConnection;

/**
 * \defgroup SDP_MODULE ZAP SDP module
 *
 * The ZAP SDP module implements SDP parsing and negotiation as
 * described in the following specifications:
 *
 * - <b>RFC2327</b>: SDP: Session Description Protocol
 * - <b>RFC3264</b>: SDP Offer/Answer Model
 *
 * The main entry point into the \ref SDP_MODULE is the zapISdpService
 * interface.
 */

/**
 * \ingroup SDP_MODULE
 * SDP parsing and negotiation service
 *
 * Implemented by Component 5de0fd79-a03e-4640-ab99-186f5c66f5bb
 * ("@mozilla.org/zap/sdpservice;1")
 *
 */
[scriptable, uuid(a4cb8b11-e2d4-4486-b190-4c1f818a0450)]
interface zapISdpService : nsISupports
{
  /**
   * Deserialize an rfc2327 session description into a
   * zapISdpSessionDescription object.
   *
   * RTP/AVP media descriptions will be parsed into
   * zapISdpRtpAvpMediaDescription objects; other media protocol types will be
   * parsed into zapISdpGenericMediaDescription objects.
   *
   * zapISdpRtpAvpMediaFormat objects with static encoding mappings as
   * given in RFC3551 table 4, but without corresponding rtpmap
   * attribute in the source SDP, will have the rtpmap values
   * (encodingName, clockRate, encodingParameters) filled in
   * automatically.
   */
  zapISdpSessionDescription deserializeSessionDescription(in ACString octets);

  /**
   * Create a blank session description object
   */
  zapISdpSessionDescription createSessionDescription();

  /**
   * Create a blank connection field object
   */
  zapISdpConnection createConnection();
  
  /**
   * Create a blank generic media description object
   */
  zapISdpGenericMediaDescription createGenericMediaDescription();

  /**
   * Create a blank RTP/AVP media description object
   */
  zapISdpRtpAvpMediaDescription createRtpAvpMediaDescription();
  
  /**
   * Create a blank time object
   */
  zapISdpTime createTime();

  /**
   * Create a blank RTP/AVP media format object
   */
  zapISdpRtpAvpMediaFormat createRtpAvpMediaFormat();

  /**
   * Formulate an SDP offer compliant to RFC3264.
   *
   * If connectionAddress is empty, no 'c=' field will be added.
   */
  zapISdpSessionDescription formulateSDPOffer(in ACString originUsername,
                                              in ACString originAddress,
                                              in ACString connectionAddress,
                                              [array, size_is(count)] in
                                              zapISdpMediaDescription streams,
                                              in unsigned long count);
};
