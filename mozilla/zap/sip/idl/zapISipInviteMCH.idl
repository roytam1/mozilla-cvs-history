/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISipInviteMC;
interface zapISipDialog;
interface zapISipResponse;
interface zapISipEndpoint;

/**
 * INVITE method client handler
 */
[scriptable, uuid(58b2934f-9b4f-43a3-9233-6856c02e99f1)]
interface zapISipInviteMCH : nsISupports
{
  /**
   * Called by the MC when the invite transaction spawns a new dialog.
   * This might an Early or Confirmed dialog.
   */
  void dialogSpawned(in zapISipInviteMC methodClient, in zapISipDialog dialog);
  /**
   * Called by the MC to inform the MCH that it is calling the given
   * endpoint.  Depending on configuration of the SIP stack and the
   * domain being called, an endpoint might be the other UA, a proxy
   * for its domain, or an outgoing proxy set up for our SIP stack.
   * Several endpoints might be tried by a MC.
   */
  void calling(in zapISipInviteMC methodClient, in zapISipEndpoint endpoint);

  /**
   * Called by the MC to inform the MCH that the last endpoint called
   * has responded to the invite with a failure response.  Depending
   * on the endpoint's response, other endpoints might be tried (in
   * which case the MC will call MCH.calling() ), or alternatively the
   * MC will signal failure to the MCH (by calling MCH.failure() ).
   */
  void failureResponse(in zapISipInviteMC methodClient, in zapISipResponse response);

  /**
   * Called by the MC to inform the MCH that a provisional (1XX) response
   * has been received.
   */
  void provisionalResponse(in zapISipInviteMC methodClient, in zapISipResponse response);

  /**
   * Called by the MC to inform the MCH that a success response has been
   * received.
   */
  void successResponse(in zapISipInviteMC methodClient, in zapISipResponse response);

  /**
   * Called by the MCH to inform the MC that it has terminated with a
   * failure.
   */
  void failure(in zapISipInviteMC methodClient);

  /**
   * Called by the MCH to inform the MC that it has successfully
   * terminated. All early dialogs that haven't transitioned to
   * confirmed dialogs will be terminated prior to this call.
   * The final confirmed dialog (which may or may not be a
   */
  void success(in zapISipInviteMC methodClient, in zapISipDialog dialog);
};
