/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISipAddress;
interface zapISipResolver;
interface zapISipTransactionManager;
interface zapISipTransport;
interface zapISipSyntaxFactory;
interface zapISipRequestHandler;
interface nsIPropertyBag2;
interface zapISipNonInviteRC;
interface zapISipInviteRC;
interface zapISipResponse;
interface zapISipRequest;
interface zapISipMessage;

/**
 * User Agent SIP stack interface (RFC3261).
 *
 * Implemented by component '@mozilla.org/zap/sipstack;1'
 *
 * The User Agent SIP stack is the primary entry-point into the ZAP
 * SIP module. In conjunction with a user application component
 * implementing zapISipRequestHandler, it constitutes the UAC and UAS
 * components described in RFC3261. For most of the time the User
 * Agent stack handles all interfacing to the lower SIP protocol
 * layers.
 */
[scriptable, uuid(bc07e2a1-b759-439f-b8e0-30e8e84c21bf)]
interface zapISipUAStack : nsISupports
{
  /**
   * Initialize this SIP stack with the given request handler and
   * configuration parameters.
   *
   * Valid configuration parameters:
   *   unsigned short "port_base" : port at which to listen for
   *                                tcp and udp SIP traffic. If
   *                                the port is not available,
   *                                the next available port
   *                                greater than port_base will
   *                                be used instead. Default: 5060
   *   ACString "methods"         : comma-separated list of SIP
   *                                methods understood by the UA.
   *                                Will be used to construct
   *                                Allow headers and influences
   *                                error responses returned for
   *                                requests handled by the UAStack.
   *                                Default: "OPTIONS"
   *   ACString "extensions"      : comma-separated list of extensions
   *                                (option tags) understood by the UA.
   *                                Will be used to filter incoming
   *                                requests with Require headers and
   *                                to construct Supported headers.
   *                                Default: ""
   */
  void init(in zapISipRequestHandler handler,
            in nsIPropertyBag2 stackConfiguration);
  
  void shutdown();

  /**
   * Address that will be inserted into From headers.
   * Initialized to sip:thisis@anonymous.invalid.
   */
  attribute zapISipAddress FromAddress;

  /**
   * Remote requests received by the stack will be routed as follows:
   *
   * - Requests with Require headers will be checked against the list
   *   of extensions in the configuration parameters. If there are
   *   unsupported extensions, a 420 (Bad Extension) will be generated.
   *
   * - Requests with a To tag that don't match any ongoing dialog
   *   will be answered with 481 (Call/Transaction Does Not Exist).
   *
   * - If the request is an ACK it will be routed to the pending
   *   INVITE or silently dropped if there is no pending INVITE
   *   waiting for ACK.
   *
   * - If the request is an in-dialog INVITE request and there is a 
   *   pending INVITE on the dialog, a 500 or 491 will be generated
   *   following RFC3261 14.2.
   *
   * - If the request is an in-dialog request and the dialog has
   *   a request handler set, it will get a chance to handle the
   *   request.
   *
   * - If the dialog request handler doesn't handle the request, or
   *   if the request is outside of a dialog it will be passed to the
   *   user application component's request handler set on the UAStack.
   *
   * - If the request still isn't handled it will be handled by the
   *   UAStack itself. The UAStack only handles ACK, BYE, CANCEL,
   *   OPTIONS and REGISTER, and only if they appear in the "methods"
   *   configuration parameter. For other requests a 405 (Method Not
   *   Allowed) or 500 (Server Internal Error) will be returned,
   *   depending on whether or not the request method is listed in
   *   the "methods" configuration parameter.
   *
   *   The default BYE handler returns 200 (OK) for in-dialog requests
   *   matching an active dialog and 481 for BYE requests without a
   *   To tag. (RFC3261 15.1.2). BYE requests will always terminate
   *   their associated dialog after the response has been sent,
   *   independent of whether the response is generated by the default
   *   handler or by the user application component's request handler.
   *
   *   The default OPTIONS handler returns 200 (OK) with Allowed
   *   headers constructed by appendAllowHeaders().
   */
  attribute zapISipRequestHandler requestHandler;

  /**
   * Obtain a request client object for transactionally sending a
   * NON-INVITE request to ToAddress outside of a dialog.
   */
  zapISipNonInviteRC createNonInviteRequestClient(in zapISipAddress ToAddress);

  /**
   * Obtain a request client object for transactionally sending an
   * INVITE request to ToAddress outside of a dialog.
   */
  zapISipInviteRC createInviteRequestClient(in zapISipAddress ToAddress);

  /**
   * Formulate a method-agnostic response with the given status code
   * for the given request.
   *
   * For transactional requests, clients should generally not call
   * this method, but instead call formulateResponse() on the request
   * server (zapISipNonInviteRS or zapISipInviteRS), as this will
   * formulate the response in a way appropriate to the given request.
   *
   * Responses are constructed as follows (following RFC3261):
   *
   * statusCode  : set to the given status code (SC)
   * reasonPhrase: set to the standard RFC3261 english phrase
   *               appropriate for the status code
   * From        : copied from request
   * Call-ID     : copied from request
   * CSeq        : copied from request
   * Via         : all copied from request
   * To          : copied from request
   *
   * If the request does not contain a To tag, SC!=100 and
   * 'toTag'==null, a new tag will be created and set on the To
   * header.
   *
   * If 'toTag'!=null it will be set on the To header. The request
   * must not already contain a tag or an error will be thrown.
   *
   * For SC==405: Allow headers will be added with appendAllowHeaders()
   *
   */
  zapISipResponse formulateResponse(in ACString statusCode,
                                    in zapISipRequest request,
                                    in ACString toTag);

  /**
   * Append Allow headers to the given message, using the method list
   * passed in the configuration parameters to this stack (see
   * init()).
   */
  void appendAllowHeaders(in zapISipMessage message);
  
  readonly attribute zapISipTransactionManager transactionManager;
  readonly attribute zapISipTransport transport;
  readonly attribute zapISipSyntaxFactory syntaxFactory;
  readonly attribute zapISipResolver resolver;

  readonly attribute ACString hostName;
  readonly attribute ACString hostAddress;
  readonly attribute unsigned short listeningPort;
};
