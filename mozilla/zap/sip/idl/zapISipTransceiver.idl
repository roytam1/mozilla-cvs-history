/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISipTransceiverSink;
interface zapISipMessage;
interface zapISipConnection;
interface zapISipListeningSocket;
interface zapISipTrafficMonitor;

/**
 * \ingroup SIP_TRANSPORT_LAYER
 * Part of the SIP transport layer (RFC 3261 section 18).
 *
 * Implemented by component <b>'\@mozilla.org/zap/siptransceiver;1'</b>
 */
[scriptable, uuid(ddd9ae8a-a25d-4e83-b611-9754f2623804)]
interface zapISipTransceiver : nsISupports
{
  void openListeningSocket(in ACString protocol, in unsigned long port);
  void closeListeningSocket(in ACString protocol, in unsigned long port);
  void getListeningSockets(out unsigned long count,
                           [retval, array, size_is(count)] out zapISipListeningSocket sockets);
  
  /**
   * Send 'message' to 'destAddress':'destPort' using 'protocol'.
   *
   * For non connection-oriented protocols (i.e. udp), the message
   * will be sent from the same port as the first udp listening
   * socket. The 'connection' parameter is ignored for udp.
   *
   * For connection-oriented protocols, if 'connection' is non-zero,
   * try to send over that connection first. If 'connection' is not
   * alive any longer, open a new connection. Return the connection
   * over which the message was sent.
   */
  zapISipConnection sendMessage(in zapISipMessage message, in ACString protocol,
                                in ACString destAddress, in ACString destPort,
                                in zapISipConnection connection);
  
  void setTransceiverSink(in zapISipTransceiverSink receiver);

  /**
   * The trafficMonitor receives all raw incoming and outgoing traffic.
   */
  attribute zapISipTrafficMonitor trafficMonitor;
  
  /**
   * Close all open connections and listening sockets.
   */
  void shutdown();
};


/**
 * \ingroup SIP_TRANSPORT_LAYER
 */
[scriptable, uuid(d26136ed-825f-4c8c-8190-886b23528b12)]
interface zapISipTransceiverSink : nsISupports
{
  void handleSipMessage(in zapISipMessage message, in ACString protocol,
                        in ACString sourceAddress, in ACString sourcePort,
                        in zapISipConnection connection);
};


/**
 * \ingroup SIP_TRANSPORT_LAYER
 */
[scriptable, uuid(dd7c4e01-8026-4e15-81f4-9e42853360e8)]
interface zapISipTrafficMonitor : nsISupports
{
  void notifyPacket(in ACString data, in ACString protocol,
                    in ACString localAddress, in ACString localPort,
                    in ACString remoteAddress, in ACString remotePort,
                    in boolean outbound);
};

