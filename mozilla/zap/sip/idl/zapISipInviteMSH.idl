/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISipRequest;
interface zapISipInviteMS;
interface zapISipDialog;

[scriptable, uuid(83cce9d5-a923-4120-99a7-b25010cd2ffd)]
interface zapISipInviteMSH : nsISupports
{
  /**
   * Called by the MS to initialize the MSH. 'request' is the request that
   * spawned this invite server.
   * The MSH should respond by calling sendResponse() with provisional or
   * final responses.
   */
  void invite(in zapISipInviteMS methodServer, in zapISipRequest request);

  /**
   * Called by the MS when the invite transaction spawns a new dialog.
   * This might an Early or Confirmed dialog.
   */
  void dialogSpawned(in zapISipInviteMS methodServer, in zapISipDialog dialog);

  /**
   * Called by the MS to inform the MSH that it has terminated with a failure
   * (after the MSH has sent a failure response using MS.sendResponse()).
   */
  void failure(in zapISipInviteMS methodServer);

  /**
   * Called by the MS to inform the MSH that a dialog has successfully
   * been established (after the MSH has sent a success response using
   * MS.sendResponse()).
   */
  void success(in zapISipInviteMS methodServer, in zapISipDialog dialog);
};
