/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface zapISipMessage;
interface zapISipRequest;
interface zapISipResponse;
interface zapISipURI;
interface zapISipAddress;
interface zapISipHeader;
interface zapISipToHeader;
interface zapISipFromHeader;
interface zapISipRouteHeader;
interface zapISipCallIDHeader;
interface zapISipCSeqHeader;
interface zapISipMaxForwardsHeader;
interface zapISipViaHeader;
interface zapISipContentTypeHeader;
interface zapISipContentLengthHeader;
interface zapISipContactHeader;
interface zapISipRequireHeader;
interface zapISipUnsupportedHeader;
interface zapISipAllowHeader;

/**
 * \defgroup SIP_SYNTAX_LAYER ZAP SIP syntax layer
 * \ingroup SIP_MODULE
 *
 * The main entry point into the ZAP SIP syntax layer is the
 * zapISipSyntaxFactory interface: an API for parsing, serializing and
 * constructing SIP message objects with lazy header parsing.  In
 * addition to the headers defined in RFC3261, the syntax layer can
 * handle generic headers (zapISipUnknownHeader) as well as extension
 * headers from the following specifications:
 *
 * - RFC3327: 'Path' header
 * - RFC3608: 'Service-Route' header
 *
 * 
 */


/**
 * \ingroup SIP_SYNTAX_LAYER
 * An API for constructing syntacically correct SIP messages.
 * (see RFC 3261)
 *
 * Implemented by component <b>'\@mozilla.org/zap/sipsyntaxfactory;1'</b>
 */
[scriptable, uuid(65c2a40b-b9c2-43ed-91f6-03d8276bdd3d)]
interface zapISipSyntaxFactory : nsISupports
{
  /**
   * Deserialize an RFC3261 'request' or 'response' into a zapISipRequest
   * or zapISipResponse object.
   */
  zapISipMessage deserializeMessage(in ACString octets);

  /**
   * Deserialize an RFC3261 'SIP-URI', 'SIPS-URI' or 'absoluteURI'.
   * Currently only 'SIP-URI' and 'SIPS-URI' parsing is
   * implemented. The returned object will implement zapISipSIPURI.
   */
  zapISipURI deserializeURI(in ACString octets);

  /**
   * Deserialize an RFC3261 'name-addr' or 'addr-spec' into a
   * zapISipAddress object.
   */
  zapISipAddress deserializeAddress(in ACString octets);

  /**
   * Deserialize the given headerName and headerValue into
   * a zapISipHeader structure. The returned value can be QIed to
   * one of the zapISipHeader subclasses, as appropriate for the given
   * header name.
   */
  zapISipHeader deserializeHeader(in ACString headerName, in ACString headerValue);
  
  /**
   * Deserialize a comma-separated list of RFC3261 'name-addr' into an
   * array of zapISipAddress objects. The syntax parsed is that of a
   * Route or Record-Route header value (or an empty string):
   * '0*1(route-param *(COMMA route-param))'
   *
   * rr-params will be ignored.
   */
  void deserializeRouteSet(in ACString octets, out unsigned long count,
                           [array, retval, size_is(count)] out
                           zapISipAddress routeset);

  /**
   * Create a blank request object
   */
  zapISipRequest createRequest();

  /**
   * Create a blank response object
   */
  zapISipResponse createResponse();

  /**
   * Create a zapISipAddress from the URI and display name
   */
  zapISipAddress createAddress(in AUTF8String displayName,
                               in zapISipURI uri);
  
  /**
   * Create a generic header. The returned value can be QIed to one of
   * the zapISipHeader subclasses, as appropriate for the given header
   * name.
   */
  zapISipHeader createHeader(in ACString name);
  
  /**
   * Create a To header from the given address. The address object
   * will not be cloned.
   */
  zapISipToHeader createToHeader(in zapISipAddress address);


  /**
   * Create a From header from the given address. The address object
   * will not be cloned.
   */
  zapISipFromHeader createFromHeader(in zapISipAddress address);

  /**
   * Create a Route header from the given address. The address object
   * will not be cloned.
   */
  zapISipRouteHeader createRouteHeader(in zapISipAddress address);
  
  /**
   * Create a Call-ID header from the given callID
   */
  zapISipCallIDHeader createCallIDHeader(in ACString callID);

  /**
   * Create a CSeq header from the given method and sequenceNumber
   */
  zapISipCSeqHeader createCSeqHeader(in ACString method,
                                     in unsigned long sequenceNumber);

  /**
   * Create a Max-Forwards header with default value (70)
   */
  zapISipMaxForwardsHeader createMaxForwardsHeader();

  /**
   * Create a Via header with protocol name and version set to SIP/2.0
   */
  zapISipViaHeader createViaHeader();

  /**
   * Create a Content-Type header from the given type/subtype
   */
  zapISipContentTypeHeader createContentTypeHeader(in ACString contentType,
                                                   in ACString contentSubType);

  /**
   * Create a Content-Length header with the given value
   */
  zapISipContentLengthHeader createContentLengthHeader(in unsigned long contentLength);

  /**
   * Create a Contact Header from the given address. The address
   * object will not be cloned.
   */
  zapISipContactHeader createContactHeader(in zapISipAddress address);

  /**
   * Create a Require header with the given value
   */
  zapISipRequireHeader createRequireHeader(in ACString optionTag);

  /**
   * Create an Unsupported header with the given value
   */
  zapISipRequireHeader createUnsupportedHeader(in ACString optionTag);

  /**
   * Create an Allow header with the given value
   */
  zapISipAllowHeader createAllowHeader(in ACString method);

  /**
   * Get the standard RFC3261 reason phrase for the given status code
   */
  ACString getStandardReasonPhrase(in ACString statusCode);
};
