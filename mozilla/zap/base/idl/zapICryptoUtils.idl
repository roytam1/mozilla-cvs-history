/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * \defgroup BASE_MODULE ZAP Base module
 */

/**
 * \ingroup BASE_MODULE
 */
[scriptable, uuid(c0bde9e0-e77c-4447-b6d9-ab5df7e7e19e)]
interface zapICryptoUtils : nsISupports
{
  /**
   * Compute the 20 byte SHA1 Keyed-hash message authentication code
   * of 'text': SHA1(key XOR opad, SHA1(key XOR ipad, text)). See
   * RFC2104.
   */
  ACString computeSHA1HMAC(in ACString text, in ACString key);

  /**
   * Compute the CRC-32 checksum of 'data'.
   */
  unsigned long computeCRC32(in ACString data);
};

%{ C++

// {2DBFDE61-EA31-413A-8351-0E65363B87CC}
#define ZAP_CRYPTOUTILS_CID                             \
    { 0x2dbfde61, 0xea31, 0x413a, { 0x83, 0x51, 0x0e, 0x65, 0x36, 0x3b, 0x87, 0xcc } }

#define ZAP_CRYPTOUTILS_CONTRACTID "@mozilla.org/zap/cryptoutils;1"
%}
