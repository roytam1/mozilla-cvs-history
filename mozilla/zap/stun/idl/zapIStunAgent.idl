/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005-2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Eilon Yardeni <eyardeni@8x8.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIPropertyBag2;
interface zapIStunTransport;
interface zapIStunMessage2;
interface zapITransportAddress;


[scriptable, uuid(ffa73bdd-ad53-41ff-ad15-c51f360a6b00)]
interface zapIStunIndicationHandler : nsISupports
{                           
  void handleIndication(in zapIStunMessage2     aIndication,
                        in zapITransportAddress aSource);
};

[scriptable, uuid(b0f49baa-95a6-41e4-8f25-abfef093fe26)]
interface zapIStunAgent : nsISupports
{
  /**
   * Valid configuration parameters:
   *
   * - boolean <b>"supportRFC3489"</b>: if 'true' stun will support backward
   *                                            compatibility with rfc3489
   *                                            Default: is false
   * - unsigned short <b>"useFingerPrint"</b> : 0, don't use the fingerprint ext.
   *                                            1, use the fingerprint ext. for
   *                                            outgoing messages but it is not
   *                                            required for incoming messages.
   *                                            2, use the fingerprint ext. both
   *                                            for outgoing and incoming messages
   *                                            Default: 0
   * - unsigned short <b>"maxRetransmissions"</b>  : max udp retransmissions.
   *                                            Default: 7
   * - unsigned short <b>"defaultRTO"</b>  : default RetransmissionTimer (RTO)
   *                                            in milliseconds.
   *                                            Default: 500
   * - boolean <b>"supportRedirection"</b>    : if 'true' the ALTERNATE-SERVER
   *                                            redirection is supported
   *                                            Default: false
   * - unsigned short <b>"authMechanism"</b>  : authentication mechanism to use
   *                                            0 - none, 1-short-term, 
   *                                            2-long-term
   *                                            Default: 0
   * - zapIStunAttributeFactory <b>"attributeFactory"</b>  : factory for supporting
   *                                            attributes other than those 
   *                                            defined in rfc3489bis
   * - nsIAuthPrompt2 <b>"authPrompt"</b>  : interface implementaion for
   *                                            providing authentication information 
   *                                            if applicable
   * - ACString <b>"validMethods"</b>  : string conatining colon spepated valid
   *                                            stun methods. for example "1:3:6"
   * - unsigned long <b>"spaceTransactionsMode"</b> : for client implementation
   *                                            0 - don't space transactions
   *                                            1 - space transactions by rto
   *                                            2 - space transactions by transactionSpaceInterval
   *                                            Default: 1, space by rto
   * - unsigned long <b>"transactionSpaceInterval"</b> : for client implementation
   *                                            number of seconds used for spacing
   *                                            transactions.
   * - unsigned long <b>"rtoCacheTimeout"</b> : for client implementation
   *                                            sets the time in seconds during
   *                                            which the client cache server rto
   *                                            Default: 600 seconds
   * - unsigned long <b>"maxTransactions"</b> : for client implementation
   *                                            sets the max number of outstanding
   *                                            transactions. Default: 10
   * - unsigned long <b>"responseCacheTimeout"</b> : for server implementation
   *                                            interval in seconds for caching
   *                                            successfull last-sent UDP responses.
   *                                            Default: 40 secs
   * - ACString <b>"idempotentMethods"</b> : for server implementation 
   *                                            string containing colon separated
   *                                            idempotent methods
   *                                            Default: "1" (Binding)
   */
  void init(in nsIPropertyBag2 aConfiguration);

  void shutdown();
  
  /**
   * aIndication        - indication message
   * aUsername          - username if authentication mechanism is used
   * aDestination       - destination transport address
   */
  void sendIndication(in zapIStunMessage2      aIndication,
                      in AUTF8String           aUsername,
                      in zapITransportAddress  aDestination);
                    
  attribute zapIStunTransport transport;
  
  attribute zapIStunIndicationHandler indicationHandler;
};
