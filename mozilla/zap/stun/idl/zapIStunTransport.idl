/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005-2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Eilon Yardeni <eyardeni@8x8.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIPropertyBag2;
interface zapIStunMessage2;
interface zapIStunTransportSink;
interface zapIStunTransportListener;
interface zapITransportAddress;

[scriptable, uuid(4b4cac21-ec15-4d3b-a599-e5e05424ae2f)]
interface zapIStunTransport : nsISupports
{
  /**
   * initialize the transport layer
   *
   * Valid configuration parameters:
   *
   * - boolean <b>"supportRFC3489"</b>: if 'true' stun will support backward
   *                                            compatibility with rfc3489
   *                                            Default: is false
   * - unsigned short <b>"useFingerPrint"</b> : 0, don't use the fingerprint ext.
   *                                            1, use the fingerprint ext. for
   *                                            outgoing messages but it is not
   *                                            required for incoming messages.
   *                                            2, use the fingerprint ext. both
   *                                            for outgoing and incoming messages
   *                                            Default: 0
   * - zapIStunAttributeFactory <b>"attributeFactory"</b>  : factory for supporting
   *                                            attributes other than those 
   *                                            defined in rfc3489bis
   * - ACString <b>"validMethods"</b>  : string conatining colon spepated valid
   *                                            stun methods. for example "1:3:6"
   */
  void init(in nsIPropertyBag2 aConfiguration);

  /**
   * send a stun message
   */
  void sendMessage(in zapIStunMessage2 aMessage, in zapITransportAddress aDest);

  /**
   * handle an incoming packet
   * returns false if failed to process the packet (i.e. not a stun packet)
   * if stun is being multiplexed with another protocol, a failure
   * may indicate that this is packet should be processed by the other protocol
   *
   * aData            - packet data
   * aSourceTransport - transport protocol
   * aSourceAddress   - source host address
   * aSourcePort      - destination port
   */ 
  boolean handlePacket(in ACString        aData,
                       in ACString        aSourceTransport,
                       in ACString        aSourceAddress,
                       in unsigned short  aSourcePort);
                                                            
  attribute zapIStunTransportSink transportSink;

  attribute zapIStunTransportListener clientListener;

  attribute zapIStunTransportListener serverListener;
};

[scriptable, uuid(81af74d5-57ff-4ada-b287-dd04665ebb94)]
interface zapIStunTransportSink : nsISupports
{
  void sendPacket(in ACString        aData,
                  in ACString        aDestTransport,
                  in ACString        aDestAddress,
                  in unsigned short  aDestPort);
};

[scriptable, uuid(6af9e394-638a-483e-8879-49c43af2ea21)]
interface zapIStunTransportListener : nsISupports
{
  boolean handleMessage(in zapIStunMessage2     aMessage,
                        in zapITransportAddress aSource);
};
