/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla SIP client project.
 *
 * The Initial Developer of the Original Code is 8x8 Inc.
 * Portions created by the Initial Developer are Copyright (C) 2005-2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Eilon Yardeni <eyardeni@8x8.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface zapIStunAttribute;
interface zapIStunAttributeFactory;

/**
 * \ingroup STUN_MODULE
 */
[scriptable, uuid(e5846e7d-9ac2-4ca0-a9c8-77426f95c792)]
interface zapIStunMessage2 : nsISupports
{
  /**
   * Constants for the messageClass attribute
   */
  const unsigned short CLASS_REQUEST            = 0x0000;
  const unsigned short CLASS_INDICATION         = 0x0010;
  const unsigned short CLASS_SUCCESS_RESPONSE   = 0x0100;
  const unsigned short CLASS_ERROR_RESPONSE     = 0x0110;

  /**
   * Constants for the messageMethod attribute
   */
  /* methods defined by rfc3489bis: */
  const unsigned short BINDING                  = 0x001;
  /* methods defined by draft-ietf-behave-turn: */
  const unsigned short ALLOCATE                 = 0x003;
  const unsigned short REFRESH                  = 0x004;
  const unsigned short SEND                     = 0x006;
  const unsigned short DATA                     = 0x007;
  const unsigned short CHANNEL_BIND             = 0x009;
  
   
  const unsigned long MAGIC_COOKIE = 0x2112A442;

  attribute unsigned short messageClass;

  attribute unsigned short messageMethod;

  readonly attribute unsigned short messageLength;

  attribute unsigned long magicCookie;

  attribute ACString transactionID;

  /**
   * Randomly generate the 12 octet transaction ID
   */
  void initTransactionID();

  /**
   * Serialize this message to a STUN packet
   */
  ACString serialize();

  /**
   * (Re-)Initialize this STUN message object with the given packet data.
   * aAttributeFactory can be provided to support attributes
   * other than those specified in rfc3489bis
   */
  void deserialize(in ACString aPacket,
                   in zapIStunAttributeFactory aAttributeFactory);

  /**
   * An array of unknown comprehension-required attributes
   *
   * This array is created with any unknown comprehension-required
   * attributes that are found when deserializing a packet
   */   
  void getUnknownCRAttributes(out unsigned long aCount,
                              [retval, array, size_is(aCount)] out unsigned short aAttributes);

  zapIStunAttribute getAttribute(in unsigned short aType);

  void removeAttribute(in unsigned short aType);

  void appendAttribute(in zapIStunAttribute aAttribute);
  
  nsISimpleEnumerator getAttributeEnumerator();
};
