<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Mozilla SIP client project.
   -
   - The Initial Developer of the Original Code is 8x8 Inc.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Alex Fritze <alex@croczilla.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either of the GNU General Public License Version 2 or later (the "GPL"),
   - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://zap/skin/zap.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://zap/locale/zap.dtd">

<window id="zap_debug_shell"
        class="zap_form"
        width="640" height="480" screenX="20" screenY="20" 
        persist="width height screenX screenY sizemode"
        title = "zap! debug shell"
        onload="windowInit();"
        onkeypress="keyCapture(event);"
        xmlns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Scripts -->
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/>
  <script type="text/javascript" src="chrome://zap/content/chromeUtils.js"/>

  <script type="application/x-javascript">
  <![CDATA[
  Components.utils.importModule("gre:ClassUtils.js");
  Components.utils.importModule("gre:SipUtils.js");

  var wOutput;
  var wOutputStream;
  var wInput;
  var wPipeInput;
  var wJSSh;

  var OutputStream = makeClass("OutputStream", SupportsImpl);
  OutputStream.addInterfaces(Components.interfaces.nsIOutputStream);
  OutputStream.fun(
    function write(buf, count) {
      var str = buf;
      str = str.replace(/&/g, "&amp;");
      str = str.replace(/</g, "&lt;");
      str = str.replace(/\n/g, "<br/>"); 

      wOutput.write(str);
      wOutput.defaultView.scrollTo(0, wOutput.defaultView.scrollMaxY);
      return count;
    });

  function windowInit() {
    wOutput = document.getElementById("output").contentDocument;
    wOutput.open("text/html");
    wOutputStream = getProxyOnSIPThread(OutputStream.instantiate(), Components.interfaces.nsIOutputStream);
    wInput = document.getElementById("input");
    wInput.focus();

    var pipe = Components.classes["@mozilla.org/pipe;1"].createInstance(Components.interfaces.nsIPipe);
    pipe.init(false, true, 0, 0, null);
    wPipeInput = pipe.outputStream;

    wJSSh = Components.classes["@mozilla.org/jssh-server;1"].createInstance(Components.interfaces.nsIJSShServer);
    wJSSh.runShell(pipe.inputStream, wOutputStream, "chrome://zap/content/debug-shell-init.js", false);
  }

  function executeInputBuffer() {
    wPipeInput.write(wInput.value+"\n", wInput.value.length+1);
    wInput.value = "";
    wInput.focus();
  }

  function clearOutput() {
    wOutput.close();
    wOutput.open("text/html");
    wOutput.writeln("");
  }

  function keyCapture(e) {
    //dump(e.keyCode+" --- "+e.charCode+"\n");
    if (e.shiftKey && e.keyCode == 13) { // shift-return
      e.preventDefault();
      executeInputBuffer();
    }
  }

  ]]>
  </script>

  <label class="zap-form-title" crop="end" id="title" value="zap debug shell"/>
  <iframe id="output" flex="1" />
    <hbox>
      <textbox style="border:1px solid grey;margin:2px;" 
               id="input"
               flex="1"
               multiline="true"/>
      <button label="Exec" oncommand="executeInputBuffer()"/>
    </hbox>
    <hbox>
      <spacer flex="1"/>
      <button label="Clear" oncommand="clearOutput()"/>
      <button label="Print..." oncommand="wOutput.defaultView.print()"/>
    </hbox>
</window>
