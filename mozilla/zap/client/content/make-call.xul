<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Mozilla SIP client project.
   -
   - The Initial Developer of the Original Code is 8x8 Inc.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Alex Fritze <alex@croczilla.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either of the GNU General Public License Version 2 or later (the "GPL"),
   - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://zap/skin/zap.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://zap/locale/zap.dtd">

<page id="zap_make_call"
      class="zap-form"
      xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:html="http://www.w3.org/1999/xhtml"
      onload="initPage()">

  <!-- Scripts -->
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/>

  <script type="application/x-javascript">
  <![CDATA[
    var wRemoteAddress;

    function initPage() {
      // try to parse the url_field into a sip address:
      try {
        var address = parent.wURLField.value;
        if (!/sip:/.test(address))
          address = "sip:"+address;
        wRemoteAddress = parent.wSipStack.syntaxFactory.deserializeAddress(address);
      } catch(e) {
        dump("initialization failure make-call.xul:"+address+"\n");
        // by default the deck displays the error page, 
        // so let's just fall through:
        return;
      }
      var uri = wRemoteAddress.uri.QueryInterface(Components.interfaces.zapISipSIPURI);
      var method = uri.getURIParameter("method");
      if (!method) {
        method = "INVITE";
      }
      // XXX We process only INVITE for now but in the future MESSAGE can be processed...
      if (method != "INVITE") {
        return;
      }
      if (uri.hasHeader("Subject")) {
        document.getElementById("urn:mozilla:zap:subject").value = uri.getHeader("Subject");
      }
      uri.getHeaderNames({}).forEach(function(name) {
                                       uri.removeHeader(name);
                                     });
      uri.removeURIParameter("method");
      
      dump("initialized make-call.xul:"+wRemoteAddress.serialize()+"\n");

      // we have a valid SIP address. display the proper call chrome:
      document.getElementById("content_deck").selectedIndex = 1;

      // fill in remote party:
      document.getElementById("urn:mozilla:zap:remote").value = wRemoteAddress.serialize();

      // focus call button, so that the user just needs to press enter:
      document.getElementById("call_button").focus();

      // install RadioStateChange listener for updating the offer ui
      // dynamically:
      document.getElementById("exchange_type").addEventListener(
        'RadioStateChange', 
        function (ev) {
          var hide = (ev.originalTarget.value == "offerIn200");
          document.getElementById("media_offer").setAttribute("hidden", hide);

        },
        true);

    }    

    function call() {
      var offerIn200 = document.getElementById("offerIn200").selected;
      var codecs;
      if (offerIn200)
        codecs = ["PCMU", "PCMA", "speex", "telephone-event"];
      else {
        codecs = [];
        for (var c in {"PCMU":1, "PCMA":1, "speex":1, "telephone-event":1}) {
          if (document.getElementById(c).checked)
            codecs.push(c);
        }
      }
      var oc = parent.OutboundCall.instantiate();
      oc.createFromDocument(document);
      // start the ball rolling:
      oc.makeCall(wRemoteAddress, parent.wCurrentIdentity, codecs, offerIn200);
      parent.loadPage("chrome://zap/content/call.xul?resource="+escape(oc.resource.Value));
    }
  ]]>
  </script>

  <vbox class="zap-form-body">

    <hbox class="zap-form-title-box">
      <label value="&makeCall.title;"/>
    </hbox>
    <deck id="content_deck">
      <vbox>
        <description>&makeCall.description;</description>
      </vbox>

      <vbox>
        <label value="&remoteParty.label;"/>
        <textbox id="urn:mozilla:zap:remote" readonly="true"/>
        <label value="&subject.label;"/>
        <textbox id="urn:mozilla:zap:subject"/>
        <cgroup title="&session.title;" closed="false" persist="closed">
          <radiogroup id="exchange_type">
            <radio id="offerIn200" label="&emptyOffer.label;" value="offerIn200"/>
            <radio label="&offer.label;" selected="true" value="offerInInvite"/>
          </radiogroup>
          <groupbox id="media_offer" flex="1" disabled="true">
            <caption><label value="&mediaOffer.label;"/></caption>
            <label value="&audio.label;" style="font-weight:bold;"/>
            <checkbox label="&pcmuCodec.label;" id="PCMU" checked="true"/>
            <checkbox label="&pcmaCodec.label;" id="PCMA" checked="true"/>
            <checkbox label="&speexCodec.label;" id="speex" checked="true"/>
            <checkbox label="&rfc2833Codec.label;" id="telephone-event" checked="true"/>
          </groupbox>
        </cgroup>


        <hbox>
          <spacer flex="1"/>
          <button id="call_button" label="&call.button;" oncommand="call()" default="true"/>
        </hbox>
      </vbox>

    </deck>
  </vbox>
</page>
