<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the Mozilla SIP client project.
   -
   - The Initial Developer of the Original Code is 8x8 Inc.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Alex Fritze <alex@croczilla.com> (original author)
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either of the GNU General Public License Version 2 or later (the "GPL"),
   - or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<?xml-stylesheet href="chrome://zap/skin/zap.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://zap/locale/zap.dtd">

<page id="zap_generic_request"
      class="zap-form"
      xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:html="http://www.w3.org/1999/xhtml"
      onload="initPage()"
      onunload="cleanup()">

  <!-- Scripts -->
  <script type="application/x-javascript" src="chrome://global/content/globalOverlay.js"/>

  <script type="application/x-javascript">
  <![CDATA[
    var wRC;

    function initPage() {
    }    

    function generateTemplate() {
      // try to parse address:
      var address;
      try {
        address = document.getElementById("remote").value;
        address = parent.wSipStack.syntaxFactory.deserializeAddress(address);
      } catch(e) {
        dump("Invalid address: "+address+"\n");
        return;
      }
      
      var route = parent.wCurrentIdentity.getRoutingInfo() ? parent.wCurrentIdentity.getRoutingInfo().routeset : [];

      wRC = parent.wSipStack.createNonInviteRequestClient(address, 
                                                          parent.wCurrentIdentity.getFromAddress(),
                                                          document.getElementById("method").value,
                                                          route,
                                                          route.length,
                                                          parent.wCurrentIdentity.getRCFlags());
      document.getElementById("request").value = wRC.request.serialize();
    }

    function sendRequest() {
      if (!wRC) return;
      var listener = {
        triedCredentials : false,
        notifyResponseReceived : function(rc, dialog, response, flow) {
          if (document) {
            document.getElementById("response").value = response.serialize();
            // update the request field, so that we get the updated CSeq, etc:
            document.getElementById("request").value = rc.request.serialize();
          }
          if (!this.triedCredentials &&
              (response.statusCode == "401" ||
               response.statusCode == "407")) {
            // retry asynchronously with credentials:
            var handler = this;
            parent.callAsync(function () {
                        if (parent.wSipStack.authentication.
                            addAuthorizationHeaders(parent.wCurrentIdentity,
                                                    response,
                                                    rc.request)) {
                          //this.triedCredentials = true;
                          rc.sendRequest(handler);
                        }
                      });
          }
        }
      };
      var requestTxt = document.getElementById("request").value;
      requestTxt = requestTxt.replace(/\r/g, "");
      requestTxt = requestTxt.replace(/\n/g, "\r\n");

      wRC.request = parent.wSipStack.syntaxFactory.deserializeMessage(requestTxt);
      wRC.sendRequest(listener);
    }

    function cleanup() {
      if (wRC) {
        wRC = null;
      }
    }

  ]]>
  </script>


  <vbox class="zap-form-body">
    <label class="zap-form-title" value="Send Generic Non-Invite Request"/>
    <label value="Remote party:"/>
    <textbox id="remote" value="sip:613@fwd.pulver.com"/>
    <label value="Method:"/>
    <textbox id="method" value="OPTIONS"/>
    <hbox>
      <spacer flex="1"/>
      <button label="Generate template" oncommand="generateTemplate()"/>
      <button label="Send request" oncommand="sendRequest()"/>
    </hbox>
    <label value="Request:"/>
    <textbox id="request"
             multiline="true" rows="8" /> 
    <label value="Response:"/>
    <textbox id="response" class="ro_modulefield" 
             multiline="true" rows="8" /> 
  </vbox>
</page>