/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsIControllerCommand.idl"
#include "nsICommandParams.idl"

/**
 * nsIControllerCommandManager
 * 
 * An interface via which a controller can maintain a series of commands,
 * and efficiently dispatch commands to their respective handlers.
 *
 * Controllers that use an nsIControllerCommandManager should support
 * nsIInterfaceRequestor, and be able to return an interface to their
 * controller command manager via getInterface().
 * 
 */

[scriptable, uuid(65a2f51a-1dd2-11b2-889f-d886b255ffe7)]
interface nsIControllerCommandManager : nsISupports
{
  /**
   * Register and unregister commands with the command manager.
   *
   * @param aCommandName  the name of the command under which to register or
   *                      unregister the given command handler.
   *
   * @param aCommand      the handler for this command.
   */
  void    registerCommand(in string aCommandName, in nsIControllerCommand aCommand);
  void    unregisterCommand(in string aCommandName, in nsIControllerCommand aCommand);
  
  /**
   * Find the command handler which has been registered to handle the named command.
   *
   * @param aCommandName  the name of the command to find the handler for.
   */
  nsIControllerCommand findCommandHandler(in string aCommandName);

  /**
   * Get whether the named command is enabled.
   *
   * @param aCommandName    the name of the command to test
   * @param aCommandRefCon  the command context data
   */
	boolean isCommandEnabled(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Tell the command to udpate its state (if it is a state updating command)
   *
   * @param aCommandName    the name of the command to update
   * @param aCommandRefCon  the command context data
   */
	void  updateCommandState(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Get whether the named command is supported.
   *
   * @param aCommandName    the name of the command to test
   * @param aCommandRefCon  the command context data
   */
	boolean supportsCommand(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Execute the named command.
   *
   * @param aCommandName    the name of the command to execute
   * @param aCommandRefCon  the command context data
   */
	void    doCommand(in string aCommandName, in nsISupports aCommandRefCon);

	void    doCommandParams(in string aCommandName, in nsICommandParams aParam, in nsISupports aCommandRefCon);

	void    getCommandState(in string aCommandName, in nsICommandParams aParam, in nsISupports aCommandRefCon);
};


// {f424fd81-cca6-11d5-a73c-dc628c6e85bc}
%{C++
#define NS_CONTROLLERCOMMANDMANAGER_CID \
{ 0xf424fd81, 0xcca6, 0x11d5, { 0xa7, 0x3c, 0xdc, 0x62, 0x8c, 0x6e, 0x85, 0xbc } }

#define NS_CONTROLLERCOMMANDMANAGER_CONTRACTID \
 "@mozilla.org/embedcomp/controller-command-manager;1"
%}
