/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

/* This is the interface to the embeddable prompt service; the service
   that implements nsIPrompt. Its interface is designed to be just
   nsIPrompt, each method modified to take a parent window parameter.
   See nsIPrompt for all documentation and ancillary documentation.

   One note: in all cases, the parent window parameter can be null.
   However, these windows are all intended to have parents. So when
   no parent is specified, the implementation should try hard to find
   a suitable foster parent. */

#include "nsISupports.idl"

interface nsIDOMWindow;

[scriptable, uuid(1630C61A-325E-49ca-8759-A31B16C47AA5)]
interface nsIPromptService : nsISupports
{
  /**
   * Puts up an alert dialog with an OK button.
   */
  void alert(in nsIDOMWindow parent,
              in wstring dialogTitle,
              in wstring text);

  /**
   * Puts up an alert dialog with an OK button and
   * a message with a checkbox.
   */
  void alertCheck(in nsIDOMWindow parent,
                  in wstring dialogTitle,
                  in wstring text,
                  in wstring checkMsg,
                  inout boolean checkValue);

  /**
   * Puts up a dialog with OK and Cancel buttons.
   * @return true for OK, false for Cancel
   */
  boolean confirm(in nsIDOMWindow parent,
                  in wstring dialogTitle,
                  in wstring text);

  /**
   * Puts up a dialog with OK and Cancel buttons, and
   * a message with a single checkbox.
   * @return true for OK, false for Cancel
   */
  boolean confirmCheck(in nsIDOMWindow parent,
                        in wstring dialogTitle,
                        in wstring text,
                        in wstring checkMsg,
                        inout boolean checkValue);

  /**
   * Puts up a dialog with up to 3 buttons and an optional checkbox.
   *
   * @param dialogTitle
   * @param text
   * @param buttonFlags       Title flags for each button.
   * @param button0Title      Used when button 0 uses TITLE_IS_STRING
   * @param button1Title      Used when button 1 uses TITLE_IS_STRING
   * @param button2Title      Used when button 2 uses TITLE_IS_STRING
   * @param checkMsg          null if no checkbox
   * @param checkValue    
   * @param buttonPressed
   *
   * Buttons are numbered 0 - 2. The implementation can decide whether
   * the sequence goes from right to left or left to right.
   * Button 0 will be the default button.
   *
   * A button may use a predefined title, specified by one of the
   * constants below. Each title constant can be multiplied by a
   * position constant to assign the title to a particular button.
   * If BUTTON_TITLE_IS_STRING is used for a button, the string
   * parameter for that button will be used. If the value for a button
   * position is zero, the button will not be shown
   *
   */
   
  const unsigned long BUTTON_POS_0              = 1;
  const unsigned long BUTTON_POS_1              = 1 << 8;
  const unsigned long BUTTON_POS_2              = 1 << 16;
     
  const unsigned long BUTTON_TITLE_OK            = 1;
  const unsigned long BUTTON_TITLE_CANCEL        = 2;
  const unsigned long BUTTON_TITLE_YES           = 3;
  const unsigned long BUTTON_TITLE_NO            = 4;
  const unsigned long BUTTON_TITLE_SAVE          = 5;
  const unsigned long BUTTON_TITLE_DONT_SAVE     = 6;
  const unsigned long BUTTON_TITLE_REVERT        = 7;

  const unsigned long BUTTON_TITLE_IS_STRING     = 127;
   
  const unsigned long STD_OK_CANCEL_BUTTONS      = (BUTTON_TITLE_OK * BUTTON_POS_0) +
                                                    (BUTTON_TITLE_CANCEL * BUTTON_POS_1);

  void confirmEx(in nsIDOMWindow parent,
                 in wstring dialogTitle,
                 in wstring text,
                 in unsigned long buttonFlags,
                 in wstring button0Title,
                 in wstring button1Title,
                 in wstring button2Title,
                 in wstring checkMsg,
                 inout boolean checkValue,
                 out PRInt32 buttonPressed);

  /**
   * Puts up a dialog with an edit field and an optional checkbox.
   *
   * @param dialogTitle
   * @param text
   * @param value         in: Pre-fills the dialog field if non-null
   *                      out: If result is true, a newly allocated
   *                      string. If result is false, in string is not
   *                      touched.
   * @param checkMsg      if null, check box will not be shown
   * @param checkValue       
   * @return true for OK, false for Cancel
   */                        
  boolean prompt(in nsIDOMWindow parent,
                 in wstring dialogTitle,
                 in wstring text,
                 inout wstring value, 
                 in wstring checkMsg,
                 inout boolean checkValue);

  /**
   * Puts up a dialog with an edit field, a password field, and an optional checkbox.
   *
   * @param dialogTitle
   * @param text
   * @param username      in: Pre-fills the dialog field if non-null
   *                      out: If result is true, a newly allocated
   *                      string. If result is false, in string is not
   *                      touched.
   * @param password      in: Pre-fills the dialog field if non-null
   *                      out: If result is true, a newly allocated
   *                      string. If result is false, in string is not
   *                      touched.
   * @param checkMsg      if null, check box will not be shown
   * @param checkValue   
   * @return true for OK, false for Cancel
   */                        
  boolean promptUsernameAndPassword(in nsIDOMWindow parent,
                                    in wstring dialogTitle,
                                    in wstring text,
                                    inout wstring username,
                                    inout wstring password,
                                    in wstring checkMsg,
                                    inout boolean checkValue);

  /**
   * Puts up a dialog with a password field and an optional checkbox.
   *
   * @param dialogTitle
   * @param text
   * @param password      in: Pre-fills the dialog field if non-null
   *                      out: If result is true, a newly allocated
   *                      string. If result is false, in string is not
   *                      touched.
   * @param checkMsg      if null, check box will not be shown
   * @param checkValue    
   * @return true for OK, false for Cancel
   */                        
  boolean promptPassword(in nsIDOMWindow parent,
                         in wstring dialogTitle,
                         in wstring text,
                         inout wstring password,
                         in wstring checkMsg,
                         inout boolean checkValue);

  /**
   * Puts up a dialog box which has a list box of strings
   */                                                 
  boolean select(in nsIDOMWindow parent,
                  in wstring dialogTitle,
                  in wstring text,
                  in  PRUint32 count,
                  [array, size_is(count)] in wstring selectList,
                  out long outSelection);
};

%{C++
// {1630C61A-325E-49ca-8759-A31B16C47AA5}
#define NS_PROMPTSERVICE_IID \
 {0x1630C61A, 0x325E, 0x49ca, {0x87, 0x59, 0xA3, 0x1B, 0x16, 0xC4, 0x7A, 0xA5}}
%}

