/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 * 
 * Contributor(s): 
 *   Stuart Parmenter <pavlov@netscape.com>
 *   Rod Spears <rods@netscape.com>
 *   Kevin McCluskey <kmcclusk@netscape.com>
 *   Mike Pinkerton <pinkerton@netscape.com>
 *   ... and other people
 */

#include "nsISupports.idl"
#include "nsIWidget.idl"

%{ C++
#include "nsRect.h"
#include "nsIMouseListener.h"
#include "nsIMenuListener.h"
#include "nsIImage.h"

#include "prthread.h"
#include "nsGUIEvent.h"

// forward declarations
struct  nsRect;
class   nsIMenuBar;
%}

[ptr] native nsIMenuBar(nsIMenuBar);

typedef long nsBorderStyle;
typedef long nsWindowType;


[uuid(491359ea-1dd2-11b2-af7c-bb0346efd9b6)]
interface nsIWindow : nsIWidget
{
  /*
   * types of windows
   */
  const long eWindowType_toplevel = 0;
  const long eWindowType_dialog = 1;
  const long eWindowType_popup = 2;
  const long eWindowType_child = 3; 

  
  /*
   * Border styles
   */
  // no border, titlebar, etc.. opposite of all
  const long eBorderStyle_none     = 0;

  // all window decorations
  const long eBorderStyle_all      = 1 << 0;

  // enables the border on the window.  these are only for decoration and are not resize hadles
  const long eBorderStyle_border   = 1 << 1;

  // enables the resize handles for the window.  if this is set, border is implied to also be set
  const long eBorderStyle_resizeh  = 1 << 2;

  // enables the titlebar for the window
  const long eBorderStyle_title    = 1 << 3;

  // enables the window menu button on the title bar.  this being on should force the title bar to display
  const long eBorderStyle_menu     = 1 << 4;

  // enables the minimize button so the user can minimize the window.
  //   turned off for tranient windows since they can not be minimized seperate from their parent
  const long eBorderStyle_minimize = 1 << 5;

  // enables the maxmize button so the user can maximize the window
  const long eBorderStyle_maximize = 1 << 6;

  // show the close button
  const long eBorderStyle_close    = 1 << 7;

  // whatever the OS wants... i.e. don't do anything
  const long eBorderStyle_default  = -1;


  /**
   * initialize a window
   *
   * The widget represents a window that can be drawn into. It also is the 
   * base class for user-interface widgets such as buttons and text boxes.
   *
   * All the arguments can be NULL in which case a top level window
   * with size 0 is created. The event callback function has to be
   * provided only if the caller wants to deal with the events this
   * widget receives.  The event callback is basically a preprocess
   * hook called synchronously. The return value determines whether
   * the event goes to the default window procedure or it is hidden
   * to the os. The assumption is that if the event handler returns
   * false the widget does not see the event. The widget should not 
   * automatically clear the window to the background color. The 
   * calling code must handle paint messages and clear the background 
   * itself. 
   *
   * @param     aWindowType    type of window to create
   * @param     aBorderStyle   border style of the window to create
   *
   */
  void initWindowStyle(in nsWindowType     aWindowType,
                       in nsBorderStyle    aBorderStyle);

  /**
   * Make the window modal 
   *
   * 
   *
   */
  void setModal(in boolean modal);

  /**
   * Gets the width and height of the borders
   * @param aWidth the width of the border
   * @param aHeight the height of the border
   *
   */
  void getBorderSize(out PRInt32 aWidth, out PRInt32 aHeight);

  /**
   * Scroll this widget.
   *
   * @param aDx amount to scroll along the x-axis
   * @param aDy amount to scroll along the y-axis.
   * @param aClipRect clipping rectangle to limit the scroll to.
   *
   */
  void scroll(in PRInt32 aDx, in PRInt32 aDy, in nsRect aClipRect);

  /**
   * Scroll an area of this widget.
   *
   * @param aRect source rectangle to scroll in the widget
   * @param aDx x offset from the source
   * @param aDy y offset from the source
   *
   */
  void scrollRect(in nsRectRef aSrcRect, in PRInt32 aDx, in PRInt32 aDy);

  /**
   * Set the widget's MenuBar.
   * Must be called after Create.
   *
   * @param aMenuBar the menubar
   */
  void setMenuBar(in nsIMenuBar aMenuBar);

  /**
   * Set the widget's MenuBar's visibility
   *
   * @param aShow PR_TRUE to show, PR_FALSE to hide
   */
  void showMenuBar(in PRBool aShow);

  /**
   * When adjustments are to made to a whole set of child widgets, call this
   * before resizing/positioning the child windows to minimize repaints. Must
   * be followed by EndResizingChildren() after child windows have been
   * adjusted.
   *
   */
  void beginResizingChildren();

  /**
   * Call this when finished adjusting child windows. Must be preceded by
   * BeginResizingChildren().
   *
   */
  void endResizingChildren();

  /* ATTRIBUTES */


  /**
   * Window type
   */
  readonly attribute nsWindowType windowType;

  /**
   * Border style
   */
  readonly attribute nsBorderStyle borderStyle;

};
