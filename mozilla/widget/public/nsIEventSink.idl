/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 * 
 * Contributor(s): 
 */


#include "nsISupports.idl"

/* THIS IS A PUBLIC EMBEDDING API */

/**
 * The nsIEventSink is implemented internally by Gecko as the conduit
 * through which native events travel into Gecko. You obtain an
 * event sink by QI'ing the top-level nsIWidget, usually a window.
 *
 * @status UNDER_REVIEW
 */
 
[uuid(c0d3a7c8-1dd1-11b2-8903-adcd22d004ab)]
interface nsIEventSink : nsISupports
{
  /**
   * Entry point for native events into Gecko.
   *
   * @return <code>PR_TRUE</code> if event was handled
   *         <code>PR_FALSE</code> if not handled
   *
   * On Mac, <code>anEvent</code> is a native <code>EventRecord*</code>.
   */   
  boolean dispatchEvent ( in voidPtr anEvent ) ;
  
  /**
   * Alerts gecko of a drag event. 
   *
   * @param aMessage the message parameter for a Gecko NS_DRAGDROP_EVENT (See nsGUIEvent.h for list).
   * @param aMouseGlobalX x coordinate of mouse, in global coordinates
   * @param aMouseGlobalY y coordinate of mouse, in global coordinates
   * @param aKeyModifiers a native bitfield of which modifier keys are currently pressed
   *
   * @return <code>PR_TRUE</code> if event was handled
   *         <code>PR_FALSE</code> if not handled
   */
  boolean dragEvent ( in unsigned long aMessage, in short aMouseGlobalX, in short aMouseGlobalY,
                       in unsigned short aKeyModifiers ) ;
  
  /**
   * Perform any idle processing (handle timers, set the cursor, etc)
   */
  void Idle ( ) ;

};