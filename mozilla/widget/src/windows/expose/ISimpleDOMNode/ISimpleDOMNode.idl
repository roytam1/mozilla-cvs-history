/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Author: Aaron Leventhal (aaronl@netscape.com)
 */

cpp_quote("///////////////////////////////////////////////////////////////////////////////////////////////////////")
cpp_quote("//")
cpp_quote("// ISimpleDOMNode.h ")
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("//")
cpp_quote("// get_nodeInfo(")
cpp_quote("//  /* [out] */ BSTR  *nodeName,   // For elements, this is the tag name")
cpp_quote("//  /* [out] */ short  *nameSpaceID,")
cpp_quote("//  /* [out] */ unsigned short  *nodeType,")
cpp_quote("//  /* [out] */ BSTR  *nodeValue, ")
cpp_quote("//  /* [out] */ unsigned int  *numChildren); ") 
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("// Get the basic information about a node.")
cpp_quote("// The namespace ID can be mapped to an URI using nsISimpleDOMDocument::get_nameSpaceURIForID()")
cpp_quote("//")
cpp_quote("// get_attributes(")
cpp_quote("//  /* [in]  */ unsigned short maxAttribs,")
cpp_quote("//  /* [out] */ unsigned short  *numAttribs,")
cpp_quote("//  /* [out] */ BSTR  *attribNames,")
cpp_quote("//  /* [out] */ short  *nameSpaceID,")
cpp_quote("//  /* [out] */ BSTR  *attribValues);")
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("// Returns 3 arrays - the attribute names and values, and a namespace ID for each")
cpp_quote("// If the namespace ID is 0, it's the same namespace as the node's namespace")
cpp_quote("//")
cpp_quote("// computedStyle(  ")
cpp_quote("//  /* [in]  */ unsigned short maxStyleProperties,")
cpp_quote("//  /* [out] */ unsigned short *numStyleProperties, ")
cpp_quote("//  /* [in]  */ boolean useAlternateView,  // If TRUE, returns properites for media as set in nsIDOMDocument::set_alternateViewMediaTypes")
cpp_quote("//  /* [out] */ BSTR *styleProperties, ")
cpp_quote("//  /* [out] */ BSTR *styleValues);")
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("// Returns 2 arrays -- the style properties and their values")
cpp_quote("//  useAlternateView=FALSE: gets properties for the default media type (usually screen)")
cpp_quote("//  useAlternateView=TRUE: properties for media types set w/ nsIDOMSimpleDocument::set_alternateViewMediaTypes()")
cpp_quote("//")
cpp_quote("// computedStyleForProperties(  ")
cpp_quote("//  /* [in] */  unsigned short numStyleProperties, ")
cpp_quote("//  /* [in] */  boolean useAlternateView,  // If TRUE, returns properites for media as set in nsIDOMDocument::set_alternateViewMediaTypes")
cpp_quote("//  /* [in] */  BSTR *styleProperties, ")
cpp_quote("//  /* [out] */ BSTR *styleValues);")
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("// Returns style property values for those properties in the styleProperties [in] array")
cpp_quote("// Returns 2 arrays -- the style properties and their values")
cpp_quote("//  useAlternateView=FALSE: gets properties for the default media type (usually screen)")
cpp_quote("//  useAlternateView=TRUE: properties for media types set w/ nsIDOMSimpleDocument::set_alternateViewMediaTypes()")
cpp_quote("//")
cpp_quote("// get_parentNode     (/* [in] */ ISimpleDOMNode *newNodePtr);")
cpp_quote("// get_firstChild     (/* [in] */ ISimpleDOMNode *newNodePtr);")
cpp_quote("// get_lastChild      (/* [in] */ ISimpleDOMNode *newNodePtr);")
cpp_quote("// get_previousSibling(/* [in] */ ISimpleDOMNode *newNodePtr);")
cpp_quote("// get_nextSibling    (/* [in] */ ISimpleDOMNode *newNodePtr);")
cpp_quote("// ---------------------------------------------------------------------------------------------------=")
cpp_quote("// DOM navigation - get a different node.")
cpp_quote("//")
cpp_quote("//")
cpp_quote("///////////////////////////////////////////////////////////////////////////////////////////////////////")
cpp_quote("")
cpp_quote("")

import "objidl.idl";
import "oaidl.idl";
        
const long DISPID_NODE_NODEINFO   = -5900;
const long DISPID_NODE_ATTRIBUTES = -5901;
const long DISPID_NODE_ATTRIBUTESFORNAMES = -5902;
const long DISPID_NODE_COMPSTYLE  = -5903;
const long DISPID_NODE_COMPSTYLEFORPROPS = -5904;

[object, uuid(772cf37b-261b-4b5e-87ba-ff629cfcab3a)]

interface ISimpleDOMNode : IUnknown
{
  const unsigned short NODETYPE_ELEMENT = 1;
  const unsigned short NODETYPE_ATTRIBUTE = 2;
  const unsigned short NODETYPE_TEXT = 3;
  const unsigned short NODETYPE_CDATA_SECTION = 4;
  const unsigned short NODETYPE_ENTITY_REFERENCE = 5;
  const unsigned short NODETYPE_ENTITY = 6;
  const unsigned short NODETYPE_PROCESSING_INSTRUCTION = 7;
  const unsigned short NODETYPE_COMMENT = 8;
  const unsigned short NODETYPE_DOCUMENT = 9;
  const unsigned short NODETYPE_DOCUMENT_TYPE = 10;
  const unsigned short NODETYPE_DOCUMENT_FRAGMENT = 11;
  const unsigned short NODETYPE_NOTATION = 12;

  [propget, id(DISPID_NODE_NODEINFO)] HRESULT nodeInfo(
    [out] BSTR *nodeName,   // for performance returns NULL for text nodes (true nodeName would be "#text")
    [out] short *nameSpaceID,
    [out] BSTR *nodeValue,
    [out] unsigned int *numChildren,
    [out, retval] unsigned short *nodeType
  );

  [propget, id(DISPID_NODE_ATTRIBUTES)] HRESULT attributes(  
    [in] unsigned short maxAttribs,
    [out, size_is(maxAttribs), length_is(*numAttribs)] BSTR *attribNames, 
    [out, size_is(maxAttribs), length_is(*numAttribs)] short *nameSpaceID,  
    [out, size_is(maxAttribs), length_is(*numAttribs)] BSTR *attribValues,
    [out, retval] unsigned short *numAttribs
  );

  [propget, id(DISPID_NODE_ATTRIBUTESFORNAMES)] HRESULT attributesForNames(  
    [in] unsigned short numAttribs,
    [in, size_is(numAttribs), length_is(numAttribs)] BSTR *attribNames, 
    [in, size_is(numAttribs), length_is(numAttribs)] short *nameSpaceID,  
    [out, retval, size_is(numAttribs), length_is(numAttribs)] BSTR *attribValues
  );

  [propget, id(DISPID_NODE_COMPSTYLE)] HRESULT computedStyle(  
    [in] unsigned short maxStyleProperties,
    [in] boolean useAlternateView,  // If TRUE, returns properites for media as set in nsIDOMDocument::set_alternateViewMediaTypes
    [out, size_is(maxStyleProperties), length_is(*numStyleProperties)] BSTR *styleProperties, 
    [out, size_is(maxStyleProperties), length_is(*numStyleProperties)] BSTR *styleValues,
    [out, retval] unsigned short *numStyleProperties
  );

  [propget, id(DISPID_NODE_COMPSTYLEFORPROPS)] HRESULT computedStyleForProperties(  
    [in] unsigned short numStyleProperties, 
    [in] boolean useAlternateView,  // If TRUE, returns properites for media as set in nsIDOMDocument::set_alternateViewMediaTypes
    [in, size_is(numStyleProperties), length_is(numStyleProperties)] BSTR *styleProperties, 
    [out, retval, size_is(numStyleProperties), length_is(numStyleProperties)] BSTR *styleValues
  );

  [propget] HRESULT parentNode([out, retval] ISimpleDOMNode **node);
  [propget] HRESULT firstChild([out, retval] ISimpleDOMNode **node);
  [propget] HRESULT lastChild([out, retval] ISimpleDOMNode **node);
  [propget] HRESULT previousSibling([out, retval] ISimpleDOMNode **node);
  [propget] HRESULT nextSibling([out, retval] ISimpleDOMNode **node);
}
        

