/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Author: Aaron Leventhal (aaronl@netscape.com)
 */

cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// IMozNode.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")
cpp_quote("// Definition of IMozNode, which provides methods")
cpp_quote("// get_accTagName(), getAccAttributes(), getAccStyleRules() to get DOM info from the element")
cpp_quote("// used in building the IMozNode.")
cpp_quote("")
cpp_quote("  /* W3C media Types:")
cpp_quote("   * all:        Suitable for all devices. ")
cpp_quote("   * aural:      Intended for speech synthesizers. See the section on aural style sheets for details. ")
cpp_quote("   * braille:    Intended for braille tactile feedback devices. ")
cpp_quote("   * embossed:   Intended for paged braille printers. ")
cpp_quote("   * handheld:   Intended for handheld devices - typically small screen, monochrome, limited bandwidth. ")
cpp_quote("   * print:      Intended for paged, opaque material and for documents viewed on screen in print preview mode. Please consult the section on paged media for information about formatting issues that are specific to paged media. ")
cpp_quote("   * projection: Intended for projected presentations, for example projectors or print to transparencies. Please consult the section on paged media for information about formatting issues that are specific to paged media. ")
cpp_quote("   * screen:     Intended primarily for color computer screens. ")
cpp_quote("   * tty:        intended for media using a fixed-pitch character grid, such as teletypes, terminals, or portable devices with limited display capabilities. Authors should not use pixel units with the tty media type. ")
cpp_quote("   * tv:         Intended for television-type devices - low resolution, color, limited-scrollability screens, sound")
cpp_quote("   */")

import "objidl.idl";
import "oaidl.idl";
        
const long DISPID_ACC_TAGNAME = -5900;
const long DISPID_ACC_ATTRIBUTES = -5901;
const long DISPID_ACC_STYLERULES = -5902;

[object, uuid(96917748-8922-4fd9-8a73-d72e8aad671a)]
interface IMozNode : IUnknown
{
  cpp_quote("/* Namespace ID's predefined for common namespaces */")
  const int NAMESPACE_ID_UNKNOWN = -1;   
  const int NAMESPACE_ID_NONE = 0;   
  [helpstring("Namespace ID for XML namespaces themselves, will probably add more for Xforms, SVG and MathML later.")]
  const int NAMESPACE_ID_XMLNS = 1;     
  const int NAMESPACE_ID_XML = 2;   
  const int NAMESPACE_ID_HTML = 3;   
  const int NAMESPACE_ID_XLINK = 4;   

  const unsigned short ELEMENT_NODE = 1;
  const unsigned short ATTRIBUTE_NODE = 2;
  const unsigned short TEXT_NODE = 3;
  const unsigned short CDATA_SECTION_NODE = 4;
  const unsigned short ENTITY_REFERENCE_NODE = 5;
  const unsigned short ENTITY_NODE = 6;
  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
  const unsigned short COMMENT_NODE = 8;
  const unsigned short DOCUMENT_NODE = 9;
  const unsigned short DOCUMENT_TYPE_NODE = 10;
  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
  const unsigned short NOTATION_NODE = 12;

  [hidden, propget, id(DISPID_ACC_TAGNAME)] HRESULT nodeInfo(
    [out] BSTR *tagName,
    [out] short *nameSpaceID,
	[out] unsigned short *nodeType,
	[out] BSTR *nodeValue,
	[out] unsigned int *numChildren
  );

  [hidden, propget, id(DISPID_ACC_ATTRIBUTES)] HRESULT attributes(  
    [in] unsigned short maxAttribs,
    [out] unsigned short *numAttribs, 
    [out, size_is(maxAttribs), length_is(*numAttribs)] BSTR *attribNames, 
    [out, size_is(maxAttribs), length_is(*numAttribs)] short *nameSpaceID,  
    [out, size_is(maxAttribs), length_is(*numAttribs)] BSTR *attribValues
  );

  enum {MEDIA_ALL, MEDIA_AURAL, MEDIA_BRAILLE, MEDIA_EMBOSSED, MEDIA_HANDHELD, MEDIA_PRINT, MEDIA_PROJECTION, MEDIA_SCREEN, MEDIA_TTY};
  [hidden, propget, id(DISPID_ACC_STYLERULES)] HRESULT styleRules(  
    [in] unsigned short maxStyleRules,
    [out] unsigned short *numStyleRules, 
    [out, size_is(maxStyleRules), length_is(*numStyleRules)] BSTR *styleProperties, 
    [out, size_is(maxStyleRules), length_is(*numStyleRules)] short *styleMediaType,
    [out, size_is(maxStyleRules), length_is(*numStyleRules)] BSTR *styleValues
  );

  [propget] HRESULT parentNode([out] IMozNode **node);
  [propget] HRESULT firstChild([out] IMozNode **node);
  [propget] HRESULT lastChild([out] IMozNode **node);
  [propget] HRESULT previousSibling([out] IMozNode **node);
  [propget] HRESULT nextSibling([out] IMozNode **node);
}
	
