# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
# from buildbot.changes.freshcvs import FreshCVSSource
from buildbot.process import factory
from buildbot.scheduler import Scheduler, Periodic
from buildbot.status import html
from buildbot import locks
from buildbot.steps.transfer import FileDownload
from buildbot.steps.shell import ShellCommand

# from auth import authlist, debugPassword

import perfrunner
reload(perfrunner)
from perfrunner import *

###
### Tinderbox builder names and build directories
###
WIN32_TRUNK_BUILDER="Try server win32 builder"
LINUX_TRUNK_BUILDER="Try server linux builder"
MAC_TRUNK_BUILDER="Try server mac builder"
TRUNK_BUILDDIR="https://build.mozilla.org/tryserver-builds/"

CVSROOT=":pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot"


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

##
## Misc Config
##

c['debugPassword'] = "mozilla"
#c['manhole'] = Manhole(9999, "admin", "password")
c['projectName'] = "Talos"
c['projectURL'] = "http://quality.mozilla.org/en/projects/automation/talos"
c['buildbotURL'] = "http://qm-rhel02.mozilla.org:2007"
c['slavePortnum'] = 9985

##
## Slaves
##

c['bots'] = [("qm-pxp-try01", "w1nd3rs"),
             ("qm-ptiger-try01", "mac1nt0sh"),
             ("qm-pubuntu-try01", "l1nux")]

##
## Status
##

c['status'] = []
c['status'].append(html.Waterfall(http_port=2007,
           css="/build/tryperfmaster/waterfall.css"))

from buildbot.status.tinderbox import TinderboxMailNotifier
from buildbot.status.mail import MailNotifier

c['status'].append(MailNotifier(
                       fromaddr="talos@qa.mozilla",
                       sendToInterestedUsers=False,
                       extraRecipients=["anodelman@mozilla.com",
                                        "rcampbell@mozilla.com"],
                       mode="failing",
                       builders=None, # send for all builders
                       relayhost="smtp.mozilla.org"))

# this is the system installed TinderboxMailNotifier
c['status'].append(TinderboxMailNotifier(
                       fromaddr="rcampbell@mozilla.com",
                       tree="MozillaTry", # move to MozillaTry
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org",],
                       relayhost="smtp.mozilla.org",
                       builders=["WINNT 5.1 talos try trunk",
                                 "MacOSX Darwin 8.8.1 talos try trunk",
                                 "Linux talos try trunk"],
                       logCompression="bzip2"))



##
## Sources
##

from tinderboxpoller import TinderboxPoller

c['sources'] = []

c['sources'].append(TinderboxPoller(
    tinderboxURL = "http://tinderbox.mozilla.org",
    tree = "MozillaTry",
    branch = "win32",
    machine = WIN32_TRUNK_BUILDER,
    pollInterval = 10 * 60)
)

c['sources'].append(TinderboxPoller(
    tinderboxURL = "http://tinderbox.mozilla.org",
    tree = "MozillaTry",
    branch = "linux",
    machine = LINUX_TRUNK_BUILDER,
    pollInterval = 10 * 60)
)

c['sources'].append(TinderboxPoller(
    tinderboxURL = "http://tinderbox.mozilla.org",
    tree = "MozillaTry",
    branch = "mac",
    machine = MAC_TRUNK_BUILDER,
    pollInterval = 10 * 60)
)

##
## Schedulers
##

c['schedulers'] = []

c['schedulers'].append(Scheduler(name="WinXP try perfrun scheduler",
                                 branch="win32",
                                 treeStableTimer=5*60,
                                 builderNames=["WINNT 5.1 talos try trunk"]))

c['schedulers'].append(Scheduler(name="Mac OS X try perfrun scheduler",
                                 branch="mac",
                                 treeStableTimer=5*60,
                                 builderNames=["MacOSX Darwin 8.8.1 talos try trunk"]))

c['schedulers'].append(Scheduler(name="Linux try perfrun scheduler",
                                 branch="linux",
                                 treeStableTimer=5*60,
                                 builderNames=["Linux talos try trunk"]))

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

win32_trunk_steps = factory.BuildFactory()
win32_trunk_steps.addStep(MozillaChangePusher)
win32_trunk_steps.addStep(ShellCommand,
                           workdir=".",
                           description="Cleanup",
                           command=["rm", "-rf", "*.zip", "talos/", "firefox/"],
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(ShellCommand,
                           command=["cvs", "-d", CVSROOT, "co", "-d", "talos",
                                    "mozilla/testing/performance/talos"],
                           workdir=".",
                           description="checking out talos",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(FileDownload,
                           mastersrc="scripts/generate-tpcomponent.py",
                           slavedest="generate-tpcomponent.py",
                           workdir="talos/page_load_test")
win32_trunk_steps.addStep(FileDownload,
                           mastersrc="configs/sample.config",
                           slavedest="sample.config",
                           workdir="talos/")
win32_trunk_steps.addStep(ShellCommand,
                           command=["python", "generate-tpcomponent.py"],
                           workdir="talos/page_load_test",
                           description="setting up pageloader",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(MozillaTryServerWgetLatest,
                           workdir=".",
                           branch="1.9",
                           url=TRUNK_BUILDDIR,
                           filenameSearchString="win32.zip",
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(MozillaInstallZip,
                           workdir=".",
                           branch="1.9",
                           haltOnFailure=True,
                           env=MozillaEnvironments['vc8perf'])
# TODO: remove this when msys bug is fixed
win32_trunk_steps.addStep(ShellCommand,
                           workdir="firefox/",
                           description="chmod files (see msys bug)",
                           command=["chmod", "-v", "-R", "a+x", "."],
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(MozillaUpdateConfig,
                           workdir="talos/",
                           branch="1.9",
                           haltOnFailure=True,
                           executablePath=r"C:\talos-slave\win32-trunk-mini\firefox\firefox.exe",
                           configPath=".",
                           env=MozillaEnvironments['vc8perf'])
win32_trunk_steps.addStep(MozillaRunPerfTests,
                           workdir="talos/",
                           branch="1.9",
                           timeout=14400,
                           haltOnFailure=True,
                           command=['python', 'run_tests.py', '--noisy'],
                           env=MozillaEnvironments['vc8perf'])

linux_trunk_steps = factory.BuildFactory()
linux_trunk_steps.addStep(MozillaChangePusher)
linux_trunk_steps.addStep(ShellCommand,
                           workdir=".",
                           description="Cleanup",
                           command=["rm", "-rf", "*.bz2", "talos/", "firefox/"],
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(ShellCommand,
                           command=["cvs", "-d", CVSROOT, "co", "-d", "talos",
                                    "mozilla/testing/performance/talos"],
                           workdir=".",
                           description="checking out talos",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(FileDownload,
                           mastersrc="scripts/generate-tpcomponent.py",
                           slavedest="generate-tpcomponent.py",
                           workdir="talos/page_load_test")
linux_trunk_steps.addStep(FileDownload,
                           mastersrc="configs/sample.config",
                           slavedest="sample.config",
                           workdir="talos/")
linux_trunk_steps.addStep(ShellCommand,
                           command=["python", "generate-tpcomponent.py"],
                           workdir="talos/page_load_test",
                           description="setting up pageloader",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(MozillaTryServerWgetLatest,
                           workdir=".",
                           branch="1.9",
                           url=TRUNK_BUILDDIR,
                           filenameSearchString="try-linux.tar.bz2",
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(MozillaInstallTarBz2,
                           workdir=".",
                           branch="LINUX-PL",
                           haltOnFailure=True,
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(MozillaUpdateConfig,
                           workdir="talos/",
                           branch="1.9",
                           haltOnFailure=True,
                           # TODO: when talos supports relative paths on win32
                           # make this a relative path
                           executablePath="../firefox/firefox",
                           configPath=".",
                           env=MozillaEnvironments['linux'])
linux_trunk_steps.addStep(MozillaRunPerfTests,
                           workdir="talos/",
                           branch="LINUX-PL",
                           timeout=21600,
                           haltOnFailure=True,
                           command=['python', 'run_tests.py', '--noisy'],
                           env=MozillaEnvironments['linux'])


mac_trunk_steps = factory.BuildFactory()
mac_trunk_steps.addStep(MozillaChangePusher)
mac_trunk_steps.addStep(ShellCommand,
                    workdir=".",
                    description="Cleanup",
                    command="rm -vrf *",
                    env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(ShellCommand,
                           command=["cvs", "-d", CVSROOT, "co", "-d", "talos",
                                    "mozilla/testing/performance/talos"],
                           workdir=".",
                           description="checking out talos",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(FileDownload,
                           mastersrc="scripts/generate-tpcomponent.py",
                           slavedest="generate-tpcomponent.py",
                           workdir="talos/page_load_test")
mac_trunk_steps.addStep(FileDownload,
                           mastersrc="scripts/installdmg.sh",
                           slavedest="installdmg.sh",
                           workdir=".")
mac_trunk_steps.addStep(FileDownload,
                           mastersrc="configs/sample.config",
                           slavedest="sample.config",
                           workdir="talos/")
mac_trunk_steps.addStep(ShellCommand,
                           command=["python", "generate-tpcomponent.py"],
                           workdir="talos/page_load_test",
                           description="setting up pageloader",
                           haltOnFailure=True,
                           flunkOnFailure=True,
                           env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(MozillaTryServerWgetLatest,
                           workdir=".",
                           branch="1.9",
                           url=TRUNK_BUILDDIR,
                           filenameSearchString="try-mac.dmg",
                           env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(MozillaInstallDmg,
                           workdir=".",
                           branch="MAC-PL",
                           haltOnFailure=True,
                           env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(MozillaUpdateConfig,
                           workdir="talos/",
                           branch="1.9",
                           haltOnFailure=True,
                           executablePath="../Minefield.app/Contents/MacOS/firefox",
                           configPath=".",
                           env=MozillaEnvironments['mac'])
mac_trunk_steps.addStep(MozillaRunPerfTests,
                           workdir="talos/",
                           branch="MAC-PL",
                           timeout=21600,
                           haltOnFailure=True,
                           command=['python', 'run_tests.py', '--noisy'],
                           env=MozillaEnvironments['mac'])

win32_trunk_builder = {
    'name': "WINNT 5.1 talos try trunk",
    'slavenames': ['qm-pxp-try01'],
    'builddir': "win32-trunk-mini",
    'factory': win32_trunk_steps,
    'category': "Firefox Trunk"
}

linux_trunk_builder = {
    'name': "Linux talos try trunk",
    'slavenames': ['qm-pubuntu-try01'],
    'builddir': "linux-try-trunk",
    'factory': linux_trunk_steps,
    'category': "Firefox Trunk"
}

mac_trunk_builder = {
    'name': "MacOSX Darwin 8.8.1 talos try trunk",
    'slavenames': ['qm-ptiger-try01'],
    'builddir': "mac-trunk",
    'factory': mac_trunk_steps,
    'category': "Firefox Trunk"
}

c['builders'] = []

c['builders'].append(win32_trunk_builder)
c['builders'].append(linux_trunk_builder)
c['builders'].append(mac_trunk_builder)
