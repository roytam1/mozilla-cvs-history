# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
from buildbot.changes import hgpoller
from buildbot.scheduler import Scheduler, Periodic
from buildbot.process import step, factory
from buildbot.status import html, words, tinderbox
from buildbot.steps.source import Mercurial
from buildbot.steps.transfer import FileDownload

s = factory.s

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['projectName'] = "Mozilla2"
c['projectURL'] = "http://wiki.mozilla.org/Mozilla_2"
c['buildbotURL'] = "" #XXX: fill me in

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [] #XXX: fill me in


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

c['status'] = []
c['status'].append(html.Waterfall(http_port=2004,
                                  css="mozilla.css"))



c['status'].append(tinderbox.TinderboxMailNotifier(
                       fromaddr="", #XXX: fill me in
                       tree="MozillaTest",
                       extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
                       relayhost="localhost",
                       logCompression="bzip2"))
####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.


c['sources'] = []
c['sources'].append(hgpoller.HgPoller(
                 hgURL = "http://hg.mozilla.org/",
                 branch = "mozilla-central",
                 pollInterval = 1 * 60))

####### SCHEDULERS

## configure the Schedulers

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="mozilla-central",
                                 branch="mozilla-central",
                                 treeStableTimer=5*60,
                                 builderNames=["mozilla2 firefox linux"]))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds


# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

mozilla2_firefox_unix_steps = [
        s(Mercurial, mode='update',
          baseURL='http://hg.mozilla.org/',
          defaultBranch='mozilla-central'),
        s(step.ShellCommand, command=['python', 'client.py',
                                      '--mozilla-repo=http://hg.mozilla.org/mozilla-central/',
                                      'checkout'],
          description='running client.py checkout',
          descriptionDone='client.py checkout'),
        s(FileDownload, mastersrc='mozconfig-firefox-linux',
          slavedest='.mozconfig'),
        s(step.ShellCommand, name='mozconfig contents',
          command=['cat', '.mozconfig']),
        s(step.Compile, command=['make', '-f', 'client.mk', 'build']),
#XXX: for unit test boxes
#        s(step.Test, command=['make', 'check'], workdir="build/obj-firefox")
]

mozilla2_firefox_unix_builder = {
    'name': 'mozilla2 firefox linux',
    'slavenames': [], #XXX: fill me in
    'builddir': 'mozilla2',
    'factory': factory.BuildFactory(mozilla2_firefox_unix_steps),
    'category': 'HEAD',
    }
builders.append(mozilla2_firefox_unix_builder)

c['builders'] = builders

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "" #XXX: fill me in

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

