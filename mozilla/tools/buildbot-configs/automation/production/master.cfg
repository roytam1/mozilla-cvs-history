# -*- python -*-
# ex: set syntax=python:

# This is the production buildmaster config file for Mozilla Firefox 1.8 (aka Firefox 2.0.0.x). 

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [("linux-1.8-console1",""),
             ("linux-1.8-console2",""),
             ("linux-1.8-slave1", ""),
             ("linux-1.8-slave2", ""),
             ("macosx-1.8-slave1", ""),
             ("macosx-1.8-slave2", ""),
             ("win32-1.8-slave1", ""),
             ("win32-1.8-slave2", ""),
             ("linux-trunk-slave1", ""),
             ("linux-trunk-slave2", ""),
             ("macosx-trunk-slave1", ""),
             ("macosx-trunk-slave2", ""),
             ("win32-trunk-slave1", ""),
             ("win32-trunk-slave2", "")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['sources'] = []


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Dependent
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []
tag_scheduler = Scheduler(name="tag", branch=None,
                          treeStableTimer=0, builderNames=["tag"])
build_scheduler = Scheduler(name="build", branch="build",
                            treeStableTimer=0,
                            builderNames=["linux_build", "win32_build", 
                                          "macosx_build"])
sign_scheduler = Scheduler(name="sign", branch="sign",
                           treeStableTimer=0,
                           builderNames=["sign"])
update_scheduler = Scheduler(name="update", branch="update",
                             treeStableTimer=0, builderNames=["update"])
stage_scheduler = Scheduler(name="stage", branch="stage",
                            treeStableTimer=0, builderNames=["stage"])

####### DEPENDENT SCHEDULERS
build_depscheduler = Dependent(name="build_dep", upstream=tag_scheduler,
                               builderNames=["source", "linux_build",
                                             "macosx_build", "win32_build"])
sign_depscheduler = Dependent(name="sign_dep", upstream=build_depscheduler,
                                builderNames=["sign"])
update_depscheduler = Dependent(name="update_dep", upstream=sign_depscheduler,
                                builderNames=["l10nverify", "update"])
stage_depscheduler = Dependent(name="stage_dep", upstream=update_depscheduler,
                               builderNames=["linux_update_verify",
                                             "win32_update_verify",
                                             "macosx_update_verify",
                                             "stage"])

c['schedulers'].append(tag_scheduler)
c['schedulers'].append(build_scheduler)
c['schedulers'].append(update_scheduler)
c['schedulers'].append(stage_scheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)

c['sources'].append(PBChangeSource())

####### BUILDERS

cvsroot = ":ext:cltbld@cvs.mozilla.org:/cvsroot"
##cvsroot = "build-console.build.mozilla.org:/builds/cvsmirror/cvsroot"
cvsmodule = "mozilla/tools/release"
automation_tag = "RELEASE_AUTOMATION_M6"

c['builders'] = []

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload

tagFactory = factory.BuildFactory()
tagFactory.addStep(ShellCommand, description='clean checkout',
                   workdir='.', command=['rm', '-rfv', 'build'],
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='checkout', workdir='.',
                   command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                   '-d', 'build', cvsmodule], haltOnFailure=1)
tagFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                   slavedest="bootstrap.cfg", workdir="build"),
tagFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                   command=['cat', 'bootstrap.cfg'])
tagFactory.addStep(ShellCommand, description='clean logs area',
                   command=['make', 'clean_logs'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='unit tests',
                   command=['make', 'test'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='Tag',
                   command=['perl', './release', '-o', 'Tag'], 
                   timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'tag', 'slavename': 'linux-1.8-console2',
                       'builddir': 'tag', 'factory': tagFactory })

sourceFactory = factory.BuildFactory()
sourceFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
sourceFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
sourceFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                      command=['cat', 'bootstrap.cfg'])
sourceFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='Source', workdir='build',
                      command=['perl', './release', '-o', 'Source'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'source', 'slavename': 'linux-1.8-console2',
                       'builddir': 'source', 'factory': sourceFactory })

buildFactory = factory.BuildFactory()
buildFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
buildFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
buildFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                     command=['cat', 'bootstrap.cfg'])
buildFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean tinder-config area', workdir='build',
                     command=['rm', '-rfv', '/builds/config'])
buildFactory.addStep(ShellCommand, description='TinderConfig', workdir='build',
                     command=['perl', './release', '-o', 'TinderConfig'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})
buildFactory.addStep(ShellCommand, description='Build', workdir='build',
                     command=['perl', './release', '-o', 'Build'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

buildFactory.addStep(ShellCommand, description='Repack (execute)', 
                     workdir='build',
                     command=['perl', './release', '-e', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (push)', workdir='build',
                     command=['perl', './release', '-p', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (announce)', 
                     workdir='build',
                     command=['perl', './release', '-a', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)

c['builders'].append({ 'name': 'linux_build', 'slavename': 'linux-1.8-slave2',
                       'builddir': 'linux_build', 'factory': buildFactory })
c['builders'].append({ 'name': 'win32_build', 'slavename': 'win32-1.8-slave2',
                       'builddir': 'win32_build', 'factory': buildFactory })
c['builders'].append({ 'name': 'macosx_build', 'slavename': 'macosx-1.8-slave2',
                       'builddir': 'macosx_build', 'factory': buildFactory })

signFactory = factory.BuildFactory()
signFactory.addStep(ShellCommand, description='clean checkout',
                    workdir='.', command=['rm', '-rfv', 'build'],
                    haltOnFailure=1)
signFactory.addStep(ShellCommand, description='checkout', workdir='.',
                    command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                    '-d', 'build', cvsmodule], haltOnFailure=1)
signFactory.addStep(ShellCommand, description='clean logs area',
                    command=['make', 'clean_logs'], haltOnFailure=1)
signFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                    slavedest="bootstrap.cfg", workdir="build"),
signFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                    command=['cat', 'bootstrap.cfg'])
signFactory.addStep(ShellCommand, description='Waiting for win32_signing_rc(n).log',
                    command=['perl', './release', '-o', 'Sign'], 
                    timeout=86400, haltOnFailure=1)

c['builders'].append({ 'name': 'sign', 'slavename': 'linux-1.8-console2',
                       'builddir': 'sign', 'factory': signFactory })

l10nverifyFactory = factory.BuildFactory()
l10nverifyFactory.addStep(ShellCommand, description='clean checkout',
                          workdir='.', command=['rm', '-rfv', 'build'],
                          haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                          command=['cvs', '-d', cvsroot, 'co',
                          '-r', automation_tag,
                          '-d', 'build', cvsmodule], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
l10nverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                     slavedest="bootstrap.cfg", workdir="build"),
l10nverifyFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                     command=['cat', 'bootstrap.cfg'])
l10nverifyFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='l10n verification', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Repack'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'l10nverify', 'slavename': 'macosx-1.8-slave2',
                       'builddir': 'l10nverify', 'factory': l10nverifyFactory })


updateFactory = factory.BuildFactory()
updateFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
updateFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                      command=['cat', 'bootstrap.cfg'])
updateFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='PatcherConfig', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 
                               'PatcherConfig'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (execute)', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (push)', 
                      workdir='build',
                      command=['perl', './release', '-p', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (announce)', 
                      workdir='build',
                      command=['perl', './release', '-a', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'update', 'slavename': 'linux-1.8-slave2',
                       'builddir': 'update', 'factory': updateFactory })

updateverifyFactory = factory.BuildFactory()
updateverifyFactory.addStep(ShellCommand, description='clean checkout',
                            workdir='.', command=['rm', '-rfv', 'build'],
                            haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                            command=['cvs', '-d', cvsroot, 'co',
                            '-r', automation_tag,
                            '-d', 'build', cvsmodule], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                      slavedest="bootstrap.cfg", workdir="build"),
updateverifyFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                      command=['cat', 'bootstrap.cfg'])
updateverifyFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='update verificaton', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Updates'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'linux_update_verify', 'slavename': 'linux-1.8-slave2',
                       'builddir': 'linux_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'win32_update_verify', 'slavename': 'win32-1.8-slave2',
                       'builddir': 'win32_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'macosx_update_verify', 'slavename': 'macosx-1.8-slave2',
                       'builddir': 'macosx_update_verify', 'factory': updateverifyFactory })

stageFactory = factory.BuildFactory()
stageFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
stageFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
stageFactory.addStep(ShellCommand, description='echo bootstrap.cfg',
                     command=['cat', 'bootstrap.cfg'])
stageFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='Stage', workdir='build',
                     command=['perl', './release', '-o', 'Stage'], 
                     timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'stage', 'slavename': 'linux-1.8-console2',
                       'builddir': 'stage', 'factory': stageFactory })

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
  html.Waterfall(http_port=8810, css='./mozilla.css')
)

from buildbot.status import tinderbox
c['status'].append(tinderbox.TinderboxMailNotifier(
  fromaddr="bootstrap@mozilla.com",
  tree="MozillaRelease",
  extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
  relayhost="smtp.mozilla.org",
  logCompression="bzip2")
)
   
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "Release Automation Production"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://localhost:8010/"
