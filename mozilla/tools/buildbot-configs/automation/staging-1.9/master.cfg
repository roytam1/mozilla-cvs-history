# -*- python -*-
# ex: set syntax=python:

# This is the staging buildmaster config file for Mozilla Firefox 1.9 (aka Firefox 3.0.0.x). 

# Declarations
cvsroot = ":ext:stgbld@cvs.mozilla.org:/cvsroot"
cvsl10nroot = ':ext:stgbld@cvs.mozilla.org:/l10n'
cvsmodule = "mozilla/tools/release"
ftpserver = "fx-linux-1.9-slave1"
automation_tag = "HEAD"
uploadPath = "/home/ftp/pub/mozilla.org/firefox/nightly/latest-mozilla1.9.0-l10n/"
enUS_binaryURL = 'http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla1.9.0'

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### Reload imported modules
# l10n parallelization logic
import buildbotcustom.log
import buildbotcustom.l10n
reload(buildbotcustom.log)
reload(buildbotcustom.l10n)
from buildbotcustom.l10n import NightlyL10n, Scheduler as SchedulerL10n

####### BUILDSLAVES

import BuildSlaves
reload(BuildSlaves)
c['slaves'] = BuildSlaves.SlaveList
# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []

from buildbot.changes.bonsaipoller import BonsaiPoller

bp = BonsaiPoller('http://bonsai-l10n.mozilla.org', 'all', 'HEAD',
                   cvsroot='/l10n', pollInterval = 5*30)
c['change_source'].append(bp)

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Nightly, Dependent, Periodic
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []

# For nightly shark only
shark_scheduler = Nightly(
 name='nightly_shark',
 branch='HEAD',
 hour=[01],
 builderNames=[
  'macosx_shark_build',
 ]
)

l10n_nightly_scheduler = NightlyL10n(
 name='nightly',
 # leave a gap of 4 hours from the en-US builds that happen at 5AM
 hour=[9],
 builderNames=[
  'Firefox cvs-1.9.0 linux-i686',
  'Firefox cvs-1.9.0 win32',
  'Firefox cvs-1.9.0 mac',
 ],
 repoType='cvs',
 cvsRoot=cvsroot,
 # platform is not used, but the scheduler still expects a valid value.
 platform='linux'
# You can specify your own list of locales
# locales=['af','en-GB','de']
)

# For nightly depend only
depend_scheduler = Periodic(
 name='depend', 
 periodicBuildTimer=(60 * 5),
 branch='HEAD',
 builderNames=[
  'linux_dep_build',
  'win32_dep_build',
  'macosx_dep_build',
 ]
)

# For release only
slave_prestage_scheduler = Scheduler(
 name="slave_prestage",
 branch=None,
 treeStableTimer=0,
 builderNames=["linux_prestage", "win32_prestage", "macosx_prestage"],
)

####### DEPENDENT SCHEDULERS
prestage_depscheduler = Dependent(
 name="prestage",
 upstream=slave_prestage_scheduler,
 builderNames=["prestage"],
)
cvsmirror_depscheduler = Dependent(
 name="cvsmirror_dep",
 upstream=prestage_depscheduler,
 builderNames=["cvsmirror"],
)
tag_depscheduler = Dependent(
 name="tag_dep",
 upstream=cvsmirror_depscheduler,
 builderNames=["tag"],
)
build_depscheduler = Dependent(
 name="build_dep",
 upstream=tag_depscheduler,
 builderNames=["source", "linux_build", "macosx_build", "win32_build"],
)
sign_depscheduler = Dependent(
 name="sign_dep",
 upstream=build_depscheduler,
 builderNames=["sign"],
)
update_depscheduler = Dependent(
 name="update_dep",
 upstream=sign_depscheduler,
 builderNames=["l10nverify", "update"],
)
stage_depscheduler = Dependent(
 name="stage_dep",
 upstream=update_depscheduler,
 builderNames=["linux_update_verify", "win32_update_verify",
               "macosx_update_verify", "stage"],
)
xr_depscheduler = Dependent(
 name="xulrunner_dep",
 upstream=stage_depscheduler,
 builderNames=["linux_xr_build", "macosx_xr_build", "win32_xr_build"],
)

#c['schedulers'].append(shark_scheduler)
#c['schedulers'].append(depend_scheduler)
c['schedulers'].append(l10n_nightly_scheduler)

c['schedulers'].append(slave_prestage_scheduler)
c['schedulers'].append(prestage_depscheduler)
c['schedulers'].append(cvsmirror_depscheduler)
c['schedulers'].append(tag_depscheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)
c['schedulers'].append(xr_depscheduler)

c['change_source'].append(PBChangeSource())

####### BUILDERS

c['builders'] = []

from buildbot.process import factory
from buildbotcustom.process.factory import BootstrapFactory
from buildbot.steps.shell import ShellCommand, Configure, Compile, WithProperties
from buildbot.steps.transfer import FileDownload

sharkBuildFactory = factory.BuildFactory()
sharkBuildFactory.addStep(ShellCommand,
 description='clobber srcdir and objdir',
 workdir='.', 
 command=['rm', '-rfv', 'mozilla', 'build'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout',
 workdir='.',
 command=['cvs', '-d', cvsroot, 'co', 'mozilla/client.mk'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='checkout mozconfig',
 workdir='.',
 command=['cvs', '-d', cvsroot, 'co', '-r', 'shark', '-d', 'tinderbox-configs',
          'mozilla/tools/tinderbox-configs/firefox/macosx'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='copy mozconfig',
 workdir='.',
 command=['cp', 'tinderbox-configs/mozconfig', 'mozilla/.mozconfig'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='cat mozconfig',
 workdir='mozilla',
 command=['cat', '.mozconfig'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='create objdir',
 command=['mkdir', 'build'],
 workdir='.',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout config',
 command=['cvs', '-d', cvsroot, 'co', 
          'mozilla/build/macosx/universal/mozconfig'],
 workdir='.',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout mozilla',
 command=['make', '-f', 'client.mk', 'checkout'],
 workdir='mozilla',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(Configure,
 command=['make', '-f', 'client.mk', 'configure'],
 workdir='mozilla',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(Compile, 
 command=['make', '-f', 'client.mk', 'build'],
 workdir='mozilla',
 env={'MOZILLA_OFFICIAL':'1'},
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='make package',
 command=['make', 'package', 'PKG_SKIP_STRIP=1'],
 workdir='build/universal/i386',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='create upload dir',
 command=['/bin/sh', '-c', "ssh "+ftpserver+" \" mkdir -p /home/ftp/pub/mozilla.org/firefox/nightly/latest-mozilla1.9.0/\""],
 workdir='build/universal/i386/dist',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='upload build',
 command=['/bin/sh', '-c', "scp firefox-*.dmg "+ftpserver+":/home/ftp/pub/mozilla.org/firefox/nightly/latest-mozilla1.9.0/"],
 workdir='build/universal/i386/dist',
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'macosx_shark_build',
  'slavename': 'fx-mac-1.9-slave1',
  'builddir': 'macosx_shark_build',
  'category': 'nightly_experimental',
  'factory': sharkBuildFactory },
)

depBuildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='configs/fx-moz19-nightly-staging-bootstrap.cfg',
)
depBuildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
depBuildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
depBuildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
c['builders'].append(
 { 
  'name': 'linux_dep_build',
  'slavename': 'fx-linux-1.9-slave1',
  'builddir': 'linux_dep_build',
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_dep_build',
  'slavename': 'fx-win32-1.9-slave1',
  'builddir': 'win32_dep_build',
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'macosx_dep_build',
  'slavename': 'fx-mac-1.9-slave1',
  'builddir': 'macosx_dep_build',
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)

####### L10n Scheduler with multiple dispatchers

# for debugging purposes of the repack on locale change system
buildbotcustom.log.init(
    scheduler = buildbotcustom.log.DEBUG,
    dispatcher = buildbotcustom.log.DEBUG
)

s = SchedulerL10n("l10n", "l10nbuilds.ini")
c['schedulers'].append(s)

####### L10n Nightlies

L10nNightlyFactory = factory.BuildFactory()
L10nNightlyFactory.addStep(ShellCommand,
# This will remove the folder from which we upload
# and the folder in which the packages are generated
    command=['rm','-rf','mozilla/dist'],
    workdir=".",
    haltOnFailure = True)
L10nNightlyFactory.addStep(ShellCommand(
    command=["sh", "-c",
             "cvs -q -z3 -d "+cvsroot+" co mozilla/client.mk && cvs -q -z3 -d "+cvsroot+" co mozilla/nsprpub mozilla/other-licenses/7zstub/firefox"],
    descriptionDone="client.mk checked out",
    workdir=".",
    haltOnFailure = True
    ))
L10nNightlyFactory.addStep(FileDownload,
    mastersrc="mozconfig-l10n",
    slavedest=".mozconfig",
    workdir="mozilla",
    haltOnFailure = True
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["cat",".mozconfig"],
    descriptionDone="cat mozconfig",
    workdir="mozilla"
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["make", "-f", "client.mk", "l10n-checkout"],
    description="checking out tree",
    descriptionDone="l10n-checkout",
    workdir="mozilla",
    haltOnFailure = True,
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["make", "-f", "client.mk", "configure"],
    description="make configure",
    descriptionDone="make configure done",
    env={'CONFIGURE_ENV_ARGS':''},
    haltOnFailure=True,
    workdir="mozilla",
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["make", "wget-en-US"],
    descriptionDone="wget en-US",
    workdir="mozilla/browser/locales",
    env={'EN_US_BINARY_URL':enUS_binaryURL},
    haltOnFailure = True
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["cvs", "-q", "-z3", "-d", cvsl10nroot, "co", 
           WithProperties("l10n/%(locale)s")],
    description="checking locale", 
    descriptionDone="locale's source",
    workdir=".",
    haltOnFailure = True
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["make", WithProperties("installers-%(locale)s")],
    workdir="mozilla/browser/locales",
    haltOnFailure = True
)
L10nNightlyFactory.addStep(ShellCommand,
    command=["make", WithProperties("prepare-upload-latest-%(locale)s")],
    workdir="mozilla/browser/locales",
    haltOnFailure=True
)
L10nNightlyFactory.addStep(ShellCommand,
    name = "upload locale",
# This will upload everything on dist/upload, I assume that the first 
# step run in this build is "rm -rf mozilla/dist/upload"
    command=['sh','-c','scp -r * '+ftpserver+":"+uploadPath],
    description="uploading packages", 
    descriptionDone="uploaded packages",
    workdir="mozilla/dist/upload/latest",
    haltOnFailure=True
)
# This step makes sure we can use nagios monitoring on the latest dir
# to tell when l10n builds stop working altogether.
L10nNightlyFactory.addStep(ShellCommand,     
    name = "touch upload dir",
    command=['sh', '-c', "ssh "+ftpserver+" \"touch "+uploadPath+"\""],
    description="touching upload dir", 
    descriptionDone="touched upload dir",
    workdir="mozilla/dist/upload/latest"
)

c['builders'].append(
 {
  'name': 'Firefox cvs-1.9.0 linux-i686',
  'slavenames': ['fx-linux-1.9-slave1','fx-linux-1.9-slave3','fx-linux-1.9-slave4'],
  'builddir': 'linux_l10n_nightly',
  'category': 'nightly',
  'factory': L10nNightlyFactory,
 }
)
c['builders'].append(
 {
  'name': 'Firefox cvs-1.9.0 mac',
  'slavename': 'fx-mac-1.9-slave1',
  'builddir': 'macosx_l10n_nightly',
  'category': 'nightly',
  'factory': L10nNightlyFactory,
 }
)
c['builders'].append(
 {
  'name': 'Firefox cvs-1.9.0 win32',
  'slavenames': ['fx-win32-1.9-slave1','fx-win32-1.9-slave3','fx-win32-1.9-slave4'],
  'builddir': 'win32_l10n_nightly',
  'category': 'nightly',
  'factory': L10nNightlyFactory,
 }
)

####### Release

slavePrestageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
slavePrestageFactory.addStep(ShellCommand,
 description='clean staging area',
 command=['make', 'clean_stage'],
 timeout=3600,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'linux_prestage',
  'slavename': 'fx-linux-1.9-slave1',
  'builddir': 'linux_prestage',
  'category': 'release',
  'factory': slavePrestageFactory,
 },
)

c['builders'].append(
 { 
  'name': 'win32_prestage',
  'slavename': 'fx-win32-1.9-slave1',
  'builddir': 'win32_prestage',
  'category': 'release',
  'factory': slavePrestageFactory,
 },
)

c['builders'].append(
 { 
  'name': 'macosx_prestage',
  'slavename': 'fx-mac-1.9-slave1',
  'builddir': 'macosx_prestage',
  'category': 'release',
  'factory': slavePrestageFactory,
 },
)

prestageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
prestageFactory.addStep(ShellCommand,
 description='clean staging area',
 command=['make', 'clean_stage'],
 haltOnFailure=1,
)
prestageFactory.addStep(ShellCommand,
 description='create staging area',
 command=['make', 'stage'],
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'prestage',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'prestage',
  'factory': prestageFactory,
 },
)

cvsmirrorFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
cvsmirrorFactory.addStep(ShellCommand, 
 description='create cvsmirror cvsroot',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/cvsroot/', '/builds/cvsmirror/cvsroot/'], 
 haltOnFailure=1,
)
cvsmirrorFactory.addStep(ShellCommand, 
 description='create cvsmirror l10n',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/l10n/', '/builds/cvsmirror/l10n/'], 
 haltOnFailure=1,
)
cvsmirrorFactory.addStep(ShellCommand, 
 description='create cvsmirror mofo',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/mofo/', '/builds/cvsmirror/mofo/'], 
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'cvsmirror', 
  'slavename': 'staging-1.9-master',
  'category': 'release',
  'builddir': 'cvsmirror', 
  'factory': cvsmirrorFactory,
 },
)


tagFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
tagFactory.addStep(ShellCommand,
 description='Tag',
 command=['perl', './release', '-o', 'Tag'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'tag',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'tag',
  'factory': tagFactory,
 },
)

sourceFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
sourceFactory.addStep(ShellCommand,
 description='Source',
 workdir='build',
 command=['perl', './release', '-o', 'Source'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'source',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'source',
  'factory': sourceFactory,
 },
)

buildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
buildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
buildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
buildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

buildFactory.addStep(ShellCommand,
 description='Repack (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (push)',
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'linux_build',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'linux_build', 
  'factory': buildFactory,
 },
)
c['builders'].append(
 {
  'name': 'win32_build',
  'slavename': 'fx-win32-1.9-slave1',
  'category': 'release',
  'builddir': 'win32_build', 
  'factory': buildFactory,
 },
)
c['builders'].append(
 { 'name': 'macosx_build',
   'slavename': 'fx-mac-1.9-slave1',
   'category': 'release',
   'builddir': 'macosx_build', 
   'factory': buildFactory,
 },
)

signFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
signFactory.addStep(ShellCommand,
 description='Fake signing log',
 command=['/bin/bash', '-c', 
          '""/bin/touch /home/ftp/pub/firefox/nightly/3.0.6-candidates/build1/unsigned/win32_signing_build1.log""'],
 haltOnFailure=1,
)
signFactory.addStep(ShellCommand,
 description='Fake signing',
 command=['/bin/bash', '-c',
          '""/bin/ln -fs /home/ftp/pub/firefox/nightly/3.0.6-candidates/build1/unsigned/* /home/ftp/pub/firefox/nightly/3.0.6-candidates/build1/""'],
 haltOnFailure=1,
)
signFactory.addStep(ShellCommand,
 description='Waiting for win32_signing_build(n).log',
 command=['perl', './release', '-o', 'Sign'], 
 timeout=86400,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'sign',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'sign',
  'factory': signFactory,
 },
)

l10nverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
l10nverifyFactory.addStep(ShellCommand,
 description='l10n verification',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Repack'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 {
  'name': 'l10nverify',
  'slavename': 'fx-mac-1.9-slave1',
  'category': 'release',
  'builddir': 'l10nverify', 
  'factory': l10nverifyFactory,
 },
)

updateFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
updateFactory.addStep(ShellCommand,
 description='clean update area',
 workdir='build',
 command=['rm', '-rfv', '/builds/updates'],
)
updateFactory.addStep(ShellCommand,
 description='PatcherConfig', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'PatcherConfig'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (push)', 
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'update',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'update',
  'factory': updateFactory,
 },
)

updateverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
updateverifyFactory.addStep(ShellCommand,
 description='update verificaton',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Updates'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 { 
  'name': 'linux_update_verify',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'linux_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_update_verify',
  'slavename': 'fx-win32-1.9-slave1',
  'category': 'release',
  'builddir': 'win32_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append(
 {
  'name': 'macosx_update_verify',
  'slavename': 'fx-mac-1.9-slave1',
  'category': 'release',
  'builddir': 'macosx_update_verify',
  'factory': updateverifyFactory,
 },
)

stageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-staging-bootstrap.cfg',
)
stageFactory.addStep(ShellCommand,
 description='Stage',
 workdir='build',
 command=['perl', './release', '-o', 'Stage'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'stage',
  'slavename': 'fx-linux-1.9-slave1',
  'category': 'release',
  'builddir': 'stage',
  'factory': stageFactory,
 },
)

####### XULRunner

xrBuildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/xr-moz19-staging-bootstrap.cfg',
)
xrBuildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
xrBuildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
xrBuildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 { 
  'name': 'linux_xr_build',
  'slavename': 'fx-linux-1.9-slave1',
  'builddir': 'linux_xr_build',
  'category': 'release',
  'factory': xrBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_xr_build',
  'slavename': 'fx-win32-1.9-slave1',
  'builddir': 'win32_xr_build',
  'category': 'release',
  'factory': xrBuildFactory,
 },
)
c['builders'].append(
 { 
 'name': 'macosx_xr_build',
 'slavename': 'fx-mac-1.9-slave1',
 'builddir': 'macosx_xr_build',
 'category': 'release',
 'factory': xrBuildFactory,
 },
)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

import buildbot.status
reload(buildbot.status)

from buildbot.status import html, tinderbox
c['status'].append(
 html.WebStatus(http_port=8810, allowForce=True)
)

c['status'].append(tinderbox.TinderboxMailNotifier(
 fromaddr="bootstrap@mozilla.com",
 tree="MozillaStaging",
 extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
 relayhost="smtp.mozilla.org",
 logCompression="bzip2")
)

# We only want the builds from the specified builders
# since their builds have a build property called "locale"
c['status'].append(tinderbox.TinderboxMailNotifier(
 fromaddr="bootstrap@mozilla.com",
 tree=WithProperties("MozillaStaging-%(locale)s"),
 extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org",],
 relayhost="smtp.mozilla.org",
 logCompression="bzip2",
 builders=['Firefox cvs-1.9.0 linux-i686',
           'Firefox cvs-1.9.0 win32',
           'Firefox cvs-1.9.0 mac'],
 binaryURL="http://fx-linux-1.9-slave1.build.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla1.9.0-l10n/")
)
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "1.9 Staging Master"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://staging-1.9-master.build.mozilla.org:8810"
