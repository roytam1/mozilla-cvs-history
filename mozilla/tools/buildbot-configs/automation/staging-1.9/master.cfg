# -*- python -*-
# ex: set syntax=python:

# This is the staging buildmaster config file for Mozilla Firefox 1.9 (aka Firefox 3.0.0.x). 

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [("staging-trunk-automation",""),
             ("fx-linux-1.9-slave1",""),
             ("fx-win32-1.9-slave1", ""),
             ("fx-mac-1.9-slave1", "")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['sources'] = []

from buildbot.changes import bonsaipoller

c['sources'].append(
 bonsaipoller.BonsaiPoller(
  bonsaiURL = 'http://bonsai.mozilla.org',
  module = 'PhoenixTinderbox',
  branch = 'HEAD',
  pollInterval = 1 * 60,
 )
)

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Dependent
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []

# For nightly clobber only
#clobber_scheduler = Nightly(
# name='nightly',
# branch='HEAD',
# hour=[3],
# builderNames=[
#  'linux_clobber',
#  'win32_clobber',
#  'macosx_clobber',
# ]
#)

# For nightly depend only
depend_scheduler = Scheduler(
 name='depend', 
 treeStableTimer=0,
 branch='HEAD',
 builderNames=[
  'linux_dep_build',
  'win32_dep_build',
  'macosx_dep_build',
 ]
)


# For release only
tag_scheduler = Scheduler(name="tag", branch=None,
                          treeStableTimer=0, builderNames=["tag"])
build_scheduler = Scheduler(name="build", branch="build",
                            treeStableTimer=0,
                            builderNames=["linux_build", "win32_build", 
                                          "macosx_build"])
sign_scheduler = Scheduler(name="sign", branch="sign",
                           treeStableTimer=0,
                           builderNames=["sign"])
update_scheduler = Scheduler(name="update", branch="update",
                             treeStableTimer=0, builderNames=["update"])
stage_scheduler = Scheduler(name="stage", branch="stage",
                            treeStableTimer=0, builderNames=["stage"])

####### DEPENDENT SCHEDULERS
build_depscheduler = Dependent(name="build_dep", upstream=tag_scheduler,
                               builderNames=["source", "linux_build",
                                             "macosx_build", "win32_build"])
sign_depscheduler = Dependent(name="sign_dep", upstream=build_depscheduler,
                                builderNames=["sign"])
update_depscheduler = Dependent(name="update_dep", upstream=sign_depscheduler,
                                builderNames=["l10nverify", "update"])
stage_depscheduler = Dependent(name="stage_dep", upstream=update_depscheduler,
                               builderNames=["linux_update_verify",
                                             "win32_update_verify",
                                             "macosx_update_verify",
                                             "stage"])

#c['schedulers'].append(clobber_scheduler)
c['schedulers'].append(depend_scheduler)

c['schedulers'].append(tag_scheduler)
c['schedulers'].append(build_scheduler)
c['schedulers'].append(update_scheduler)
c['schedulers'].append(stage_scheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)

c['sources'].append(PBChangeSource())

####### BUILDERS

cvsroot = ":ext:stgbld@cvs.mozilla.org:/cvsroot"
cvsmodule = "mozilla/tools/release"
automation_tag = "HEAD"

c['builders'] = []

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload

from buildbot import locks

# Do not reuse buildslaves.
linux_lock = locks.SlaveLock("linux", maxCount=1)
macosx_lock = locks.SlaveLock("macosx", maxCount=1)
win32_lock = locks.SlaveLock("win32", maxCount=1)

depBuildFactory = factory.BuildFactory()
depBuildFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
depBuildFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
depBuildFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
depBuildFactory.addStep(FileDownload, mastersrc="nightly-bootstrap.cfg",
                     slavedest="bootstrap.cfg", workdir="build"),
depBuildFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
depBuildFactory.addStep(ShellCommand, description='Build', workdir='build',
                     command=['perl', './release', '-o', 'Build'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})
c['builders'].append({ 'name': 'linux_dep_build',
                       'slavename': 'fx-linux-1.9-slave1',
                       'builddir': 'linux_dep_build',
                       'locks': [linux_lock],
                       'factory': depBuildFactory })
c['builders'].append({ 'name': 'win32_dep_build',
                       'slavename': 'fx-win32-1.9-slave1',
                       'builddir': 'win32_dep_build',
                       'locks': [win32_lock],
                       'factory': depBuildFactory })
c['builders'].append({ 'name': 'macosx_dep_build',
                       'slavename': 'fx-mac-1.9-slave1',
                       'builddir': 'macosx_dep_build',
                       'locks': [macosx_lock],
                       'factory': depBuildFactory })

tagFactory = factory.BuildFactory()
tagFactory.addStep(ShellCommand, description='clean checkout',
                   workdir='.', command=['rm', '-rfv', 'build'],
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='checkout', workdir='.',
                   command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                   '-d', 'build', cvsmodule], haltOnFailure=1)
tagFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                   slavedest="bootstrap.cfg", workdir="build"),
tagFactory.addStep(ShellCommand, description='clean logs area',
                   command=['make', 'clean_logs'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='unit tests',
                   command=['make', 'test'], haltOnFailure=1)
# The Makefile 'stage' targets are Fx2 specific, we have to do our own thing
# here. Previous builds/updates need to be downloaded manually, at this time.
tagFactory.addStep(ShellCommand, description = 'clean staging area',
                   command="rm -rf /builds/config/* /builds/tags/* " + \
                    "/builds/release/logs/* /builds/updates/* " + \
                    "/builds/verify/* " + \
                    "/home/ftp/pub/firefox/nightly/2007* " + \
                    "/home/ftp/pub/firefox/nightly/3.0b3-candidates " + \
                    "/data/cltbld/firefox-3.0b3/ ",
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description = 'create staging area',
                   command="mkdir -p /builds/config /builds/tags " + \
                    "/builds/updates /builds/verify /builds/logs " + \
                    "/data/symbols " + \
                    "/home/ftp/pub/firefox/releases/1.5 " + \
                    "/home/ftp/pub/firefox/nightly " + \
                    "&& touch /home/ftp/pub/firefox/releases/1.5/KEY " +\
                    "&& chown -R cltbld:firefox /home/ftp/pub/firefox "+\
                    "&& chmod -R g+rwxs /home/ftp/pub/firefox " + \
                    "&& chmod -R o+rx /home/ftp/pub",
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='sync externalStaging area',
                   command=['rsync', '-av', '--delete', '/home/ftp/', 'fx-linux-1.9-slave1.build.mozilla.org:/home/ftp'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='create cvsmirror cvsroot',
                   command=['rsync', '-av', '--delete-after',
                            '/builds/cvsmirror.clean/cvsroot/', 
                            '/builds/cvsmirror/cvsroot/'], 
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='create cvsmirror l10n',
                   command=['rsync', '-av', '--delete-after',
                            '/builds/cvsmirror.clean/l10n/', 
                            '/builds/cvsmirror/l10n/'], 
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='create cvsmirror mofo',
                   command=['rsync', '-av', '--delete-after',
                            '/builds/cvsmirror.clean/mofo/', 
                            '/builds/cvsmirror/mofo/'], 
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='Tag',
                   command=['perl', './release', '-o', 'Tag'], 
                   timeout=36000, haltOnFailure=1)
# work around CVS val-tags problem
# http://weblogs.mozillazine.org/preed/2006/10/a_case_of_the_mondays_on_a_wed.html
tagFactory.addStep(ShellCommand, description='do valid l10n checkout',
                   command=['cvs', '-d', '/builds/cvsmirror/l10n', 'co',
                            '-r', 'FIREFOX_3_0b3_RELEASE',
                            'l10n/de/browser/README.txt'],
                   workdir="/tmp")

c['builders'].append({ 'name': 'tag', 'slavename': 'staging-trunk-automation',
                       'builddir': 'tag', 'factory': tagFactory })

sourceFactory = factory.BuildFactory()
sourceFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
sourceFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
sourceFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='Source', workdir='build',
                      command=['perl', './release', '-o', 'Source'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'source', 'slavename': 'staging-trunk-automation',
                       'builddir': 'source', 'factory': sourceFactory })

buildFactory = factory.BuildFactory()
buildFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-z3', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
buildFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
buildFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean tinder-config area', workdir='build',
                     command=['rm', '-rfv', '/builds/config'])
buildFactory.addStep(ShellCommand, description='TinderConfig', workdir='build',
                     command=['perl', './release', '-o', 'TinderConfig'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})
buildFactory.addStep(ShellCommand, description='Build', workdir='build',
                     command=['perl', './release', '-o', 'Build'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

buildFactory.addStep(ShellCommand, description='Repack (execute)', 
                     workdir='build',
                     command=['perl', './release', '-e', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (push)', workdir='build',
                     command=['perl', './release', '-p', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (announce)', 
                     workdir='build',
                     command=['perl', './release', '-a', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)

c['builders'].append({ 'name': 'linux_build', 'slavename': 'fx-linux-1.9-slave1',
                       'locks': [linux_lock], 'builddir': 'linux_build', 
                       'factory': buildFactory })
c['builders'].append({ 'name': 'win32_build', 'slavename': 'fx-win32-1.9-slave1',
                       'locks': [win32_lock], 'builddir': 'win32_build', 
                       'factory': buildFactory })
c['builders'].append({ 'name': 'macosx_build', 'slavename': 'fx-mac-1.9-slave1',
                       'locks': [macosx_lock], 'builddir': 'macosx_build', 
                       'factory': buildFactory })

signFactory = factory.BuildFactory()
signFactory.addStep(ShellCommand, description='clean checkout',
                    workdir='.', command=['rm', '-rfv', 'build'],
                    haltOnFailure=1)
signFactory.addStep(ShellCommand, description='checkout', workdir='.',
                    command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                    '-d', 'build', cvsmodule], haltOnFailure=1)
signFactory.addStep(ShellCommand, description='clean logs area',
                    command=['make', 'clean_logs'], haltOnFailure=1)
signFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                    slavedest="bootstrap.cfg", workdir="build"),
signFactory.addStep(ShellCommand, description='Fake signing log',
                    command=['/bin/bash', '-c', '""/bin/touch /home/ftp/pub/firefox/nightly/3.0b3-candidates/rc1/unsigned/win32_signing_rc1.log""'], haltOnFailure=1)
signFactory.addStep(ShellCommand, description='Fake signing',
                    command=['/bin/bash', '-c', '""/bin/ln -fs /home/ftp/pub/firefox/nightly/3.0b3-candidates/rc1/unsigned/* /home/ftp/pub/firefox/nightly/3.0b3-candidates/rc1/""'], haltOnFailure=1)
signFactory.addStep(ShellCommand, description='Waiting for win32_signing_rc(n).log',
                    command=['perl', './release', '-o', 'Sign'], 
                    timeout=86400, haltOnFailure=1)

c['builders'].append({ 'name': 'sign', 'slavename': 'staging-trunk-automation',
                       'builddir': 'sign', 'factory': signFactory })

l10nverifyFactory = factory.BuildFactory()
l10nverifyFactory.addStep(ShellCommand, description='clean checkout',
                          workdir='.', command=['rm', '-rfv', 'build'],
                          haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                          command=['cvs', '-d', cvsroot, 'co',
                          '-r', automation_tag,
                          '-d', 'build', cvsmodule], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
l10nverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                     slavedest="bootstrap.cfg", workdir="build"),
l10nverifyFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='l10n verification', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Repack'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'l10nverify', 'slavename': 'fx-mac-1.9-slave1',
                       'builddir': 'l10nverify', 'factory': l10nverifyFactory })


updateFactory = factory.BuildFactory()
updateFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
updateFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='clean update area', workdir='build',
                      command=['rm', '-rfv', '/builds/updates'])
updateFactory.addStep(ShellCommand, description='PatcherConfig', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 
                               'PatcherConfig'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (execute)', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (push)', 
                      workdir='build',
                      command=['perl', './release', '-p', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (announce)', 
                      workdir='build',
                      command=['perl', './release', '-a', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'update', 'slavename': 'staging-trunk-automation',
                       'builddir': 'update', 'factory': updateFactory })

updateverifyFactory = factory.BuildFactory()
updateverifyFactory.addStep(ShellCommand, description='clean checkout',
                            workdir='.', command=['rm', '-rfv', 'build'],
                            haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                            command=['cvs', '-d', cvsroot, 'co',
                            '-r', automation_tag,
                            '-d', 'build', cvsmodule], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                      slavedest="bootstrap.cfg", workdir="build"),
updateverifyFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='update verificaton', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Updates'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'linux_update_verify', 'slavename': 'fx-linux-1.9-slave1',
                       'builddir': 'linux_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'win32_update_verify', 'slavename': 'fx-win32-1.9-slave1',
                       'builddir': 'win32_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'macosx_update_verify', 'slavename': 'fx-mac-1.9-slave1',
                       'builddir': 'macosx_update_verify', 'factory': updateverifyFactory })

stageFactory = factory.BuildFactory()
stageFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
stageFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
stageFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='Stage', workdir='build',
                     command=['perl', './release', '-o', 'Stage'], 
                     timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'stage', 'slavename': 'staging-trunk-automation',
                       'builddir': 'stage', 'factory': stageFactory })

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
  html.Waterfall(http_port=8810, css='./mozilla.css')
)

from buildbot.status import tinderbox
c['status'].append(tinderbox.TinderboxMailNotifier(
  fromaddr="bootstrap@mozilla.com",
  tree="MozillaTest",
  extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
  relayhost="smtp.mozilla.org",
  logCompression="bzip2")
)
   
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "Release Automation Test"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://staging-trunk-automation.build.mozilla.org:8810"
