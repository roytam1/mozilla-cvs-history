# -*- python -*-
# ex: set syntax=python:

# This is the production buildmaster config file for Mozilla Firefox 1.9 (aka Firefox 3.0.0.x). 

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.

from buildbot.buildslave import BuildSlave

c['slaves'] = [
 BuildSlave("production-1.9-master",""),
 BuildSlave("fx-linux-1.9-slave2",""),
 BuildSlave("fx-win32-1.9-slave2", ""),
 BuildSlave("fx-linux64-1.9-slave1", ""),
 BuildSlave("fx-mac-1.9-slave2", ""),
]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['change_source'] = []

from buildbot.changes import bonsaipoller

#c['change_source'].append(
# bonsaipoller.BonsaiPoller(
#  bonsaiURL = 'http://bonsai.mozilla.org',
#  module = 'PhoenixTinderbox',
#  branch = 'HEAD',
#  pollInterval = 1 * 60,
# )
#)

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Nightly, Dependent, Periodic
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []

# For buildbot-driven nightly builders
nightly_scheduler = Nightly(
 name='nightly_scheduler',
 branch='HEAD',
 hour=[01],
 builderNames=[
  'macosx_shark_build',
 ]
)

# For depend only builders
depend_scheduler = Periodic(
 name='depend', 
 periodicBuildTimer=(60 * 5),
 branch='HEAD',
 builderNames=[
  'linux_dep_build',
  'win32_dep_build',
  'macosx_dep_build',
 ]
)

tag_scheduler = Scheduler (
 name="tag_scheduler",
 treeStableTimer=0,
 builderNames=["tag"],
 branch=None,
)

####### DEPENDENT SCHEDULERS
build_depscheduler = Dependent(
 name="build_dep",
 upstream=tag_scheduler,
 builderNames=["source", "linux_build", "macosx_build", "win32_build"],
)
sign_depscheduler = Dependent(
 name="sign_dep",
 upstream=build_depscheduler,
 builderNames=["sign"],
)
update_depscheduler = Dependent(
 name="update_dep",
 upstream=sign_depscheduler,
 builderNames=["l10nverify", "update"],
)
stage_depscheduler = Dependent(
 name="stage_dep",
 upstream=update_depscheduler,
 builderNames=["linux_update_verify", "win32_update_verify",
               "macosx_update_verify", "stage"],
)

c['schedulers'].append(nightly_scheduler)
c['schedulers'].append(depend_scheduler)

c['schedulers'].append(tag_scheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)

c['change_source'].append(PBChangeSource())

####### BUILDERS

cvsroot = ":ext:cltbld@cvs.mozilla.org:/cvsroot"
cvsmodule = "mozilla/tools/release"
ftpserver = "stage.mozilla.org"
objdir = 'fx-objdir'
automation_tag = "RELEASE_AUTOMATION_M9_1"

c['builders'] = []

from buildbot.process import factory
from buildbotcustom.process.factory import BootstrapFactory
from buildbot.steps.shell import ShellCommand, Configure, Compile
from buildbot.steps.transfer import FileDownload
import buildbotcustom.steps.misc
import buildbotcustom.steps.transfer
reload(buildbotcustom.steps.misc)
reload(buildbotcustom.steps.transfer)
from buildbotcustom.steps.misc import GetBuildID
from buildbotcustom.steps.transfer import MozillaStageUpload


from buildbot import locks

# Do not reuse buildslaves.
linux_lock = locks.SlaveLock("linux", maxCount=1)
macosx_lock = locks.SlaveLock("macosx", maxCount=1)
win32_lock = locks.SlaveLock("win32", maxCount=1)

sharkBuildFactory = factory.BuildFactory()
sharkBuildFactory.addStep(ShellCommand,
 description='clobber srcdir and objdir',
 workdir='.', 
 command=['rm', '-rfv', 'mozilla', 'build'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout',
 workdir='.',
 command=['cvs', '-d', cvsroot, 'co', 'mozilla/client.mk'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='checkout mozconfig',
 workdir='.',
 command=['cvs', '-d', cvsroot, 'co', '-r', 'shark', '-d', 'tinderbox-configs',
          'mozilla/tools/tinderbox-configs/firefox/macosx'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='copy mozconfig',
 workdir='.',
 command=['cp', 'tinderbox-configs/mozconfig', 'mozilla/.mozconfig'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='cat mozconfig',
 workdir='mozilla',
 command=['cat', '.mozconfig'],
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='create objdir',
 command=['mkdir', 'build'],
 workdir='.',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout config',
 command=['cvs', '-d', cvsroot, 'co', 
          'mozilla/build/macosx/universal/mozconfig'],
 workdir='.',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='checkout mozilla',
 command=['make', '-f', 'client.mk', 'checkout'],
 workdir='mozilla',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(Configure,
 command=['make', '-f', 'client.mk', 'configure'],
 workdir='mozilla',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(Compile, 
 command=['make', '-f', 'client.mk', 'build'],
 workdir='mozilla',
 env={'MOZILLA_OFFICIAL':'1'},
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand, 
 description='make package',
 command=['make', 'package', 'PKG_SKIP_STRIP=1'],
 workdir='build/universal/i386',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='create upload dir',
 command=['/bin/sh', '-c', "ssh "+ftpserver+" \" mkdir -p /home/ftp/pub/mozilla.org/firefox/nightly/experimental/shark/\""],
 workdir='build/universal/i386/dist',
 haltOnFailure=1,
)
sharkBuildFactory.addStep(ShellCommand,
 description='upload build',
 command=['/bin/sh', '-c', "scp firefox-*.dmg "+ftpserver+":/home/ftp/pub/mozilla.org/firefox/nightly/experimental/shark/"],
 workdir='build/universal/i386/dist',
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'macosx_shark_build',
  'slavename': 'fx-mac-1.9-slave2',
  'builddir': 'macosx_shark_build',
  'locks': [macosx_lock],
  'category': 'nightly_experimental',
  'factory': sharkBuildFactory },
)

depBuildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='configs/fx-moz19-nightly-bootstrap.cfg',
)
depBuildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
depBuildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
depBuildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
c['builders'].append(
 { 
  'name': 'linux_dep_build',
  'slavename': 'fx-linux-1.9-slave2',
  'builddir': 'linux_dep_build',
  'locks': [linux_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_dep_build',
  'slavename': 'fx-win32-1.9-slave2',
  'builddir': 'win32_dep_build',
  'locks': [win32_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'macosx_dep_build',
  'slavename': 'fx-mac-1.9-slave2',
  'builddir': 'macosx_dep_build',
  'locks': [macosx_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)

tagFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
tagFactory.addStep(ShellCommand,
 description='Tag',
 command=['perl', './release', '-o', 'Tag'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'tag',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'tag',
  'factory': tagFactory,
 },
)

sourceFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
sourceFactory.addStep(ShellCommand,
 description='Source',
 workdir='build',
 command=['perl', './release', '-o', 'Source'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'source',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'source',
  'factory': sourceFactory,
 },
)

buildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
buildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
buildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
buildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

buildFactory.addStep(ShellCommand,
 description='Repack (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (push)',
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'linux_build',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'linux_build', 
  'factory': buildFactory,
 },
)
c['builders'].append(
 {
  'name': 'win32_build',
  'slavename': 'fx-win32-1.9-slave2',
  'category': 'release',
  'locks': [win32_lock],
  'builddir': 'win32_build', 
  'factory': buildFactory,
 },
)
c['builders'].append(
 { 'name': 'macosx_build',
   'slavename': 'fx-mac-1.9-slave2',
   'category': 'release',
   'locks': [macosx_lock],
   'builddir': 'macosx_build', 
   'factory': buildFactory,
 },
)

signFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
signFactory.addStep(ShellCommand,
 description='Waiting for win32_signing_build(n).log',
 command=['perl', './release', '-o', 'Sign'], 
 timeout=86400,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'sign',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'sign',
  'factory': signFactory,
 },
)

l10nverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
l10nverifyFactory.addStep(ShellCommand,
 description='l10n verification',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Repack'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append({ 'name': 'l10nverify',
 'slavename': 'fx-mac-1.9-slave2',
 'category': 'release',
 'locks': [macosx_lock],
 'builddir': 'l10nverify', 
 'factory': l10nverifyFactory,
 },
)

updateFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
updateFactory.addStep(ShellCommand,
 description='clean update area',
 workdir='build',
 command=['rm', '-rfv', '/builds/updates'],
)
updateFactory.addStep(ShellCommand,
 description='PatcherConfig', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'PatcherConfig'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (push)', 
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'update',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'update',
  'factory': updateFactory,
 },
)

updateverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
updateverifyFactory.addStep(ShellCommand,
 description='update verificaton',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Updates'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 { 
  'name': 'linux_update_verify',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'linux_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_update_verify',
  'slavename': 'fx-win32-1.9-slave2',
  'category': 'release',
  'locks': [win32_lock],
  'builddir': 'win32_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append(
 {
  'name': 'macosx_update_verify',
  'slavename': 'fx-mac-1.9-slave2',
  'category': 'release',
  'locks': [macosx_lock], 
  'builddir': 'macosx_update_verify',
  'factory': updateverifyFactory,
 },
)

stageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/fx-moz19-bootstrap.cfg',
)
stageFactory.addStep(ShellCommand,
 description='Stage',
 workdir='build',
 command=['perl', './release', '-o', 'Stage'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'stage',
  'slavename': 'fx-linux-1.9-slave2',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'stage',
  'factory': stageFactory,
 },
)

xrBuildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs', 
 bootstrap_config='configs/xr-moz19-bootstrap.cfg',
)
xrBuildFactory.addStep(ShellCommand,
 description='clean tinder-config area',
 workdir='build',
 command=['rm', '-rfv', '/builds/config'],
)
xrBuildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
xrBuildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 { 
  'name': 'linux_xr_build',
  'slavename': 'fx-linux-1.9-slave2',
  'builddir': 'linux_xr_build',
  'locks': [linux_lock],
  'category': 'release',
  'factory': xrBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'win32_xr_build',
  'slavename': 'fx-win32-1.9-slave2',
  'builddir': 'win32_xr_build',
  'locks': [win32_lock],
  'category': 'release',
  'factory': xrBuildFactory,
 },
)
c['builders'].append(
 { 
 'name': 'macosx_xr_build',
 'slavename': 'fx-mac-1.9-slave2',
 'builddir': 'macosx_xr_build',
 'locks': [macosx_lock],
 'category': 'release',
 'factory': xrBuildFactory,
 },
)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
 html.WebStatus(http_port=8810)
)

from buildbot.status import tinderbox
c['status'].append(tinderbox.TinderboxMailNotifier(
 fromaddr="bootstrap@mozilla.com",
 tree="MozillaRelease",
 extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
 relayhost="smtp.mozilla.org",
 logCompression="bzip2")
)
  
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "1.9 Production Master"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://production-1.9-master.build.mozilla.org:8810"
