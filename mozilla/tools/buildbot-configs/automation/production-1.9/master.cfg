# -*- python -*-
# ex: set syntax=python:

# This is the staging buildmaster config file for Mozilla Firefox 1.8 (aka Firefox 2.0.0.x). 

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [("production-1.9-master",""),
             ("fx-linux-1.9-slave2",""),
             ("fx-win32-1.9-slave2", ""),
             ("fx-mac-1.9-slave2", "")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['sources'] = []


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
from buildbot.scheduler import Dependent
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []

# For nightly shark only
shark_scheduler = Nightly(
 name='nightly_shark',
 branch='HEAD',
 hour=[01],
 builderNames=[
  'macosx_shark_build',
 ]
)

prestage_scheduler = Scheduler(name="prestage", branch=None, treeStableTimer=0,
                               builderNames=["prestage"])

####### DEPENDENT SCHEDULERS
tag_depscheduler = Dependent(name="tag_dep", upstream=prestage_scheduler,
                             builderNames=["tag"])
build_depscheduler = Dependent(name="build_dep", upstream=tag_depscheduler,
                               builderNames=["source", "linux_build",
                                             "macosx_build", "win32_build"])
sign_depscheduler = Dependent(name="sign_dep", upstream=build_depscheduler,
                                builderNames=["sign"])
update_depscheduler = Dependent(name="update_dep", upstream=sign_depscheduler,
                                builderNames=["l10nverify", "update"])
stage_depscheduler = Dependent(name="stage_dep", upstream=update_depscheduler,
                               builderNames=["linux_update_verify",
                                             "win32_update_verify",
                                             "macosx_update_verify",
                                             "stage"])

c['schedulers'].append(shark_scheduler)
c['schedulers'].append(prestage_scheduler)
c['schedulers'].append(tag_depscheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)

c['sources'].append(PBChangeSource())

####### BUILDERS

cvsroot = ":ext:cltbld@cvs.mozilla.org:/cvsroot"
cvsmodule = "mozilla/tools/release"
ftpserver = "stage.mozilla.org"
automation_tag = "RELEASE_AUTOMATION_M7_2"

c['builders'] = []

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload

from buildbot import locks

# Do not reuse buildslaves.
macosx_lock = locks.SlaveLock("macosx", maxCount=1)

sharkBuildFactory = factory.BuildFactory()
sharkBuildFactory.addStep(ShellCommand, description='clobber srcdir and objdir',
                          workdir='.', 
                          command=['rm', '-rfv', 'mozilla', 'build'],
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, description='checkout', workdir='.',
                          command=['cvs', '-d', cvsroot, 'co', 
                           'mozilla/client.mk'],
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, 
                          description='checkout mozconfig', workdir='.',
                          command=['cvs', '-d', cvsroot, 'co', 
                           '-r', 'shark',
                           '-d', 'tinderbox-configs',
                           'mozilla/tools/tinderbox-configs/firefox/macosx'],
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, 
                          description='copy mozconfig', workdir='.',
                          command=['cp', 'tinderbox-configs/mozconfig', 
                           'mozilla/.mozconfig'],
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, 
                          description='cat mozconfig', workdir='mozilla',
                          command=['cat', '.mozconfig'],
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, description='create objdir',
                          command=['mkdir', 'build'],
                          workdir='.',
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, description='checkout config',
                          command=['cvs', '-d', cvsroot, 'co', 
                           'mozilla/build/macosx/universal/mozconfig'],
                          workdir='.',
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, description='checkout mozilla',
                          command=['make', '-f', 'client.mk', 'checkout'],
                          workdir='mozilla',
                          haltOnFailure=1)
sharkBuildFactory.addStep(Configure,
                          command=['make', '-f', 'client.mk', 'configure'],
                          workdir='mozilla',
                          haltOnFailure=1)
sharkBuildFactory.addStep(Compile, 
                          command=['make', '-f', 'client.mk', 'build'],
                          workdir='mozilla',
                          env={'MOZILLA_OFFICIAL':'1'},
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand, 
                          description='make package',
                          command=['make', 'package', 'PKG_SKIP_STRIP=1'],
                          workdir='build/universal/i386',
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand,
                          description='create upload dir',
                          command=['/bin/sh', '-c', "ssh "+ftpserver+" \" mkdir -p /home/ftp/pub/mozilla.org/firefox/nightly/experimental/shark/\""],
                          workdir='build/universal/i386/dist',
                          haltOnFailure=1)
sharkBuildFactory.addStep(ShellCommand,
                          description='upload build',
                          command=['/bin/sh', '-c', "scp firefox-*.dmg "+ftpserver+":/home/ftp/pub/mozilla.org/firefox/nightly/experimental/shark/"],
                          workdir='build/universal/i386/dist',
                          haltOnFailure=1)

c['builders'].append({ 'name': 'macosx_shark_build',
                       'slavename': 'fx-mac-1.9-slave2',
                       'builddir': 'macosx_shark_build',
                       'locks': [macosx_lock],
                       'category': 'nightly_experimental',
                       'factory': sharkBuildFactory })

prestageFactory = factory.BuildFactory()
prestageFactory.addStep(ShellCommand, description="update bootstrap configs",
                        workdir="/builds/buildbot/trunk-automation-master/bootstrap-configs",
                        command=['cvs', 'up', '-CPd'])
prestageFactory.addStep(ShellCommand, description='clean staging area',
                        command="rm -rf /builds/config/* /builds/tags/* " + \
                        "/builds/release/logs/* /builds/updates/* " + \
                        "/builds/verify/* " + \
                        "/home/ftp/pub/firefox/nightly/2008* " + \
                        "/home/ftp/pub/firefox/nightly/3.0b3-candidates " + \
                        "/data/cltbld/firefox-3.0b2/ ",
                        haltOnFailure=1)
prestageFactory.addStep(ShellCommand, description='create staging area',
                        command="mkdir -p /builds/config /builds/tags " + \
                        "/builds/updates /builds/verify /builds/logs " + \
                        "/data/symbols " + \
                        "/home/ftp/pub/firefox/releases/1.5 " + \
                        "/home/ftp/pub/firefox/nightly " + \
                        "&& touch /home/ftp/pub/firefox/releases/1.5/KEY " +\
                        "&& chown -R cltbld:firefox /home/ftp/pub/firefox "+\
                        "&& chmod -R g+rwx /home/ftp/pub/firefox " + \
                        "&& chmod -R o+rx /home/ftp/pub",
                        haltOnFailure=1)

c['builders'].append({'name': 'prestage',
                      'slavename': 'production-1.9-master',
                      'builddir': 'prestage', 'factory': prestageFactory })

tagFactory = factory.BuildFactory()
tagFactory.addStep(ShellCommand, description='clean checkout',
                   workdir='.', command=['rm', '-rfv', 'build'],
                   haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='checkout', workdir='.',
                   command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                   '-d', 'build', cvsmodule], haltOnFailure=1)
tagFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                   slavedest="bootstrap.cfg", workdir="build"),
tagFactory.addStep(ShellCommand, description='clean logs area',
                   command=['make', 'clean_logs'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='unit tests',
                   command=['make', 'test'], haltOnFailure=1)
tagFactory.addStep(ShellCommand, description='Tag',
                   command=['perl', './release', '-o', 'Tag'], 
                   timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'tag', 'slavename': 'production-1.9-master',
                       'builddir': 'tag', 'factory': tagFactory })

sourceFactory = factory.BuildFactory()
sourceFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
sourceFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
sourceFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
sourceFactory.addStep(ShellCommand, description='Source', workdir='build',
                      command=['perl', './release', '-o', 'Source'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'source', 'slavename': 'production-1.9-master',
                       'builddir': 'source', 'factory': sourceFactory })

buildFactory = factory.BuildFactory()
buildFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-z3', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
buildFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
buildFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='clean tinder-config area', workdir='build',
                     command=['rm', '-rfv', '/builds/config'])
buildFactory.addStep(ShellCommand, description='TinderConfig', workdir='build',
                     command=['perl', './release', '-o', 'TinderConfig'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})
buildFactory.addStep(ShellCommand, description='Build', workdir='build',
                     command=['perl', './release', '-o', 'Build'], 
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

buildFactory.addStep(ShellCommand, description='Repack (execute)', 
                     workdir='build',
                     command=['perl', './release', '-e', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (push)', workdir='build',
                     command=['perl', './release', '-p', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)
buildFactory.addStep(ShellCommand, description='Repack (announce)', 
                     workdir='build',
                     command=['perl', './release', '-a', '-o', 'Repack'], 
                     timeout=36000, env={'CVS_RSH': 'ssh'}, haltOnFailure=1)

c['builders'].append({ 'name': 'linux_build', 'slavename': 'fx-linux-1.9-slave2',
                       'builddir': 'linux_build', 'factory': buildFactory })
c['builders'].append({ 'name': 'win32_build', 'slavename': 'fx-win32-1.9-slave2',
                       'builddir': 'win32_build', 'factory': buildFactory })
c['builders'].append({ 'name': 'macosx_build', 'slavename': 'fx-mac-1.9-slave2',
                       'locks': [macosx_lock], 'builddir': 'macosx_build', 
                       'factory': buildFactory })

signFactory = factory.BuildFactory()
signFactory.addStep(ShellCommand, description='clean checkout',
                    workdir='.', command=['rm', '-rfv', 'build'],
                    haltOnFailure=1)
signFactory.addStep(ShellCommand, description='checkout', workdir='.',
                    command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                    '-d', 'build', cvsmodule], haltOnFailure=1)
signFactory.addStep(ShellCommand, description='clean logs area',
                    command=['make', 'clean_logs'], haltOnFailure=1)
signFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                    slavedest="bootstrap.cfg", workdir="build"),
signFactory.addStep(ShellCommand, description='Waiting for win32_signing_rc(n).log',
                    command=['perl', './release', '-o', 'Sign'], 
                    timeout=86400, haltOnFailure=1)

c['builders'].append({ 'name': 'sign', 'slavename': 'production-1.9-master',
                       'builddir': 'sign', 'factory': signFactory })

l10nverifyFactory = factory.BuildFactory()
l10nverifyFactory.addStep(ShellCommand, description='clean checkout',
                          workdir='.', command=['rm', '-rfv', 'build'],
                          haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                          command=['cvs', '-d', cvsroot, 'co',
                          '-r', automation_tag,
                          '-d', 'build', cvsmodule], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
l10nverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                     slavedest="bootstrap.cfg", workdir="build"),
l10nverifyFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
l10nverifyFactory.addStep(ShellCommand, description='l10n verification', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Repack'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'l10nverify', 'slavename': 'fx-mac-1.9-slave2',
                       'locks': [macosx_lock], 'builddir': 'l10nverify', 
                       'factory': l10nverifyFactory })


updateFactory = factory.BuildFactory()
updateFactory.addStep(ShellCommand, description='clean checkout',
                      workdir='.', command=['rm', '-rfv', 'build'],
                      haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='checkout', workdir='.',
                      command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                      '-d', 'build', cvsmodule], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                      slavedest="bootstrap.cfg", workdir="build"),
updateFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='clean update area', workdir='build',
                      command=['rm', '-rfv', '/builds/updates'])
updateFactory.addStep(ShellCommand, description='PatcherConfig', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 
                               'PatcherConfig'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (execute)', 
                      workdir='build',
                      command=['perl', './release', '-e', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (push)', 
                      workdir='build',
                      command=['perl', './release', '-p', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)
updateFactory.addStep(ShellCommand, description='Updates (announce)', 
                      workdir='build',
                      command=['perl', './release', '-a', '-o', 'Updates'], 
                      timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'update', 'slavename': 'production-1.9-master',
                       'builddir': 'update', 'factory': updateFactory })

updateverifyFactory = factory.BuildFactory()
updateverifyFactory.addStep(ShellCommand, description='clean checkout',
                            workdir='.', command=['rm', '-rfv', 'build'],
                            haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='checkout', workdir='.',
                            command=['cvs', '-d', cvsroot, 'co',
                            '-r', automation_tag,
                            '-d', 'build', cvsmodule], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='clean logs area',
                      command=['make', 'clean_logs'], haltOnFailure=1)
updateverifyFactory.addStep(FileDownload, mastersrc="bootstrap.cfg",
                      slavedest="bootstrap.cfg", workdir="build"),
updateverifyFactory.addStep(ShellCommand, description='unit tests',
                      command=['make', 'test'], haltOnFailure=1)
updateverifyFactory.addStep(ShellCommand, description='update verificaton', workdir='build',
                     command=['perl', './release', '-v', '-o', 'Updates'],
                     timeout=36000, haltOnFailure=1, env={'CVS_RSH': 'ssh'})

c['builders'].append({ 'name': 'linux_update_verify', 'slavename': 'fx-linux-1.9-slave2',
                       'builddir': 'linux_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'win32_update_verify', 'slavename': 'fx-win32-1.9-slave2',
                       'builddir': 'win32_update_verify', 'factory': updateverifyFactory })
c['builders'].append({ 'name': 'macosx_update_verify', 'slavename': 'fx-mac-1.9-slave2',
                       'locks': [macosx_lock], 'builddir': 'macosx_update_verify', 'factory': updateverifyFactory })

stageFactory = factory.BuildFactory()
stageFactory.addStep(ShellCommand, description='clean checkout',
                     workdir='.', command=['rm', '-rfv', 'build'],
                     haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='checkout', workdir='.',
                     command=['cvs', '-d', cvsroot, 'co', '-r', automation_tag,
                     '-d', 'build', cvsmodule], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='clean logs area',
                     command=['make', 'clean_logs'], haltOnFailure=1)
stageFactory.addStep(FileDownload, mastersrc="bootstrap.cfg", 
                     slavedest="bootstrap.cfg", workdir="build"),
stageFactory.addStep(ShellCommand, description='unit tests',
                     command=['make', 'test'], haltOnFailure=1)
stageFactory.addStep(ShellCommand, description='Stage', workdir='build',
                     command=['perl', './release', '-o', 'Stage'], 
                     timeout=36000, haltOnFailure=1)

c['builders'].append({ 'name': 'stage', 'slavename': 'production-1.9-master',
                       'builddir': 'stage', 'factory': stageFactory })

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
  html.Waterfall(http_port=8810, css='./mozilla.css')
)
c['status'].append(
  html.Waterfall(http_port=8811, css='./mozilla.css',
                 categories = ['nightly_experimental'])
)

from buildbot.status import tinderbox
c['status'].append(tinderbox.TinderboxMailNotifier(
  fromaddr="bootstrap@mozilla.com",
  tree="MozillaRelease",
  extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
  relayhost="smtp.mozilla.org",
  logCompression="bzip2")
)

c['status'].append(tinderbox.TinderboxMailNotifier(
  fromaddr="bootstrap@mozilla.com",
  tree="MozillaExperimental",
  builders=['macosx_shark_build'],
  binaryURL='http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/experimental/shark/',
  extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
  relayhost="smtp.mozilla.org",
  logCompression="bzip2")
)

from buildbot.status.mail import MailNotifier
c['status'].append(MailNotifier(
  fromaddr="bootstrap@mozilla.com",
  sendToInterestedUsers=False,
  extraRecipients=["build@mozilla.org"],
  mode="passing",
  builders=["tag", "linux_build", "macosx_build", "sign", "stage"],
  relayhost="smtp.mozilla.org"))
   
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "Release Automation - Trunk/1.9"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://production-1.9-master.build.mozilla.org:8810"
