# -*- python -*-
# ex: set syntax=python:

# This is the staging buildmaster config file for Mozilla Firefox 1.8 (aka Firefox 2.0.0.x). 

# Use shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [
 ("staging-1.8-master",""),
 ("production-1.8-master",""),
 ("staging-prometheus-vm", ""),
 ("production-prometheus-vm", ""),
 ("bm-xserve03", ""),
 ("bm-xserve05", ""),
 ("staging-pacifica-vm", ""),
 ("production-pacifica-vm", ""),
 ("staging-1.9-master",""),
 ("fx-linux-1.9-slave1",""),
 ("fx-win32-1.9-slave1", ""),
 ("fx-mac-1.9-slave1", ""),
 ("production-1.9-master",""),
 ("fx-linux-1.9-slave2",""),
 ("fx-win32-1.9-slave2", ""),
 ("fx-mac-1.9-slave2", ""),
]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['sources'] = []

#from buildbot.changes import bonsaipoller
#
#c['sources'].append(
# bonsaipoller.BonsaiPoller(
#  bonsaiURL = 'http://bonsai.mozilla.org',
#  module = 'AviarySuiteBranchTinderbox',
#  branch = 'MOZILLA_1_8_BRANCH',
#  pollInterval = 1 * 60,
# )
#)


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Dependent, Periodic, Scheduler
from buildbot.changes.pb import PBChangeSource

c['schedulers'] = []

# For nightly/depend only
depend_scheduler = Periodic(
 name='depend', 
 periodicBuildTimer=(60 * 5),
 branch='MOZILLA_1_8_BRANCH',
 builderNames=[
  'linux_dep_build', 
  'win32_dep_build', 
  'macosx_dep_build',
 ]
)

c['schedulers'].append(depend_scheduler)

slave_prestage_scheduler = Scheduler(
 name="slave_prestage", branch=None,
 treeStableTimer=0,
 builderNames=[
  "linux_prestage",
  "win32_prestage",
  "macosx_prestage",
 ],
)

####### DEPENDENT SCHEDULERS
prestage_depscheduler = Dependent(
 name="prestage_depscheduler",
 upstream=slave_prestage_scheduler,
 builderNames=["prestage"],
)
tag_depscheduler = Dependent(
 name="tag_dep", 
 upstream=prestage_depscheduler,
 builderNames=["tag"],
)
build_depscheduler = Dependent(
 name="build_dep", 
 upstream=tag_depscheduler,
 builderNames=[
  "source", 
  "linux_build",
  "macosx_build",
  "win32_build"],
)
sign_depscheduler = Dependent(
 name="sign_dep", 
 upstream=build_depscheduler,
 builderNames=["sign"],
)
update_depscheduler = Dependent(
 name="update_dep", 
 upstream=sign_depscheduler,
 builderNames=[
  "l10nverify", 
  "update"],
)
stage_depscheduler = Dependent(
 name="stage_dep", 
 upstream=update_depscheduler,
 builderNames=[
  "linux_update_verify",
  "win32_update_verify",
  "macosx_update_verify",
  "stage",
 ],
)

c['schedulers'].append(slave_prestage_scheduler)
c['schedulers'].append(prestage_depscheduler)
c['schedulers'].append(tag_depscheduler)
c['schedulers'].append(build_depscheduler)
c['schedulers'].append(sign_depscheduler)
c['schedulers'].append(update_depscheduler)
c['schedulers'].append(stage_depscheduler)

c['sources'].append(PBChangeSource())

####### BUILDERS

##cvsroot = ":ext:cltbld@cvs.mozilla.org:/cvsroot"
cvsroot = ":ext:stgbld@cvs.mozilla.org:/cvsroot"
##cvsroot = ":pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot"
cvsmodule = "mozilla/tools/release"
automation_tag = "HEAD"

c['builders'] = []

from buildbot.process import factory
from buildbotcustom.process.factory import BootstrapFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload
from buildbot import locks

# Do not reuse buildslaves.
linux_lock = locks.SlaveLock("linux", maxCount=1)
macosx_lock = locks.SlaveLock("macosx", maxCount=1)
win32_lock = locks.SlaveLock("win32", maxCount=1)

depBuildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='nightly-bootstrap.cfg',
)
depBuildFactory.addStep(ShellCommand, 
 description='clean tinder-config area',
 workdir='build', 
 command=['rm', '-rfv', '/builds/config'],
)
depBuildFactory.addStep(ShellCommand, 
 description='TinderConfig',
 workdir='build', 
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000, 
 haltOnFailure=1, 
 env={'CVS_RSH': 'ssh'},
)
depBuildFactory.addStep(ShellCommand, 
 description='Build', 
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000, 
 haltOnFailure=1, 
 env={'CVS_RSH': 'ssh'},
)
c['builders'].append(
 { 
  'name': 'linux_dep_build', 
  'slavename': 'staging-prometheus-vm',
  'builddir': 'linux_dep_build',
  'locks': [linux_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 }
)
c['builders'].append(
 { 
  'name': 'win32_dep_build', 
  'slavename': 'staging-pacifica-vm',
  'builddir': 'win32_dep_build', 
  'locks': [win32_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)
c['builders'].append(
 { 
  'name': 'macosx_dep_build', 
  'slavename': 'bm-xserve03',
  'builddir': 'macosx_dep_build', 
  'locks': [macosx_lock],
  'category': 'nightly',
  'factory': depBuildFactory,
 },
)

slavePrestageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
slavePrestageFactory.addStep(ShellCommand, 
 description='clean staging area',
 command=['make', 'clean_stage'], 
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'linux_prestage',
  'slavename': 'staging-prometheus-vm',
  'builddir': 'linux_prestage',
  'locks': [linux_lock],
  'category': 'release',
  'factory': slavePrestageFactory,
 }
)

c['builders'].append(
 { 
  'name': 'win32_prestage',
  'slavename': 'staging-pacifica-vm',
  'builddir': 'win32_prestage',
  'locks': [win32_lock],
  'category': 'release',
  'factory': slavePrestageFactory,
 },
)

c['builders'].append(
 { 
  'name': 'macosx_prestage',
  'slavename': 'bm-xserve03',
  'builddir': 'macosx_prestage',
  'locks': [macosx_lock],
  'category': 'release',
  'factory': slavePrestageFactory,
 },
)

prestageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
prestageFactory.addStep(ShellCommand, 
 description="update bootstrap config",
 workdir="/builds/buildbot/TestBot/bootstrap-configs",
 command=['cvs', 'up', '-CPd'],
)
prestageFactory.addStep(ShellCommand, 
 description='clean staging area',
 command=['make', 'clean_stage'], 
 haltOnFailure=1,
)
prestageFactory.addStep(ShellCommand, 
 description='sync ftp area',
 command=['rsync', '-av', '--delete-after',
  '/home/ftp/', 'staging-prometheus-vm:/home/ftp/'], 
 haltOnFailure=1,
)
prestageFactory.addStep(ShellCommand, 
 description='create cvsmirror cvsroot',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/cvsroot/', '/builds/cvsmirror/cvsroot/'], 
 haltOnFailure=1,
)
prestageFactory.addStep(ShellCommand, 
 description='create cvsmirror l10n',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/l10n/', '/builds/cvsmirror/l10n/'], 
 haltOnFailure=1,
)
prestageFactory.addStep(ShellCommand, 
 description='create cvsmirror mofo',
 command=['rsync', '-av', '--delete-after',
  '/builds/cvsmirror.clean/mofo/', '/builds/cvsmirror/mofo/'], 
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'prestage', 
  'slavename': 'staging-1.8-master',
  'category': 'release',
  'builddir': 'prestage', 
  'factory': prestageFactory,
 },
)



tagFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
tagFactory.addStep(ShellCommand,
 description='Tag',
 command=['perl', './release', '-o', 'Tag'], 
 timeout=36000, 
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'tag', 
  'slavename': 'staging-1.8-master',
  'category': 'release',
  'builddir': 'tag', 
  'factory': tagFactory,
 },
)

sourceFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
sourceFactory.addStep(ShellCommand, 
 description='Source', 
 workdir='build',
 command=['perl', './release', '-o', 'Source'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'source',
  'slavename': 'staging-1.8-master',
  'category': 'release',
  'builddir': 'source',
  'factory': sourceFactory,
 },
)

buildFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
buildFactory.addStep(ShellCommand,
 description='TinderConfig',
 workdir='build',
 command=['perl', './release', '-o', 'TinderConfig'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
buildFactory.addStep(ShellCommand,
 description='Build',
 workdir='build',
 command=['perl', './release', '-o', 'Build'], 
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)
buildFactory.addStep(ShellCommand,
 description='Repack (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (push)',
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)
buildFactory.addStep(ShellCommand,
 description='Repack (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Repack'], 
 timeout=36000,
 env={'CVS_RSH': 'ssh'},
 haltOnFailure=1,
)

c['builders'].append(
 {
  'name': 'linux_build',
  'category': 'release',
  'slavename': 'staging-prometheus-vm',
  'builddir': 'linux_build',
  'locks': [linux_lock],
  'factory': buildFactory },
)
c['builders'].append(
 {
  'name': 'win32_build',
  'category': 'release',
  'slavename': 'staging-pacifica-vm',
  'builddir': 'win32_build',
  'locks': [win32_lock],
  'factory': buildFactory },
)
c['builders'].append(
 { 
  'name': 'macosx_build',
  'category': 'release',
  'slavename': 'bm-xserve03',
  'builddir': 'macosx_build',
  'locks': [macosx_lock],
  'factory': buildFactory,
 }
)

signFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
signFactory.addStep(ShellCommand,
 description='Fake signing log',
 command=['/bin/bash', '-c', '""/bin/touch /home/ftp/pub/firefox/nightly/2.0.0.13-candidates/rc1/unsigned/win32_signing_rc1.log""'],
 haltOnFailure=1,
)
signFactory.addStep(ShellCommand,
 description='Fake signing',
 command=['/bin/bash', '-c', '""/bin/ln -fs /home/ftp/pub/firefox/nightly/2.0.0.13-candidates/rc1/unsigned/* /home/ftp/pub/firefox/nightly/2.0.0.13-candidates/rc1/""'],
 haltOnFailure=1,
)
signFactory.addStep(ShellCommand,
 description='Waiting for win32_signing_rc(n).log',
 command=['perl', './release', '-o', 'Sign'], 
 timeout=86400,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'sign',
  'slavename': 'staging-1.8-master',
  'category': 'release',
  'builddir': 'sign',
  'factory': signFactory,
 },
)

l10nverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
l10nverifyFactory.addStep(ShellCommand,
 description='l10n verification',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Repack'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 {
  'name': 'l10nverify',
  'slavename': 'bm-xserve03',
  'category': 'release',
  'locks': [macosx_lock],
  'builddir': 'l10nverify', 
  'factory': l10nverifyFactory,
 },
)

updateFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
updateFactory.addStep(ShellCommand,
 description='PatcherConfig', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'PatcherConfig'], 
 timeout=36000, 
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (execute)', 
 workdir='build',
 command=['perl', './release', '-e', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (push)', 
 workdir='build',
 command=['perl', './release', '-p', '-o', 'Updates'], 
 timeout=36000, haltOnFailure=1,
)
updateFactory.addStep(ShellCommand,
 description='Updates (announce)', 
 workdir='build',
 command=['perl', './release', '-a', '-o', 'Updates'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'update',
  'slavename': 'staging-prometheus-vm',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'update',
  'factory': updateFactory,
 },
)

updateverifyFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
updateverifyFactory.addStep(ShellCommand,
 description='update verificaton',
 workdir='build',
 command=['perl', './release', '-v', '-o', 'Updates'],
 timeout=36000,
 haltOnFailure=1,
 env={'CVS_RSH': 'ssh'},
)

c['builders'].append(
 { 
  'name': 'linux_update_verify',
  'slavename': 'staging-prometheus-vm',
  'category': 'release',
  'locks': [linux_lock],
  'builddir': 'linux_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append(
 {
  'name': 'win32_update_verify',
  'slavename': 'staging-pacifica-vm',
  'category': 'release',
  'locks': [win32_lock],
  'builddir': 'win32_update_verify',
  'factory': updateverifyFactory,
 },
)
c['builders'].append({ 'name': 'macosx_update_verify',
 'slavename': 'bm-xserve03',
 'category': 'release',
 'locks': [macosx_lock],
 'builddir': 'macosx_update_verify',
 'factory': updateverifyFactory,
 },
)

stageFactory = BootstrapFactory(
 cvsroot=cvsroot, 
 cvsmodule=cvsmodule, 
 automation_tag=automation_tag,
 logdir='/builds/logs.nightly', 
 bootstrap_config='bootstrap.cfg',
)
stageFactory.addStep(ShellCommand,
 description='Stage',
 workdir='build',
 command=['perl', './release', '-o', 'Stage'], 
 timeout=36000,
 haltOnFailure=1,
)

c['builders'].append(
 { 
  'name': 'stage',
  'slavename': 'staging-1.8-master',
  'category': 'release',
  'builddir': 'stage',
  'factory': stageFactory,
 },
)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
 html.Waterfall(http_port=8810, css='./mozilla.css')
)
c['status'].append(
 html.Waterfall(http_port=8811, css='./mozilla.css', categories = ['nightly'])
)
c['status'].append(
 html.Waterfall(
  http_port=8812,
  css='./mozilla.css', 
  categories = ['release'],
 )
)

from buildbot.status import tinderbox
c['status'].append(tinderbox.TinderboxMailNotifier(
 fromaddr="bootstrap@mozilla.com",
 tree="MozillaTest",
 extraRecipients=["tinderbox-daemon@tinderbox.mozilla.org"],
 relayhost="smtp.mozilla.org",
 logCompression="bzip2")
)

#from buildbot.status.mail import MailNotifier
#c['status'].append(MailNotifier(
# fromaddr="bootstrap@mozilla.com",
# sendToInterestedUsers=False,
# extraRecipients=["build@mozilla.org"],
# mode="passing",
# builders=["tag", "linux_build", "macosx_build", "sign", "stage"],
# relayhost="smtp.mozilla.org"),
#
   
####### DEBUGGING OPTIONS
#c['debugPassword'] = "debugpassword"
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

####### PROJECT IDENTITY
c['projectName'] = "1.8 Staging Master"
c['projectURL'] = "http://www.mozilla.org/"
c['buildbotURL'] = "http://staging-1.8-master.build.mozilla.org:8810/"

