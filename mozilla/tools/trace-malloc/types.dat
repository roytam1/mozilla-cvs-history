# The contents of this file are subject to the Mozilla Public
# License Version 1.1 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express oqr
# implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code is types.dat, released Nov 27, 2000.
#
# The Initial Developer of the Original Code is Netscape
# Communications Corporation.  Portions created by Netscape are
# Copyright (C) 2000 Netscape Communications Corporation. All
# Rights Reserved.
#
# Contributor(s):
#    Chris Waterson <waterson@netscape.com>
#
#
# This file contains type inference information that is intended to be
# used with TraceMalloc.pm. The format of the file is:
#
#   <InferredType>
#   Stack1
#   Stack2
#   ...
#   StackN
#
# Where Stack1...StackN imply that the object's type is
# InferredType. Note that in many cases, we'll ``roll up'' storage
# that's part of an object's implementation into the object itself.

#----------------------------------------------------------------------
# Unclassified JavaScript allocations
#
<JS-unclassified>
PR_Malloc
PR_NewCondVar
JS_Init

<JS-unclassified>
JS_Init

<JS-unclassified>
js_SetSlotWhileLocked

<JS-unclassified>
js_InitGC

<JS-unclassified>
js_GC

<JS-unclassified>
JS_ArenaAllocate

<JS-unclassified>
JS_malloc

<JS-unclassified>
JS_realloc

<JS-unclassified>
PR_Malloc
PR_NewCondVar
js_SetSlotWhileLocked

<JS-unclassified>
PR_Calloc
PR_NewLock
js_SetSlotWhileLocked

<JS-unclassified>
js_NewArrayObject

#----------------------------------------------------------------------
# Unclassified string allocations
#
<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsXPIDLCString::Copy(char const *)

<unclassified-string>
PL_strdup

<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const

<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)

#----------------------------------------------------------------------

# Give nsString objects the memory they allocate for storage
<nsString>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsStr::Alloc(nsStr &, unsigned int)

# Give AtomImpl objects the memory they allocate for storage
<AtomImpl>
__builtin_new
AtomImpl::operator new(unsigned int, basic_nsAReadableString<unsigned short> const &)

# Give AtomImpl objects the memory allocated for their table
<AtomImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
NS_NewAtom(basic_nsAReadableString<unsigned short> const &)

<nsCSSRule>
__builtin_new
nsCSSRule::operator new(unsigned int)

<CSSRuleProcessor>
__builtin_new
CSSRuleProcessor::GetRuleCascade(nsIAtom *)

<nsClassList>
__builtin_new
nsClassList::ParseClasses(nsClassList **, basic_nsAReadableString<unsigned short> const &)

<nsLocalFile>
__builtin_new
nsLocalFile::Clone(nsIFile **)

<nsLocalFile>
PR_Malloc
_PR_Getfd
PR_GetConnectStatus
PR_OpenFile
PR_Open
nsLocalFile::OpenNSPRFileDesc(int, int, PRFileDesc **)

<nsLocalFile>
PR_Calloc
PR_LoadLibrary
PR_LoadLibraryWithFlags
PR_LoadLibrary
nsLocalFile::Load(PRLibrary **)

<nsLocalFile>
__strdup
PR_LoadLibrary
PR_LoadLibraryWithFlags
PR_LoadLibrary
nsLocalFile::Load(PRLibrary **)

<nsXULAttribute>
__builtin_new
nsXULAttribute::operator new(unsigned int)

<nsXULAttribute::mValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsXULAttributeValue::SetValue(basic_nsAReadableString<unsigned short> const &, int)

<nsXULAttributes>
__builtin_new
nsXULAttributes::Create(nsIContent *, nsXULAttributes **)

<nsXULElement>
__builtin_new
nsXULElement::Create(nsINodeInfo *, nsIContent **)

<nsXULElement>
__builtin_new
nsXULElement::EnsureSlots(void)

<sscanf>
iconv_close

<sscanf>
tsearch

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::AppendValue(nsCSSProperty, nsCSSValue const &)

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::SetValueImportant(nsCSSProperty)

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::operator new(unsigned int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::InsertElementAt(void *, int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::nsVoidArray(int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::Compact(void)

<nsSupportsArray>
__builtin_new
__builtin_vec_new
nsSupportsArray::InsertElementAt(nsISupports *, unsigned int)

<nsSupportsArray>
__builtin_new
nsSupportsArray::Create(nsISupports *, nsID const &, void **)

<nsZipArchive>
__builtin_new
__builtin_vec_new
nsZipArchive::BuildFileList(void)

<InMemoryDataSource>
__builtin_new
__builtin_vec_new
InMemoryDataSource::AllocTable(void *, unsigned int)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
InMemoryDataSource::InMemoryDataSource(nsISupports *)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryDataSource::AllocEntry(void *, void const *)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
Assertion::operator new(unsigned int, nsFixedSizeAllocator &)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryDataSource::AllocEntry(void *, void const *)
PL_HashTableRawAdd
PL_HashTableAdd
InMemoryDataSource::SetReverseArcs(nsIRDFNode *, Assertion *)


<xptiTypelibGuts>
__builtin_new
__builtin_vec_new
xptiTypelibGuts::xptiTypelibGuts(XPTHeader *)

<nsFontMetricsGTK>
__builtin_new
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsFontMetricsGTK>
__builtin_new
__builtin_vec_new
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Calloc
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_vec_new
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsFontMetricsGTK>
__builtin_new
nsFontWeight::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontNode::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontStretch::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontStyle::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Realloc
PR_vsxprintf
PR_WaitForPollableEvent
PR_vsmprintf
PR_smprintf
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsPluginTag>
__builtin_new
__builtin_vec_new
nsPluginTag::nsPluginTag(nsPluginInfo *)

<nsPluginTag>
__builtin_new
__builtin_vec_new
nsPluginTag::nsPluginTag(char const *, char const *, char const *, char const *const *, char const *const *, char const *const *, int)

<nsPluginTag>
__builtin_new
__builtin_vec_new
new_str(char const *)
nsPluginTag::nsPluginTag(nsPluginInfo *)

<nsPluginTag>
__builtin_new
__builtin_vec_new
new_str(char const *)
nsPluginTag::nsPluginTag(char const *, char const *, char const *, char const *const *, char const *const *, char const *const *, int)

<nsXBLPrototypeBinding>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsXBLPrototypeBinding::nsXBLPrototypeBinding(nsCString const &, nsIContent *, nsIXBLDocumentInfo *)

<nsXBLPrototypeBinding>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<nsXBLPrototypeBinding>
__builtin_new
nsISupportsKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<nsXBLPrototypeBinding>
__builtin_new
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<PresShell>
PR_Malloc
PL_ArenaAllocate
FrameArena::AllocateFrame(unsigned int, void **)

<FrameManager>
PR_Malloc
PL_ArenaAllocate
nsDST::NodeArena::AllocLeafNode(void)
nsDST::LeafNode::operator new(unsigned int, nsDST::NodeArena *)
nsDST::Insert(void *, void *, void **)

<PRLock>
PR_Calloc
PR_NewLock

<PRMonitor>
PR_Calloc
PR_NewMonitor

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
RDFServiceImpl::Init(void)

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
RDFServiceImpl::RegisterResource(nsIRDFResource *, int)

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
RDFServiceImpl::RegisterLiteral(nsIRDFLiteral *, int)

<RDFServiceImpl>
PR_Malloc
nsRDFParserUtils::IsJavaScriptLanguage(nsString const &, char const **)
PL_NewHashTable
RDFServiceImpl::Init(void)

<RDFServiceImpl>
PR_Malloc
nsRDFParserUtils::IsJavaScriptLanguage(nsString const &, char const **)
PL_HashTableRawAdd
PL_HashTableAdd
RDFServiceImpl::RegisterDataSource(nsIRDFDataSource *, int)

<nsRDFResource>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsRDFResource::Init(char const *)

<nsHTMLEntities>
__builtin_new
__builtin_vec_new
nsHTMLEntities::AddRefTable(void)

<nsHTMLEntities>
__builtin_new
nsAVLTree::AddItem(void *)
nsHTMLEntities::AddRefTable(void)

<nsStaticCaseInsensitiveNameTable>
__builtin_new
__builtin_vec_new
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<CNavDTD>
__builtin_new
CNavDTD::CNavDTD(void)

<CNavDTD>
__builtin_new
__builtin_vec_new
InitializeElementTable(void)
CNavDTD::CNavDTD(void)

<xptiWorkingSet>
__builtin_new
__builtin_vec_new
xptiWorkingSet::NewFileArray(unsigned int)

<DeviceContextImpl>
__builtin_new
__builtin_vec_new
DeviceContextImpl::DeviceContextImpl(void)

<nsCompressedMap>
__builtin_new
__builtin_vec_new
nsCompressedMap::nsCompressedMap(unsigned short *, unsigned int)

<nsHTMLDocument>
__builtin_new
__builtin_vec_new
nsHTMLDocument::nsHTMLDocument(void)

<nsXPCWrappedNativeClass>
__builtin_new
__builtin_vec_new
nsXPCWrappedNativeClass::BuildMemberDescriptors(XPCContext *)

<nsNetModuleMgr>
__builtin_new
__builtin_vec_new
nsNetModRegEntry::nsNetModRegEntry(char const *, nsINetNotify *, unsigned int *)
nsNetModuleMgr::RegisterModule(char const *, nsINetNotify *)

<nsProxyObjectManager>
__builtin_new
nsProxyObjectManager::nsProxyObjectManager(void)

<nsProxyEventClass>
__builtin_new
__builtin_vec_new
nsProxyEventClass::nsProxyEventClass(nsID const &, nsIInterfaceInfo *)

<nsProxyEventClass>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsProxyEventClass::nsProxyEventClass(nsID const &, nsIInterfaceInfo *)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_vec_new
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::HashContractID(char const *, nsID const &)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::GetLoaderForType(char const *, nsIComponentLoader **)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::ContractIDToClassID(char const *, nsID *)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
PR_Malloc
bufio_SetBufferSize
nsXPTCStubBase::Sentinel9(void)
NR_RegSetBufferSize
nsRegistry::SetBufferSize(int)
nsComponentManagerImpl::AutoRegister(int, nsIFile *)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::HashContractID(char const *, nsID const &)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::RegisterComponentCommon(nsID const &, char const *, char const *, char const *, int, int, char const *)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::RegisterComponentCommon(nsID const &, char const *, char const *, char const *, int, int, char const *)


<nsZipArchive>
__builtin_new
nsZipArchive::BuildFileList(void)

<nsCStringKey>
__builtin_new
nsCStringKey::Clone(void) const

<nsCStringKey>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCStringKey::Clone(void) const

<nsStaticCastInsensitiveNameTable>
__builtin_new
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsStaticCastInsensitiveNameTable>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsStaticCastInsensitiveNameTable>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsDrawingSurfaceGTK>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsDrawingSurfaceGTK type_info function

<nsNativeComponentLoader>
__builtin_new
nsNativeComponentLoader::Init(nsIComponentManager *, nsISupports *)

<nsNativeComponentLoader>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsNativeComponentLoader::CreateDll

<nsNativeComponentLoader>
__builtin_new
nsNativeComponentLoader::CreateDll(nsIFile *, char const *, long long *, long long *, nsDll **)

<nsNativeComponentLoader>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsNativeComponentLoader::CreateDll(nsIFile *, char const *, long long *, long long *, nsDll **)

<nsDirectoryService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDirectoryService::Set(char const *, nsISupports *)

<nsDirectoryService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDirectoryService::Set(char const *, nsISupports *)

<nsResProtocolHandler>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsResProtocolHandler::AppendSubstitution(char const *, char const *)

<nsResProtocolHandler>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsResProtocolHandler::AppendSubstitution(char const *, char const *)

<nsChromeRegistry>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsChromeRegistry::LoadDataSource(nsCString const &, nsIRDFDataSource **, int, char const *)

<nsZipReaderCache>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsZipReaderCache::GetZip(nsIFile *, nsIZipReader **)

<nsZipReaderCache>
__builtin_new
nsZipReaderCache::GetZip(nsIFile *, nsIZipReader **)

<nsXBLDocumentInfo>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
__builtin_new
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXULPrototypeCache>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXULPrototypeCache::PutXBLDocumentInfo(nsIXBLDocumentInfo *)

<nsExternalHelperAppService>
__builtin_new
nsExternalHelperAppService::nsExternalHelperAppService(void)

<nsExternalHelperAppService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsExternalHelperAppService::AddMimeInfoToCache(nsIMIMEInfo *)

<nsExternalHelperAppService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsExternalHelperAppService::AddMimeInfoToCache(nsIMIMEInfo *)

<nsCategoryManager>
__builtin_new
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsScriptSecurityManager>
__builtin_new
nsScriptSecurityManager::EnumeratePolicyCallback(char const *, void *)

<nsScriptSecurityManager>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsScriptSecurityManager::EnumeratePolicyCallback(char const *, void *)

<nsStringBundleService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsStringBundleService::insertIntoCache(nsIStringBundle *, nsCStringKey *)

<nsStringBundleService>
PR_Malloc
PL_ArenaAllocate
nsStringBundleService::insertIntoCache(nsIStringBundle *, nsCStringKey *)


<PLHashTable>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)

<nsHashtable>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)

<nsHashtable>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)

<CSSStyleSheetImpl>
__builtin_new
CSSStyleSheetImpl::CSSStyleSheetImpl(void)

<CSSStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
CSSStyleSheetImpl::CheckRuleForAttributes(nsICSSRule *)

<CSSStyleSheetImpl>
__builtin_new
AtomKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
CSSStyleSheetImpl::CheckRuleForAttributes(nsICSSRule *)

<nsStyleContextData>
__builtin_new
nsStyleContextData::Create(nsIPresContext *)

<xptiManifest>
__builtin_new
xptiManifest::Read(xptiInterfaceInfoManager *, xptiWorkingSet *)

<xptiManifest>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
xptiManifest::Read(xptiInterfaceInfoManager *, xptiWorkingSet *)

<CSSParserImpl>
__builtin_new
SelectorList::AddSelector(nsCSSSelector const &)
CSSParserImpl::ParseSelectorGroup(int &, SelectorList *&)

<CSSParserImpl>
__builtin_new
CSSParserImpl::ParseContent(int &, nsICSSDeclaration *, int &)

<RuleHash>
__builtin_new
RuleHash::AppendRuleToTable(nsHashtable &, nsIAtom *, nsICSSStyleRule *)

<RuleHash>
__builtin_new
AtomKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
RuleHash::AppendRuleToTable(nsHashtable &, nsIAtom *, nsICSSStyleRule *)

<nsCSSSelector>
__builtin_new
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAtomList::nsAtomList(nsAtomList const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<StyleSetImpl>
__builtin_new
nsSupportsArray::Create(nsISupports *, nsID const &, void **)
NS_NewISupportsArray(nsISupportsArray **)
StyleSetImpl::EnsureArray(nsISupportsArray **)

<nsPersistentProperties>
__builtin_new
nsPersistentProperties::Create(nsISupports *, nsID const &, void **)

<nsPersistentProperties>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const
nsPersistentProperties::SetStringProperty(nsString const &, nsString &, nsString &)

<nsPersistentProperties>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
nsPersistentProperties::SetStringProperty(nsString const &, nsString &, nsString &)

<nsPersistentProperties>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsPersistentProperties::nsPersistentProperties(void)

<nsCSSValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const
nsCSSValue::operator=(nsCSSValue const &)

<nsCSSValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsCSSValue::SetStringValue(basic_nsAReadableString<unsigned short> const &, nsCSSUnit)

<nsStringKey>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsStringKey::Clone(void) const

<nsTextFragment>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsTextFragment::SetTo(unsigned short const *, int)

<nsSimpleURI>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsString::ToNewCString(void) const
nsSimpleURI::SetSpec(char const *)

<nsNodeInfoManager>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
nsNodeInfoManager::GetNodeInfo(nsIAtom *, nsIAtom *, int, nsINodeInfo *&)

<nsNodeInfoManager>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsNodeInfoManager::nsNodeInfoManager(void)

<xptiInterfaceInfo>
XPT_ArenaMalloc
xptiInterfaceInfo::CopyName(char const *, xptiWorkingSet *)

<xptiInterfaceInfo>
__builtin_new
xptiInterfaceInfo::PartiallyResolveLocked(XPTInterfaceDescriptor *, xptiWorkingSet *)

<xpti-unclassified>
XPT_ArenaMalloc

<pthread-unclassified>
siglongjmp
pthread_create

<gtk-unclassified>
XrmParseCommand

<gtk-unclassified>
XOpenDisplay

<gtk-unclassified>
XCreateGC

<gtk-unclassified>
_XlcResetConverter

<gtk-unclassified>
_XEnq

<gtk-unclassified>
_XimLcctstowcs

<gtk-unclassified>
g_malloc

<gtk-unclassified>
g_realloc

<gtk-unclassified>
g_malloc0

<dl-unclassified>
_dl_lookup_versioned_symbol_skip

<dl-unclassified>
_dl_map_object_deps

<dl-unclassified>
_dl_map_object

<dl-unclassified>
_dl_debug_message

<nsRegistry>
PR_Malloc
bufio_SetBufferSize
nsXPTCStubBase::Sentinel9(void)
NR_RegSetBufferSize
nsRegistry::SetBufferSize(int)

<nsXBLService>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsXBLService::nsXBLService(void)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryAssertionEnumeratorImpl::operator new(unsigned int, nsFixedSizeAllocator &)

<nsGenericModule>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsGenericModule::GetClassObject(nsIComponentManager *, nsID const &, nsID const &, void **)

<nsGenericModule>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsGenericModule::GetClassObject(nsIComponentManager *, nsID const &, nsID const &, void **)

<nsLocale>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsLocale::nsLocale(void)

<nsLocale>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
nsLocale::AddCategory(unsigned short const *, unsigned short const *)

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::nsServiceManagerImpl(void)
NS_NewServiceManager(nsIServiceManager **)

<nsServiceManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsServiceManagerImpl::GetService(nsID const &, nsID const &, nsISupports **, nsIShutdownListener *)

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::nsServiceManagerImpl(void)
NS_NewServiceManager(nsIServiceManager **)[./libxpcom.so +0xDCB90]

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::GetService(nsID const &, nsID const &, nsISupports **, nsIShutdownListener *)


<nsXMLElement>
__builtin_new
nsGenericContainerElement::SetAttribute(nsINodeInfo *, basic_nsAReadableString<unsigned short> const &, int)
nsGenericXMLElement::SetAttribute(nsINodeInfo *, basic_nsAReadableString<unsigned short> const &, int)

<nsGCCache>
__builtin_new
nsGCCache::nsGCCache(void)

<nsPref>
_init
PL_HashTableRawAdd
PL_HashTableAdd
pref_HashPref

<nsPref>
_init
PL_NewHashTable
PREF_Init

<nsPref>
pref_HashPref

<nsThread>
PR_Calloc
PR_SetThreadPrivate
nsThread::RegisterThreadSelf(void)

<nsFontGTK>
XFreeFont

<nsFontGTK>
__builtin_new
nsFontGTK::operator new(unsigned int)

<nsGenericContainerElement>
__builtin_new
nsCheapVoidArray::SwitchToVector(void)
nsCheapVoidArray::AppendElement(void *)
nsGenericContainerElement::AppendChildTo(nsIContent *, int)

<nsObserverService>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
__builtin_new
NS_NewObserverList(nsIObserverList **)
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
__builtin_new
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsViewManager2>
__builtin_new
nsViewManager2::AddToDisplayList(int *, nsIView *, nsRect &, nsRect &, unsigned int, int, int)

<nsBindingManager>
__builtin_new
nsISupportsKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<nsBindingManager>
__builtin_new
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<nsBindingManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<NameSpaceManagerImpl>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsLayoutUtils::GetDynamicScriptContext(JSContext *, nsIScriptContext **)
NameSpaceManagerImpl::NameSpaceManagerImpl(void)

<NameSpaceManagerImpl>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
NameSpaceManagerImpl::RegisterNameSpace(basic_nsAReadableString<unsigned short> const &, int &)

<nsErrorService>
__builtin_new
nsErrorService::Create(nsISupports *, nsID const &, void **)

<nsErrorService>
__builtin_new
nsVoidKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsInt2StrHashtable::Put(unsigned int, char const *)
nsErrorService::RegisterErrorStringBundleKey(unsigned int, char const *)

<nsDocument>
__builtin_new
ArenaImpl::Create(nsISupports *, nsID const &, void **)
NS_NewHeapArena(nsIArena **, unsigned int)
nsDocument::Init(void)

<XPCContext>
__builtin_new
XPCContext::newXPCContext(XPCJSRuntime *, JSContext *)

<nsEventQueueService>
__builtin_new
nsEventQueueServiceImpl::Create(nsISupports *, nsID const &, void **)

<nsEventListenerManager>
__builtin_new
nsEventListenerManager::AddEventListener(nsIDOMEventListener *, nsID const &, int, int)

<nsCParserNode>
__builtin_new
nsCParserNode::AddAttribute(CToken *)

<nsSocketTransportService>
PR_Malloc
nsSocketTransportService::Init(void)

<CompositeDataSourceImpl>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
CompositeDataSourceImpl::CompositeDataSourceImpl(void)

<nsHTMLValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsHTMLValue::nsHTMLValue(basic_nsAReadableString<unsigned short> const &, nsHTMLUnit)
