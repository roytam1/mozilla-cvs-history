# The contents of this file are subject to the Mozilla Public
# License Version 1.1 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS
# IS" basis, WITHOUT WARRANTY OF ANY KIND, either express oqr
# implied. See the License for the specific language governing
# rights and limitations under the License.
#
# The Original Code is types.dat, released Nov 27, 2000.
#
# The Initial Developer of the Original Code is Netscape
# Communications Corporation.  Portions created by Netscape are
# Copyright (C) 2000 Netscape Communications Corporation. All
# Rights Reserved.
#
# Contributor(s):
#    Chris Waterson <waterson@netscape.com>
#
#
# This file contains type inference information that is intended to be
# used with TraceMalloc.pm. The format of the file is:
#
#   <InferredType>
#   Stack1
#   Stack2
#   ...
#   StackN
#
# Where Stack1...StackN imply that the object's type is
# InferredType. Note that in many cases, we'll ``roll up'' storage
# that's part of an object's implementation into the object itself.

#----------------------------------------------------------------------
# Unclassified JavaScript allocations
#

<JS-unclassified>
JS_DHashTableEnumerate
JS_DHashTableEnumerate
JS_strtod

<JS-unclassified>
tzset
adjtime
tzset
mktime
PRMJ_LocalGMTDifference
js_InitDateClass

<JS-unclassified>
js_SetupLocks

<JS-unclassified>
PR_Malloc
PR_NewCondVar
js_SetSlotThreadSafe

<JS-unclassified>
js_SetSlotThreadSafe

<JS-unclassified>
js_DeflateString

<JS-unclassified>
JS_vsxprintf

<JS-unclassified>
js_NewContext

<JS-unclassified>
PR_Malloc
PR_NewCondVar
JS_Init

<JS-unclassified>
JS_Init

<JS-unclassified>
js_SetSlotWhileLocked

<JS-unclassified>
js_InitGC

<JS-unclassified>
js_GC

<JS-unclassified>
JS_ArenaAllocate

<JS-unclassified>
JS_malloc

<JS-unclassified>
JS_realloc

<JS-unclassified>
PR_Malloc
PR_NewCondVar
js_SetSlotWhileLocked

<JS-unclassified>
PR_Calloc
PR_NewLock
js_SetSlotWhileLocked

<JS-unclassified>
js_NewArrayObject

#----------------------------------------------------------------------
# Unclassified string allocations
#
<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsXPIDLCString::Copy(char const *)

<unclassified-string>
PL_strdup

<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const

<unclassified-string>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)

#----------------------------------------------------------------------

# Give nsString objects the memory they allocate for storage
<nsString>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsStr::Alloc(nsStr &, unsigned int)

# Give AtomImpl objects the memory they allocate for storage
<AtomImpl>
__builtin_new
AtomImpl::operator new(unsigned int, basic_nsAReadableString<unsigned short> const &)

# Give AtomImpl objects the memory allocated for their table
<AtomImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
NS_NewAtom(basic_nsAReadableString<unsigned short> const &)

<nsCSSRule>
__builtin_new
nsCSSRule::operator new(unsigned int)

<CSSRuleProcessor>
__builtin_new
CSSRuleProcessor::GetRuleCascade(nsIAtom *)

<CSSRuleProcessor>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
CSSRuleProcessor::GetRuleCascade(nsIAtom *)

<CSSRuleProcessor>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
CSSRuleProcessor::GetRuleCascade(nsIAtom *)

<CSSLoaderImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
CSSLoaderImpl::CSSLoaderImpl(void)

<nsClassList>
__builtin_new
nsClassList::ParseClasses(nsClassList **, basic_nsAReadableString<unsigned short> const &)

<nsLocalFile>
__builtin_new
nsLocalFile::Clone(nsIFile **)

<nsLocalFile>
PR_Malloc
_PR_Getfd
PR_GetConnectStatus
PR_OpenFile
PR_Open
nsLocalFile::OpenNSPRFileDesc(int, int, PRFileDesc **)

<nsLocalFile>
PR_Calloc
PR_LoadLibrary
PR_LoadLibraryWithFlags
PR_LoadLibrary
nsLocalFile::Load(PRLibrary **)

<nsLocalFile>
__strdup
PR_LoadLibrary
PR_LoadLibraryWithFlags
PR_LoadLibrary
nsLocalFile::Load(PRLibrary **)

<nsXULAttribute>
__builtin_new
nsXULAttribute::operator new(unsigned int)

<nsXULAttribute::mValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsXULAttributeValue::SetValue(basic_nsAReadableString<unsigned short> const &, int)

<nsXULAttributes>
__builtin_new
nsXULAttributes::Create(nsIContent *, nsXULAttributes **)

<nsXULElement>
__builtin_new
nsXULElement::Create(nsINodeInfo *, nsIContent **)

<nsXULElement>
__builtin_new
nsXULElement::EnsureSlots(void)

<sscanf>
iconv_close

<sscanf>
tsearch

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::AppendValue(nsCSSProperty, nsCSSValue const &)

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::SetValueImportant(nsCSSProperty)

<CSSDeclarationImpl>
__builtin_new
CSSDeclarationImpl::operator new(unsigned int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::InsertElementAt(void *, int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::nsVoidArray(int)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::Compact(void)

<nsVoidArray>
__builtin_new
__builtin_vec_new
nsVoidArray::ReplaceElementAt(void *, int)

<nsGenericHTMLContainerElement>
__builtin_new
nsCheapVoidArray::SwitchToVector(void)
nsCheapVoidArray::AppendElement(void *)
nsGenericHTMLContainerElement::AppendChildTo(nsIContent *, int)

<nsSupportsArray>
__builtin_new
__builtin_vec_new
nsSupportsArray::InsertElementAt(nsISupports *, unsigned int)

<nsSupportsArray>
__builtin_new
nsSupportsArray::Create(nsISupports *, nsID const &, void **)

<nsZipArchive>
__builtin_new
__builtin_vec_new
nsZipArchive::BuildFileList(void)

<InMemoryDataSource>
__builtin_new
__builtin_vec_new
InMemoryDataSource::AllocTable(void *, unsigned int)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
InMemoryDataSource::InMemoryDataSource(nsISupports *)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryDataSource::AllocEntry(void *, void const *)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
Assertion::operator new(unsigned int, nsFixedSizeAllocator &)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryDataSource::AllocEntry(void *, void const *)
PL_HashTableRawAdd
PL_HashTableAdd
InMemoryDataSource::SetReverseArcs(nsIRDFNode *, Assertion *)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryDataSource::AllocEntry(void *, void const *)
PL_HashTableRawAdd
PL_HashTableAdd
InMemoryDataSource::SetForwardArcs(nsIRDFResource *, Assertion *)

<xptiTypelibGuts>
__builtin_new
__builtin_vec_new
xptiTypelibGuts::xptiTypelibGuts(XPTHeader *)

<nsFontMetricsGTK>
__builtin_new
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsFontMetricsGTK>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
__builtin_vec_new
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Calloc
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_vec_new
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsFontMetricsGTK>
__builtin_new
nsFontWeight::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontNode::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontStretch::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
__builtin_new
nsFontStyle::operator new(unsigned int)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Realloc
PR_vsxprintf
PR_WaitForPollableEvent
PR_vsmprintf
PR_smprintf
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Malloc
PR_vsxprintf
PR_WaitForPollableEvent
PR_WaitForPollableEvent
PR_WaitForPollableEvent
PR_vsmprintf
PR_smprintf
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Realloc
PR_vsxprintf
PR_WaitForPollableEvent
PR_WaitForPollableEvent
PR_WaitForPollableEvent
PR_vsmprintf
PR_smprintf
nsFontMetricsGTK::SearchNode(nsFontNode *, unsigned short)

<nsFontMetricsGTK>
PR_Realloc
nsFontMetricsGTK::PickASizeAndLoad(nsFontStretch *, nsFontCharSetInfo *, unsigned short)

<nsFontMetricsGTK>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsFontMetricsGTK>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsDrawingSurfaceGTK type_info function
nsFontMetricsGTK::Init(nsFont const &, nsIAtom *, nsIDeviceContext *)

<nsPluginTag>
__builtin_new
__builtin_vec_new
nsPluginTag::nsPluginTag(nsPluginInfo *)

<nsPluginTag>
__builtin_new
__builtin_vec_new
nsPluginTag::nsPluginTag(char const *, char const *, char const *, char const *const *, char const *const *, char const *const *, int)

<nsPluginTag>
__builtin_new
__builtin_vec_new
new_str(char const *)
nsPluginTag::nsPluginTag(nsPluginInfo *)

<nsPluginTag>
__builtin_new
__builtin_vec_new
new_str(char const *)
nsPluginTag::nsPluginTag(char const *, char const *, char const *, char const *const *, char const *const *, char const *const *, int)

<nsXBLPrototypeBinding>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsXBLPrototypeBinding::nsXBLPrototypeBinding(nsCString const &, nsIContent *, nsIXBLDocumentInfo *)

<nsXBLPrototypeBinding>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsXBLPrototypeBinding::nsXBLPrototypeBinding(basic_nsAReadableString<char> const &, nsIContent *, nsIXBLDocumentInfo *)

<nsXBLPrototypeBinding>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<nsXBLPrototypeBinding>
__builtin_new
nsISupportsKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<nsXBLPrototypeBinding>
__builtin_new
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<nsXBLPrototypeBinding>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsXBLPrototypeBinding::ConstructAttributeTable(nsIContent *)

<PresShell>
PR_Malloc
PL_ArenaAllocate
FrameArena::AllocateFrame(unsigned int, void **)

<PresShell>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
PresShell::SetAnonymousContentFor(nsIContent *, nsISupportsArray *)

<PresShell>
__builtin_new
nsISupportsKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
PresShell::SetAnonymousContentFor(nsIContent *, nsISupportsArray *)

<PresShell>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
PresShell::SetAnonymousContentFor(nsIContent *, nsISupportsArray *)

<StackArena>
PR_Malloc
StackBlock::StackBlock(void)
StackArena::StackArena(void)

<StackArena>
__builtin_new
__builtin_vec_new
StackArena::StackArena(void)

<FrameManager>
PR_Malloc
PL_ArenaAllocate
nsDST::NodeArena::AllocLeafNode(void)
nsDST::LeafNode::operator new(unsigned int, nsDST::NodeArena *)
nsDST::Insert(void *, void *, void **)

<FrameManager>
PR_Malloc
PL_ArenaAllocate
nsDST::NodeArena::AllocTwoNode(void)
nsDST::TwoNode::operator new(unsigned int, nsDST::NodeArena *)
nsDST::ConvertToTwoNode(nsDST::LeafNode **)
nsDST::Insert(void *, void *, void **)
FrameManager::SetPrimaryFrameFor(nsIContent *, nsIFrame *)

<FrameManager>
PR_Malloc
PL_ArenaAllocate
nsDST::NodeArena::AllocTwoNode(void)
nsDST::TwoNode::operator new(unsigned int, nsDST::NodeArena *)
nsDST::ConvertToTwoNode(nsDST::LeafNode **)
nsDST::Insert(void *, void *, void **)
FrameManager::SetFrameProperty(nsIFrame *, nsIAtom *, void *, void (*)(nsIPresContext *, nsIFrame *, nsIAtom *, void *))

<FrameManager>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
FrameHashTable::Put(void *, void *)
FrameManager::SetPlaceholderFrameFor(nsIFrame *, nsIFrame *)

<FrameManager>
__builtin_new
nsDST::NewMemoryArena(unsigned int)
FrameManager::Init(nsIPresShell *, nsIStyleSet *)

<UndisplayedMap>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
UndisplayedMap::AppendNodeFor(UndisplayedNode *, nsIContent *)

<UndisplayedMap>
__builtin_new
UndisplayedMap::AddNodeFor(nsIContent *, nsIContent *, nsIStyleContext *)

<PRLock>
PR_Calloc
PR_NewLock

<PRMonitor>
PR_Calloc
PR_NewMonitor

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
RDFServiceImpl::Init(void)

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
RDFServiceImpl::RegisterResource(nsIRDFResource *, int)

<RDFServiceImpl>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
RDFServiceImpl::RegisterLiteral(nsIRDFLiteral *, int)

<RDFServiceImpl>
PR_Malloc
nsRDFParserUtils::IsJavaScriptLanguage(nsString const &, char const **)
PL_NewHashTable
RDFServiceImpl::Init(void)

<RDFServiceImpl>
PR_Malloc
nsRDFParserUtils::IsJavaScriptLanguage(nsString const &, char const **)
PL_HashTableRawAdd
PL_HashTableAdd
RDFServiceImpl::RegisterDataSource(nsIRDFDataSource *, int)

<nsRDFResource>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsRDFResource::Init(char const *)

<nsHTMLEntities>
__builtin_new
__builtin_vec_new
nsHTMLEntities::AddRefTable(void)

<nsHTMLEntities>
__builtin_new
nsAVLTree::AddItem(void *)
nsHTMLEntities::AddRefTable(void)

<nsStaticCaseInsensitiveNameTable>
__builtin_new
__builtin_vec_new
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<CNavDTD>
__builtin_new
CNavDTD::CNavDTD(void)

<CNavDTD>
__builtin_new
__builtin_vec_new
InitializeElementTable(void)
CNavDTD::CNavDTD(void)

<CNavDTD>
__builtin_new
__builtin_vec_new
nsDeque::GrowCapacity(void)
nsDeque::Push(void *)
CNodeRecycler::RecycleNode(nsCParserNode *)
CNavDTD::CloseContainersTo(int, nsHTMLTag, int)

<COtherDTD>
__builtin_new
COtherDTD::COtherDTD(void)

<nsHTMLTokenizer>
__builtin_new
__builtin_vec_new
nsDeque::GrowCapacity(void)
nsDeque::Push(void *)
nsHTMLTokenizer::ScanDocStructure(int)

<nsHTMLTokenizer>
__builtin_new
__builtin_vec_new
nsDeque::GrowCapacity(void)
nsDeque::Push(void *)
nsHTMLTokenizer::AddToken(CToken *&, unsigned int, nsDeque *, nsTokenAllocator *)

<xptiWorkingSet>
__builtin_new
__builtin_vec_new
xptiWorkingSet::NewFileArray(unsigned int)

<DeviceContextImpl>
__builtin_new
__builtin_vec_new
DeviceContextImpl::DeviceContextImpl(void)

<DeviceContextImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
DeviceContextImpl::CreateFontAliasTable(void)

<DeviceContextImpl>
__builtin_new
FontAliasKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
DeviceContextImpl::AliasFont(nsString const &, nsString const &, nsString const &, int)

<nsCompressedMap>
__builtin_new
__builtin_vec_new
nsCompressedMap::nsCompressedMap(unsigned short *, unsigned int)

<nsHTMLDocument>
__builtin_new
__builtin_vec_new
nsHTMLDocument::nsHTMLDocument(void)

<nsXPCWrappedNativeClass>
__builtin_new
__builtin_vec_new
nsXPCWrappedNativeClass::BuildMemberDescriptors(XPCContext *)

<nsNetModuleMgr>
__builtin_new
__builtin_vec_new
nsNetModRegEntry::nsNetModRegEntry(char const *, nsINetNotify *, unsigned int *)
nsNetModuleMgr::RegisterModule(char const *, nsINetNotify *)

<nsProxyObjectManager>
__builtin_new
nsProxyObjectManager::nsProxyObjectManager(void)

<nsProxyObjectManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsProxyObjectManager::nsProxyObjectManager(void)

<nsProxyEventClass>
__builtin_new
__builtin_vec_new
nsProxyEventClass::nsProxyEventClass(nsID const &, nsIInterfaceInfo *)

<nsProxyEventClass>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsProxyEventClass::nsProxyEventClass(nsID const &, nsIInterfaceInfo *)

<nsProxyEventClass>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsProxyEventClass::nsProxyEventClass(nsID const &, nsIInterfaceInfo *)

<nsProxyEventObject>
__builtin_new
nsProxyEventKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsProxyEventObject::GetNewOrUsedProxy(nsIEventQueue *, int, nsISupports *, nsID const &)

<nsProxyEventObject>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsProxyEventObject::GetNewOrUsedProxy(nsIEventQueue *, int, nsISupports *, nsID const &)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_vec_new
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::HashContractID(char const *, nsID const &)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::Init(void)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::GetLoaderForType(char const *, nsIComponentLoader **)

<nsComponentManagerImpl>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::ContractIDToClassID(char const *, nsID *)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::PlatformPrePopulateRegistry(void)

<nsComponentManagerImpl>
PR_Malloc
bufio_SetBufferSize
nsXPTCStubBase::Sentinel9(void)
NR_RegSetBufferSize
nsRegistry::SetBufferSize(int)
nsComponentManagerImpl::AutoRegister(int, nsIFile *)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::HashContractID(char const *, nsID const &)

<nsComponentManagerImpl>
__builtin_new
nsComponentManagerImpl::RegisterComponentCommon(nsID const &, char const *, char const *, char const *, int, int, char const *)

<nsComponentManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::RegisterComponentCommon(nsID const &, char const *, char const *, char const *, int, int, char const *)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::HashContractID(char const *, nsID const &)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::RegisterFactory(nsID const &, char const *, char const *, nsIFactory *, int)

<nsComponentManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsComponentManagerImpl::ContractIDToClassID(char const *, nsID *)

<nsZipArchive>
__builtin_new
nsZipArchive::BuildFileList(void)

<nsCStringKey>
__builtin_new
nsCStringKey::Clone(void) const

<nsCStringKey>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCStringKey::Clone(void) const

<nsStaticCastInsensitiveNameTable>
__builtin_new
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsStaticCastInsensitiveNameTable>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsStaticCastInsensitiveNameTable>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsStaticCaseInsensitiveNameTable::Init(char const **, int)

<nsDrawingSurfaceGTK>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsDrawingSurfaceGTK type_info function

<nsNativeComponentLoader>
__builtin_new
nsNativeComponentLoader::Init(nsIComponentManager *, nsISupports *)

<nsNativeComponentLoader>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsNativeComponentLoader::Init(nsIComponentManager *, nsISupports *)

<nsNativeComponentLoader>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsNativeComponentLoader::CreateDll

<nsNativeComponentLoader>
__builtin_new
nsNativeComponentLoader::CreateDll(nsIFile *, char const *, long long *, long long *, nsDll **)

<nsNativeComponentLoader>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsNativeComponentLoader::CreateDll(nsIFile *, char const *, long long *, long long *, nsDll **)

<nsNativeComponentLoader>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsNativeComponentLoader::CreateDll(nsIFile *, char const *, long long *, long long *, nsDll **)

<nsDirectoryService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDirectoryService::Set(char const *, nsISupports *)

<nsDirectoryService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDirectoryService::Set(char const *, nsISupports *)

<nsDirectoryService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsDirectoryService::Init(char const *)

<nsResProtocolHandler>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsResProtocolHandler::AppendSubstitution(char const *, char const *)

<nsResProtocolHandler>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsResProtocolHandler::nsResProtocolHandler(void)

<nsResProtocolHandler>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsResProtocolHandler::AppendSubstitution(char const *, char const *)

<nsChromeRegistry>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsChromeRegistry::LoadDataSource(nsCString const &, nsIRDFDataSource **, int, char const *)

<nsChromeRegistry>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsChromeRegistry::LoadDataSource(nsCString const &, nsIRDFDataSource **, int, char const *)

<nsChromeRegistry>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsChromeRegistry::LoadDataSource(nsCString const &, nsIRDFDataSource **, int, char const *)

<nsZipReaderCache>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsZipReaderCache::GetZip(nsIFile *, nsIZipReader **)

<nsZipReaderCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsZipReaderCache::GetZip(nsIFile *, nsIZipReader **)

<nsZipReaderCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsZipReaderCache::nsZipReaderCache(void)

<nsZipReaderCache>
__builtin_new
nsZipReaderCache::GetZip(nsIFile *, nsIZipReader **)

<nsXBLDocumentInfo>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLDocumentInfo::SetPrototypeBinding(basic_nsAReadableString<char> const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
__builtin_new
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXBLDocumentInfo::SetPrototypeBinding(nsCString const &, nsIXBLPrototypeBinding *)

<nsXBLDocumentInfo>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsXBLDocumentInfo::SetPrototypeBinding(basic_nsAReadableString<char> const &, nsIXBLPrototypeBinding *)

<nsXULPrototypeCache>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXULPrototypeCache::PutXBLDocumentInfo(nsIXBLDocumentInfo *)

<nsXULPrototypeCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXULPrototypeCache::PutXBLDocumentInfo(nsIXBLDocumentInfo *)

<nsXULPrototypeCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsXULPrototypeCache::PutStyleSheet(nsICSSStyleSheet *)

<nsXULPrototypeCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsXULPrototypeCache::nsXULPrototypeCache(void)

<nsExternalHelperAppService>
__builtin_new
nsExternalHelperAppService::nsExternalHelperAppService(void)

<nsExternalHelperAppService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsExternalHelperAppService::AddMimeInfoToCache(nsIMIMEInfo *)

<nsExternalHelperAppService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsExternalHelperAppService::AddMimeInfoToCache(nsIMIMEInfo *)

<nsExternalHelperAppService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsExternalHelperAppService::AddMimeInfoToCache(nsIMIMEInfo *)

<nsCategoryManager>
__builtin_new
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
CategoryNode::CategoryNode(void)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsCategoryManager::nsCategoryManager(void)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
CategoryNode::CategoryNode(void)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsCategoryManager::nsCategoryManager(void)

<nsCategoryManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsCategoryManager::AddCategoryEntry(char const *, char const *, char const *, int, int, char **)

<nsScriptSecurityManager>
__builtin_new
nsScriptSecurityManager::EnumeratePolicyCallback(char const *, void *)

<nsScriptSecurityManager>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsScriptSecurityManager::EnumeratePolicyCallback(char const *, void *)

<nsScriptSecurityManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsScriptSecurityManager::InitPrefs(void)

<nsScriptSecurityManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsScriptSecurityManager::EnumeratePolicyCallback(char const *, void *)

<nsStringBundleService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsStringBundleService::insertIntoCache(nsIStringBundle *, nsCStringKey *)

<nsStringBundleService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsStringBundleService::nsStringBundleService(void)

<nsStringBundleService>
PR_Malloc
PL_ArenaAllocate
nsStringBundleService::insertIntoCache(nsIStringBundle *, nsCStringKey *)

<CSSStyleSheetImpl>
__builtin_new
CSSStyleSheetImpl::CSSStyleSheetImpl(void)

<CSSStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
CSSStyleSheetImpl::CheckRuleForAttributes(nsICSSRule *)

<CSSStyleSheetImpl>
__builtin_new
AtomKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
CSSStyleSheetImpl::CheckRuleForAttributes(nsICSSRule *)

<CSSStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
CSSStyleSheetImpl::CheckRuleForAttributes(nsICSSRule *)

<CSSStyleSheetInner>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
CSSStyleSheetInner::CSSStyleSheetInner(nsICSSStyleSheet *)

<HTMLStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
HTMLStyleSheetImpl::HTMLStyleSheetImpl(void)

<HTMLStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawRemove
nsHashtable::Remove(nsHashKey *)
HTMLStyleSheetImpl::DropMappedAttributes(nsIHTMLMappedAttributes *)

<HTMLStyleSheetImpl>
__builtin_new
AttributeKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
HTMLStyleSheetImpl::UniqueMappedAttributes(nsIHTMLMappedAttributes *, nsIHTMLMappedAttributes *&)

<HTMLStyleSheetImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
HTMLStyleSheetImpl::UniqueMappedAttributes(nsIHTMLMappedAttributes *, nsIHTMLMappedAttributes *&)

<nsStyleContextData>
__builtin_new
nsStyleContextData::Create(nsIPresContext *)

<nsStyleContent>
__builtin_new
__builtin_vec_new
nsStyleContent::AllocateCounterResets(unsigned int)

<nsStyleContent>
__builtin_new
__builtin_vec_new
nsStyleContent::AllocateContents(unsigned int)

<xptiManifest>
__builtin_new
xptiManifest::Read(xptiInterfaceInfoManager *, xptiWorkingSet *)

<xptiManifest>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
xptiManifest::Read(xptiInterfaceInfoManager *, xptiWorkingSet *)

<CSSParserImpl>
__builtin_new
SelectorList::AddSelector(nsCSSSelector const &)
CSSParserImpl::ParseSelectorGroup(int &, SelectorList *&)

<CSSParserImpl>
__builtin_new
CSSParserImpl::ParseContent(int &, nsICSSDeclaration *, int &)

<RuleHash>
__builtin_new
RuleHash::AppendRuleToTable(nsHashtable &, nsIAtom *, nsICSSStyleRule *)

<RuleHash>
__builtin_new
AtomKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
RuleHash::AppendRuleToTable(nsHashtable &, nsIAtom *, nsICSSStyleRule *)

<RuleHash>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
RuleHash::RuleHash(void)

<RuleHash>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
RuleHash::AppendRuleToTable(nsHashtable &, nsIAtom *, nsICSSStyleRule *)

<RuleHash>
__builtin_new
__builtin_vec_new
RuleHash::EnumerateAllRules(nsIAtom *, nsIAtom *, nsVoidArray const &, void (*)(nsICSSStyleRule *, void *), void *)

<nsCSSSelector>
__builtin_new
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAtomList::nsAtomList(nsAtomList const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<nsCSSSelector>
__builtin_new
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsAttrSelector::nsAttrSelector(nsAttrSelector const &)
nsCSSSelector::nsCSSSelector(nsCSSSelector const &)

<StyleSetImpl>
__builtin_new
nsSupportsArray::Create(nsISupports *, nsID const &, void **)
NS_NewISupportsArray(nsISupportsArray **)
StyleSetImpl::EnsureArray(nsISupportsArray **)

<nsPersistentProperties>
__builtin_new
nsPersistentProperties::Create(nsISupports *, nsID const &, void **)

<nsPersistentProperties>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const
nsPersistentProperties::SetStringProperty(nsString const &, nsString &, nsString &)

<nsPersistentProperties>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
nsPersistentProperties::SetStringProperty(nsString const &, nsString &, nsString &)

<nsPersistentProperties>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsPersistentProperties::nsPersistentProperties(void)

<nsCSSValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsCppSharedAllocator<unsigned short>::allocate(unsigned int, void const *)
nsCRT::strndup(unsigned short const *, unsigned int)
nsCRT::strdup(unsigned short const *)
nsString::ToNewUnicode(void) const
nsCSSValue::operator=(nsCSSValue const &)

<nsCSSValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsCSSValue::SetStringValue(basic_nsAReadableString<unsigned short> const &, nsCSSUnit)

<nsStringKey>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsStringKey::Clone(void) const

<nsTextFragment>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsTextFragment::SetTo(unsigned short const *, int)

<nsTextFragment>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
char * AllocateStringCopy<unsigned short, char>(basic_nsAReadableString<unsigned short> const &, char *)
ToNewCString(basic_nsAReadableString<unsigned short> const &)
nsTextFragment::operator=(basic_nsAReadableString<unsigned short> const &)

<nsSimpleURI>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsString::ToNewCString(void) const
nsSimpleURI::SetSpec(char const *)

<nsNodeInfoManager>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
nsNodeInfoManager::GetNodeInfo(nsIAtom *, nsIAtom *, int, nsINodeInfo *&)

<nsNodeInfoManager>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsNodeInfoManager::nsNodeInfoManager(void)

<xptiInterfaceInfo>
XPT_ArenaMalloc
xptiInterfaceInfo::CopyName(char const *, xptiWorkingSet *)

<xptiInterfaceInfo>
__builtin_new
xptiInterfaceInfo::PartiallyResolveLocked(XPTInterfaceDescriptor *, xptiWorkingSet *)

<xpti-unclassified>
XPT_ArenaMalloc

<pthread-unclassified>
siglongjmp
pthread_create

<X-unclassified>
XkbAllocClientMap

<X-unclassified>
_XiCheckExtInit

<X-unclassified>
_XAllocScratch

<X-unclassified>
XUnlockDisplay

<X-unclassified>
_XlcCreateLC

<X-unclassified>
XkbUseExtension

<X-unclassified>
_XimServerDestroy

<X-unclassified>
_XlcAddCharSet

<X-unclassified>
XInitExtension

<X-unclassified>
_XlcGenericLoader

<X-unclassified>
_XwcDefaultDrawImageString

<X-unclassified>
_XlcAddCT

<X-unclassified>
XShmCreateImage

<X-unclassified>
_XFreeAtomTable

<X-unclassified>
XCreateRegion

<X-unclassified>
XIntersectRegion

<X-unclassified>
_XlcCreateLocaleDataBase

<X-unclassified>
_XUpdateAtomCache

<X-unclassified>
XrmMergeDatabases

<X-unclassified>
XrmParseCommand

<X-unclassified>
XOpenDisplay

<X-unclassified>
XCreateGC

<X-unclassified>
_XlcResetConverter

<X-unclassified>
_XEnq

<X-unclassified>
_XimLcctstowcs

<X-unclassified>
XtMalloc

<X-unclassified>
XtCalloc

<X-unclassified>
Xpermalloc

<X-unclassified>
_XlcCreateDefaultCharSet

<X-unclassified>
_XimLocalSetICValues

<X-unclassified>
_XimLocalCreateIC

<X-unclassified>
_XlcSetConverter

<X-unclassified>
_XkbGetCharset

<gtk-unclassified>
g_malloc

<gtk-unclassified>
g_realloc

<gtk-unclassified>
g_malloc0

<dl-unclassified>
_dl_lookup_versioned_symbol_skip

<dl-unclassified>
_dl_dst_substitute

<dl-unclassified>
_dl_map_object_deps

<dl-unclassified>
_dl_map_object

<dl-unclassified>
_dl_debug_message

<nsRegistry>
PR_Malloc
bufio_SetBufferSize
nsXPTCStubBase::Sentinel9(void)
NR_RegSetBufferSize
nsRegistry::SetBufferSize(int)

<nsXBLService>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsXBLService::nsXBLService(void)

<nsXBLService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsXBLService::nsXBLService(void)

<InMemoryDataSource>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::Alloc(unsigned int)
InMemoryAssertionEnumeratorImpl::operator new(unsigned int, nsFixedSizeAllocator &)

<nsGenericModule>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsGenericModule::GetClassObject(nsIComponentManager *, nsID const &, nsID const &, void **)

<nsGenericModule>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsGenericModule::GetClassObject(nsIComponentManager *, nsID const &, nsID const &, void **)

<nsGenericModule>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsGenericModule::nsGenericModule(char const *, unsigned int, nsModuleComponentInfo *, void (*)(nsIModule *))

<nsUNIXCharset>
gettext
gettext
setlocale
setlocale
nsUNIXCharset::nsUNIXCharset(void)

<nsLocaleService>
textdomain
textdomain
setlocale
setlocale
nsLocaleService::nsLocaleService(void)

<nsLocaleService>
setlocale
setlocale
setlocale
nsLocaleService::nsLocaleService(void)

<nsLocale>
PR_Malloc
PL_ArenaFinish
PL_NewHashTable
nsLocale::nsLocale(void)

<nsLocale>
PR_Malloc
PL_ArenaFinish
PL_HashTableRawAdd
PL_HashTableAdd
nsLocale::AddCategory(unsigned short const *, unsigned short const *)

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::nsServiceManagerImpl(void)
NS_NewServiceManager(nsIServiceManager **)

<nsServiceManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsServiceManagerImpl::nsServiceManagerImpl(void)

<nsServiceManagerImpl>
__builtin_new
nsIDKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsServiceManagerImpl::GetService(nsID const &, nsID const &, nsISupports **, nsIShutdownListener *)

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::nsServiceManagerImpl(void)
NS_NewServiceManager(nsIServiceManager **)

<nsServiceManagerImpl>
__builtin_new
nsServiceManagerImpl::GetService(nsID const &, nsID const &, nsISupports **, nsIShutdownListener *)

<nsServiceManagerImpl>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsServiceManagerImpl::GetService(nsID const &, nsID const &, nsISupports **, nsIShutdownListener *)

<nsXMLElement>
__builtin_new
nsGenericContainerElement::SetAttribute(nsINodeInfo *, basic_nsAReadableString<unsigned short> const &, int)
nsGenericXMLElement::SetAttribute(nsINodeInfo *, basic_nsAReadableString<unsigned short> const &, int)

<nsGCCache>
__builtin_new
nsGCCache::nsGCCache(void)

<nsPref>
_init
PL_HashTableRawAdd
PL_HashTableAdd
pref_HashPref

<nsPref>
_init
PL_NewHashTable
PREF_Init

<nsPref>
pref_HashPref

<nsPref>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsPref::nsPref(void)

<nsPref>
PREF_RegisterCallback

<nsThread>
PR_Calloc
PR_SetThreadPrivate
nsThread::RegisterThreadSelf(void)

<nsFontGTK>
XFreeFont

<nsFontGTK>
__builtin_new
nsFontGTK::operator new(unsigned int)

<nsGenericContainerElement>
__builtin_new
nsCheapVoidArray::SwitchToVector(void)
nsCheapVoidArray::AppendElement(void *)
nsGenericContainerElement::AppendChildTo(nsIContent *, int)

<nsObserverService>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
__builtin_new
NS_NewObserverList(nsIObserverList **)
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
__builtin_new
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsObserverService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsObserverService::GetObserverList(nsString const &, nsIObserverList **)

<nsViewManager2>
__builtin_new
nsViewManager2::AddToDisplayList(int *, nsIView *, nsRect &, nsRect &, unsigned int, int, int)

<nsBindingManager>
__builtin_new
nsISupportsKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<nsBindingManager>
__builtin_new
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<nsBindingManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<nsBindingManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsBindingManager::SetBinding(nsIContent *, nsIXBLBinding *)

<NameSpaceManagerImpl>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsLayoutUtils::GetDynamicScriptContext(JSContext *, nsIScriptContext **)
NameSpaceManagerImpl::NameSpaceManagerImpl(void)

<NameSpaceManagerImpl>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
NameSpaceManagerImpl::RegisterNameSpace(basic_nsAReadableString<unsigned short> const &, int &)

<nsErrorService>
__builtin_new
nsErrorService::Create(nsISupports *, nsID const &, void **)

<nsErrorService>
__builtin_new
nsVoidKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsInt2StrHashtable::Put(unsigned int, char const *)
nsErrorService::RegisterErrorStringBundleKey(unsigned int, char const *)

<nsErrorService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsInt2StrHashtable::Put(unsigned int, char const *)
nsErrorService::RegisterErrorStringBundleKey(unsigned int, char const *)

<nsDocument>
__builtin_new
ArenaImpl::Create(nsISupports *, nsID const &, void **)
NS_NewHeapArena(nsIArena **, unsigned int)
nsDocument::Init(void)

<nsDocument>
__builtin_new
nsDocument::SetHeaderData(nsIAtom *, basic_nsAReadableString<unsigned short> const &)

<XPCContext>
__builtin_new
XPCContext::newXPCContext(XPCJSRuntime *, JSContext *)

<nsEventQueueService>
__builtin_new
nsEventQueueServiceImpl::Create(nsISupports *, nsID const &, void **)

<nsEventQueueService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsEventQueueServiceImpl::nsEventQueueServiceImpl(void)

<nsEventListenerManager>
__builtin_new
nsEventListenerManager::AddEventListener(nsIDOMEventListener *, nsID const &, int, int)

<nsEventListenerManager>
PR_Malloc
nsEventListenerManager::AddEventListener(nsIDOMEventListener *, nsID const &, int, int)

<nsCParserNode>
__builtin_new
nsCParserNode::AddAttribute(CToken *)

<nsCParserNode>
__builtin_new
__builtin_vec_new
nsDeque::GrowCapacity(void)
nsDeque::Push(void *)
nsCParserNode::AddAttribute(CToken *)

<nsSocketTransportService>
PR_Malloc
nsSocketTransportService::Init(void)

<nsSocketTransport>
PR_Malloc
nsSocketTransport::AsyncWrite(nsIInputStream *, nsIStreamObserver *, nsISupports *)

<nsSocketTransport>
PR_Malloc
_PR_Getfd
PR_GetConnectStatus
PR_Socket
PR_OpenTCPSocket
nsSocketTransport::doConnection(short)

<CompositeDataSourceImpl>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
CompositeDataSourceImpl::CompositeDataSourceImpl(void)

<nsHTMLValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsHTMLValue::nsHTMLValue(basic_nsAReadableString<unsigned short> const &, nsHTMLUnit)

<nsHTMLValue>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
unsigned short * AllocateStringCopy<unsigned short, unsigned short>(basic_nsAReadableString<unsigned short> const &, unsigned short *)
ToNewUnicode(basic_nsAReadableString<unsigned short> const &)
nsHTMLValue::SetStringValue(basic_nsAReadableString<unsigned short> const &, nsHTMLUnit)

<nsMemCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsMemCache::GetCachedNetData(char const *, unsigned int, nsINetDataCacheRecord **)

<nsMemCache>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsMemCache::Init(void)

<nsMemCache>
__builtin_new
nsOpaqueKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsMemCache::GetCachedNetData(char const *, unsigned int, nsINetDataCacheRecord **)

<nsMemCache>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsOpaqueKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsMemCache::GetCachedNetData(char const *, unsigned int, nsINetDataCacheRecord **)

<nsMemCache>
__builtin_new
nsOpaqueKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsMemCache::GetCachedNetData(char const *, unsigned int, nsINetDataCacheRecord **)

<nsMemCache>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsOpaqueKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsMemCache::GetCachedNetData(char const *, unsigned int, nsINetDataCacheRecord **)

<nsMemCacheRecord>
__builtin_new
__builtin_vec_new
nsMemCacheRecord::SetMetaData(unsigned int, char const *)

<nsMemCacheRecord>
__builtin_new
__builtin_vec_new
nsMemCacheRecord::Init(char const *, unsigned int, unsigned int, nsMemCache *)

<nsTextFormatter>
PR_Realloc
nsXPIDLString type_info function
nsXPIDLString type_info function
nsTextFormatter::vsmprintf(unsigned short const *, void *)
nsTextFormatter::smprintf(unsigned short const *,...)

<nsTextFormatter>
PR_Malloc
nsXPIDLString type_info function
nsXPIDLString type_info function
nsTextFormatter::vsmprintf(unsigned short const *, void *)

<nsTextFormatter>
PR_Realloc
nsXPIDLString type_info function
nsXPIDLString type_info function
nsTextFormatter::vsmprintf(unsigned short const *, void *)

<nsPresState>
__builtin_new
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

<nsPresState>
__builtin_new
nsPresState::SetStatePropertyAsSupports(basic_nsAReadableString<unsigned short> const &, nsISupports *)

<nsPresState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsPresState::SetStatePropertyAsSupports(basic_nsAReadableString<unsigned short> const &, nsISupports *)

<nsPresState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

<nsPresState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsPresState::SetStatePropertyAsSupports(basic_nsAReadableString<unsigned short> const &, nsISupports *)

<nsPresState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

<nsPresState>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsSupportsWStringImpl::SetDataWithLength(unsigned int, unsigned short const *)
nsSupportsWStringImpl::SetData(unsigned short const *)
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

<nsPresState>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsPresState::SetStatePropertyAsSupports(basic_nsAReadableString<unsigned short> const &, nsISupports *)

<nsPresState>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

<nsPresState>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsSupportsWStringImpl::SetDataWithLength(unsigned int, unsigned short const *)
nsSupportsWStringImpl::SetData(unsigned short const *)
nsPresState::SetStateProperty(basic_nsAReadableString<unsigned short> const &, basic_nsAReadableString<unsigned short> const &)

#----------------------------------------------------------------------
# Imagelib Stuff
#

<ImageRequestImpl>
__builtin_new
ImageRequestImpl::AddObserver(nsIImageRequestObserver *)

<ImageRequestImpl>
PR_Malloc
XP_AddObserver
ImageRequestImpl::Init(void *, char const *, nsIImageRequestObserver *, unsigned int const *, unsigned int, unsigned int, unsigned int, ilINetContext *)

<imglib-unclassified>
__builtin_new
ImageNetContextImpl::GetURL(ilIURL *, ImgCachePolicy, ilINetReader *, int)

# il_group_notify() is really a call to a static rounting il_init_scaling()
<imglib-scaling>
PR_Malloc
il_group_notify(_IL_GroupContext *, long)
il_size(il_container_struct *)
ImgDCallbk::ImgDCBImageSize(void)

<imglib-gifdecode>
PR_Calloc
il_gif_write(il_container_struct *, unsigned char const *, int)

<imglib-gifdecode>
PR_Malloc
il_gif_write(il_container_struct *, unsigned char const *, int)

<gif_struct>
PR_Calloc
il_gif_init(il_container_struct *)

<IL_ImageReq>
PR_Calloc
IL_GetImage

<imglib-container-stuff>
PR_Calloc
il_get_container(_IL_GroupContext *, ImgCachePolicy, char const *, _NI_IRGB *, IL_DitherMode, int, int, int)

<IL_ColorSpace>
PR_Calloc
IL_CreateTrueColorSpace

<IL_Pixmap>
PR_Calloc
il_size(il_container_struct *)
ImgDCallbk::ImgDCBImageSize(void)

<IL_ColorSpace>
PR_Calloc
IL_CreateGreyScaleColorSpace

<imglib-gifcompat>
PR_Malloc
il_BACat(char **, unsigned int, char const *, unsigned int)

<imglib-gifcompat>
PR_Realloc
il_BACat(char **, unsigned int, char const *, unsigned int)

<ImageConsumer>
PR_Malloc
ImageConsumer::OnStartRequest(nsIChannel *, nsISupports *)

# These are really called from `static' routines in ilclient.cpp,
# *not* ImgDCallbk::CreateInstance()
<imglib-list>
PR_Calloc
ImgDCallbk::CreateInstance(nsID const &, il_container_struct *, nsID const &, void **)

#----------------------------------------------------------------------

<nsImageGTK>
__builtin_new
__builtin_vec_new
nsImageGTK::Init(int, int, int, nsMaskRequirements)

#----------------------------------------------------------------------

<nsLayoutHistoryState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsLayoutHistoryState::nsLayoutHistoryState(void)

<nsLayoutHistoryState>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsLayoutHistoryState::AddState(unsigned int, nsIPresState *, nsIStatefulFrame::StateType)

<nsLayoutHistoryState>
__builtin_new
nsVoidKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsLayoutHistoryState::AddState(unsigned int, nsIPresState *, nsIStatefulFrame::StateType)

<nsCookieService>
PR_Realloc
Local_SACat(char **, char const *)
COOKIE_GetCookie(char *)

<nsCookieService>
PR_Malloc
cookie_IsFromHost(_cookie_CookieStruct *, char *)

<nsReplacementPolicy>
PR_Realloc
nsMemoryImpl::Realloc(void *, unsigned int)
nsMemory::Realloc(void *, unsigned int)
nsReplacementPolicy::AssociateCacheEntryWithRecord(nsINetDataCacheRecord *, nsINetDataCache *, nsCachedNetData **)

<nsReplacementPolicy>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsReplacementPolicy::Init(unsigned int)

<nsHTTPHandler>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsHTTPHandler::SetServerCapabilities(char const *, int, unsigned int)

<nsHTTPHandler>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsHTTPHandler::nsHTTPHandler(void)

<nsHTTPHandler>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsHTTPHandler::SetServerCapabilities(char const *, int, unsigned int)

<nsCachedNetData>
PR_Malloc
PL_ArenaAllocate
ArenaImpl::Alloc(unsigned int)
nsCachedNetData::operator new(unsigned int, nsIArena *)

<ns4xPluginStreamListener>
PR_Malloc
ns4xPluginStreamListener::OnDataAvailable(nsIPluginStreamInfo *, nsIInputStream *, unsigned int)

<nsSegmentedBuffer>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsSegmentedBuffer::AppendNewSegment(void)

<nsAuthURLParser>
PL_strndup
ExtractString

<nsJAR>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
__17nsObjectHashtablePFP9nsHashKeyPvPv_PvPvPFP9nsHashKeyPvPv_iT2Uii
nsJAR::nsJAR(void)

<nsStreamConverterService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsStreamConverterService::Init(void)

<nsLayoutUtils>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsLayoutUtils::GetDynamicScriptContext(JSContext *, nsIScriptContext **)

<nsDNSService>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDNSService::GetLookupEntry(char const *, nsDNSLookup **)

<nsDNSService>
__builtin_new
nsDNSService::GetLookupEntry(char const *, nsDNSLookup **)

<nsDNSService>
__builtin_new
nsDNSService::Lookup(char const *, nsIDNSListener *, nsISupports *, nsIRequest **)

<nsDNSService>
__builtin_new
nsCStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsDNSService::GetLookupEntry(char const *, nsDNSLookup **)

<nsDNSLookup>
gethostbyname2
PR_GetIPNodeByName
nsDNSLookup::InitiateLookup(void)

<nsDNSLookup>
__builtin_new
nsSupportsArray::Create(nsISupports *, nsID const &, void **)
NS_NewISupportsArray(nsISupportsArray **)
nsDNSLookup::Init(char const *)

<nsFormControlList>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsFormControlList::AddElementToTable(nsIFormControl *, basic_nsAReadableString<unsigned short> const &)

<nsFormControlList>
__builtin_new
nsFormControlList::AddElementToTable(nsIFormControl *, basic_nsAReadableString<unsigned short> const &)

<nsFormControlList>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsFormControlList::AddElementToTable(nsIFormControl *, basic_nsAReadableString<unsigned short> const &)

<nsFormControlList>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableInit__FP11PLHashTableUiPFPCv_UiPFPCvPCv_iT3PC14PLHashAllocOpsPv
nsHashtable::nsHashtable(unsigned int, int)
nsSupportsHashtable::nsSupportsHashtable(unsigned int, int)
nsFormControlList::AddElementToTable(nsIFormControl *, basic_nsAReadableString<unsigned short> const &)

<nsControllerCommandManager>
PR_Malloc
PL_HashTableFinalize(PLHashTable *)
PL_HashTableRawAdd
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsControllerCommandManager::RegisterCommand(unsigned short const *, nsIControllerCommand *)

<nsControllerCommandManager>
__builtin_new
nsStringKey::Clone(void) const
nsHashtable::Put(nsHashKey *, void *)
nsSupportsHashtable::Put(nsHashKey *, nsISupports *, nsISupports **)
nsControllerCommandManager::RegisterCommand(unsigned short const *, nsIControllerCommand *)

<nsConsoleService>
PR_Malloc
nsMemoryImpl::Alloc(unsigned int)
nsMemory::Alloc(unsigned int)
nsConsoleService::nsConsoleService(void)

<nsGenericElement>
PR_Malloc
nsGenericElement::GetDOMSlots(void)

<HTMLAttribute>
__builtin_new
HTMLAttribute::CopyHTMLAttributes(HTMLAttribute *, HTMLAttribute **)

<HTMLAttributesImpl>
__builtin_new
HTMLAttributesImpl::SetAttributeFor(nsIAtom *, basic_nsAReadableString<unsigned short> const &, int, nsIHTMLContent *, nsIHTMLStyleSheet *)

<HTMLAttributesImpl>
__builtin_new
nsHTMLMappedAttributes::SetAttribute(nsIAtom *, basic_nsAReadableString<unsigned short> const &)
HTMLAttributesImpl::SetAttributeFor(nsIAtom *, basic_nsAReadableString<unsigned short> const &, int, nsIHTMLContent *, nsIHTMLStyleSheet *)

<HTMLAttributesImpl>
__builtin_new
HTMLAttributesImpl::SetAttributeFor(nsIAtom *, nsHTMLValue const &, int, nsIHTMLContent *, nsIHTMLStyleSheet *, int &)

<HTMLAttributesImpl>
__builtin_new
__builtin_vec_new
HTMLAttributesImpl::SetAttributeName(nsIAtom *, int &)

<HTMLAttributesImpl>
__builtin_new
nsHTMLMappedAttributes::SetAttribute(nsIAtom *, nsHTMLValue const &)
HTMLAttributesImpl::SetAttributeFor(nsIAtom *, nsHTMLValue const &, int, nsIHTMLContent *, nsIHTMLStyleSheet *, int &)

<nsLineBox>
__builtin_new
nsLineBox::SetCombinedArea(nsRect const &)

<nsEntityConverter>
__builtin_new
__builtin_vec_new
nsEntityConverter::LoadVersionPropertyFile(void)

<nsTableFrame>
__builtin_new
__builtin_vec_new
nsTableFrame::nsTableFrame(void)

<nsTableFrame>
__builtin_new
__builtin_vec_new
nsTableFrame::BalanceColumnWidths(nsIPresContext *, nsHTMLReflowState const &, nsSize const &, nsSize *)

<nsTableFrame>
__builtin_new
nsTableFrame::Init(nsIPresContext *, nsIContent *, nsIFrame *, nsIStyleContext *, nsIFrame *)

<nsTableCellFrame>
__builtin_new
nsTableCellFrame::GetFrameName(nsString &) const

<nsCellMap>
__builtin_new
nsCellMap::AppendCell(nsTableCellMap &, nsTableCellFrame &, int, int)

<nsCellMap>
__builtin_new
nsCellMap::Grow(nsTableCellMap &, int, int)

<nsTableCellMap>
__builtin_new
nsTableCellMap::InsertGroupCellMap(nsTableRowGroupFrame &, nsTableRowGroupFrame *&)

<nsTableCellMap>
__builtin_new
nsTableCellMap::AddColsAtEnd(unsigned int)

<nsEncoderSupport>
__builtin_new
__builtin_vec_new
nsEncoderSupport::nsEncoderSupport(void)

<nsFrameImageLoader>
__builtin_new
Init__18nsFrameImageLoaderP14nsIPresContextP13nsIImageGroupRC8nsStringPCUiPC6nsSizeP8nsIFrame16nsImageAnimationPFP14nsIPresContextP19nsIFrameImageLoaderP8nsIFramePvUi_UiPvT9

<nsFrameImageLoader>
__builtin_new
AddFrame__18nsFrameImageLoaderP8nsIFramePFP14nsIPresContextP19nsIFrameImageLoaderP8nsIFramePvUi_UiPvT3


<nsFloaterCacheFreeList>
__builtin_new
nsFloaterCacheFreeList::Alloc(void)

<nsDocLoaderImpl>
__builtin_new
nsDocLoaderImpl::AddChannelInfo(nsIChannel *)

<nsTokenAllocator>
PR_Malloc
PL_ArenaAllocate
nsFixedSizeAllocator::AddBucket(unsigned int)
nsFixedSizeAllocator::Init(char const *, unsigned int const *, int, int, int)
nsTokenAllocator::nsTokenAllocator(void)

<SinkContext>
__builtin_new
__builtin_vec_new
SinkContext::AddText(nsString const &)

<SinkContext>
__builtin_new
__builtin_vec_new
SinkContext::GrowStack(void)

<nsParser>
__builtin_new
nsParser::Parse(nsIURI *, nsIStreamObserver *, int, void *, nsDTDMode)

<nsParser>
__builtin_new
__builtin_vec_new
nsParser::OnDataAvailable(nsIChannel *, nsISupports *, nsIInputStream *, unsigned int, unsigned int)

<nsStorageStream>
__builtin_new
nsStorageStream::Init(unsigned int, unsigned int, nsIMemory *)

<nsEntryStack>
__builtin_new
__builtin_vec_new
nsEntryStack::EnsureCapacityFor(int, int)
