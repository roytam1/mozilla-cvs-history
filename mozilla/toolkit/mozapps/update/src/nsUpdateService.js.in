/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Update Service.
 *
 * The Initial Developer of the Original Code is Ben Goodger.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Ben Goodger <ben@mozilla.org> (Original Author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

const NS_UPDATE_XMLNS = "http://www.mozilla.org/2005/app-update";

const PREF_APP_UPDATE_ENABLED   = "app.update.enabled";
const PREF_APP_UPDATE_MODE      = "app.update.mode";
const PREF_APP_UPDATE_INTERVAL  = "app.update.interval";
const PREF_APP_UPDATE_TIMER     = "app.update.timer";
const PREF_APP_UPDATE_URL       = "app.update.url";
const PREF_APP_UPDATE_INPROGRESS      = "app.update.inProgress";
const PREF_APP_UPDATE_LASTUPDATEDATE  = "app.update.lastUpdateDate";
const PREF_APP_EXTENSIONS_VERSION     = "app.extensions.version";

const URI_UPDATE_PROMPT_DIALOG  = "chrome://mozapps/content/update/updateWizard.xul";

const nsIUpdateService        = Components.interfaces.nsIUpdateService;
const nsIUpdateItem           = Components.interfaces.nsIUpdateItem;
const nsIPrefLocalizedString  = Components.interfaces.nsIPrefLocalizedString;

const Node = Components.interfaces.nsIDOMNode;

function APP_NS(aProperty) {
  return "http://www.mozilla.org/2004/app-rdf#" + aProperty;
}

var gApp    = null;
var gPref   = null;
var gOS     = null;
var gConsole= null;

/**
 * Logs a string to the error console. 
 * @param   string
 *          The string to write to the error console..
 */  
function LOG(string) {
  dump("*** " + string + "\n");
  gConsole.logStringMessage(string);
}

/**
 *
 */
function UpdatePrompt() {
}
UpdatePrompt.prototype = {
  /**
   * See nsIUpdateService.idl
   */
  showUpdateAvailable: function(type, updates, updateCount) {
    var ary = Components.classes["@mozilla.org/supports-array;1"]
                        .createInstance(Components.interfaces.nsISupportsArray);
    for (var i = 0; i < updateCount; ++i)
      ary.AppendElement(updates[i]);
      
    var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                       .getService(Components.interfaces.nsIWindowMediator);
    var win = wm.getMostRecentWindow("Update:Wizard");
    if (win) 
      win.focus();
    else {
      var ww = Components.classes["@mozilla.org/embedcomp/window-watcher;1"]
                         .getService(Components.interfaces.nsIWindowWatcher);
      ww.openWindow(null, URI_UPDATE_PROMPT_DIALOG, 
                    "", "chrome,centerscreen,dialog,titlebar", ary);
    }
  },
  
  /**
   * See nsISupports.idl
   */
  QueryInterface: function(iid) {
    if (!iid.equals(Components.interfaces.nsIUpdatePrompt) &&
        !iid.equals(Components.interfaces.nsISupports))
      throw Components.results.NS_ERROR_NO_INTERFACE;
    return this;
  }
};

/**
 * UpdateService
 * A Service for managing the discovery and installation of software updates.
 */
function UpdateService() {
  gApp  = Components.classes["@mozilla.org/xre/app-info;1"]
                    .getService(Components.interfaces.nsIXULAppInfo);
  gPref = Components.classes["@mozilla.org/preferences-service;1"]
                    .getService(Components.interfaces.nsIPrefBranch2);
  gOS   = Components.classes["@mozilla.org/observer-service;1"]
                    .getService(Components.interfaces.nsIObserverService);
  gConsole = Components.classes["@mozilla.org/consoleservice;1"]
                       .getService(Components.interfaces.nsIConsoleService);  
  
  this._makeTimer();

  // gPref.addObserver(PREF_UPDATE_APP_AUTOUPDATEENABLED, this, false);

  // Observe xpcom-shutdown to unhook pref branch observers above to avoid 
  // shutdown leaks.
  gOS.addObserver(this, "xpcom-shutdown", false);
}

UpdateService.prototype = {
  
  _timer: null,  
  _makeTimer: function() {
    if (!this._timer) 
      this._timer = Components.classes["@mozilla.org/timer;1"]
                              .createInstance(Components.interfaces.nsITimer);
    this._timer.cancel();
    this._timer.initWithCallback(this, 2000, 
                                 Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);
    return this._timer;
  },
  
  observe: function(subject, topic, data) {
    if (topic == "app-startup")
      dump("*** goats\n");  
  },
  
  _needsToPromptForUpdate: function(updates) {
//#ifdef MOZ_XULAPP  
    // First, check for Extension incompatibilities. These trump any preference
    // settings.
    var em = Components.classes["@mozilla.org/extensions/manager;1"]
                       .getService(Components.interfaces.nsIExtensionManager);
    var incompatibleList = { };
    for (var i = 0; i < updates.length; ++i) {
      var count = {};
      em.getIncompatibleItemList(gApp.ID, updates[i].extensionversion,
                                 nsIUpdateItem.TYPE_ADDON, count);
      if (count.value > 0)
        return true;
    }
//#endif  

    // Now, inspect user preferences.
    
    // No prompt necessary, silently update...
    return false;
  },
  
  notify: function(timer) {
    var self = this;
    var listener = {
      onProgress: function() { },
      onCheckComplete: function(updates, updateCount) {
        if (self._needsToPromptForUpdate(updates)) {
          var prompter = Components.classes["@mozilla.org/updates/update-prompt;1"]
                                   .createInstance(Components.interfaces.nsIUpdatePrompt);
          prompter.showUpdateAvailable(updates, updateCount);
        }
        else {
          this.downloadUpdates(updates, updateCount);
        }
        
        dump("*** checkComplete, there are " + updateCount + " updates.\n");
      },
      onError: function() { },
    }
    this.checkForUpdates(listener);
  },

  /**
   * 
   */
  checkForUpdates: function(listener) {
    var checker = new Checker();
    checker.findUpdates(listener);
  },
  
  /**
   * See nsISupports.idl
   */
  QueryInterface: function(iid) {
    if (!iid.equals(Components.interfaces.nsIApplicationUpdateService) &&
        !iid.equals(Components.interfaces.nsITimerCallback) && 
        !iid.equals(Components.interfaces.nsIObserver) && 
        !iid.equals(Components.interfaces.nsISupports))
      throw Components.results.NS_ERROR_NO_INTERFACE;
    return this;
  }
};

/**
 * Gets a preference value, handling the case where there is no default.
 * @param   func
 *          The name of the preference function to call, on nsIPrefBranch
 * @param   preference
 *          The name of the preference
 * @returns The value of the preference, or undefined if there was no
 *          user or default value.
 */
function getPref(func, preference) {
  try {
    return gPref[func](prefName);
  }
  catch (e) {
  }
  return undefined;
}

/**
 * Update Patch
 */
function UpdatePatch(type, url, hashfunction, hashvalue, size) {
  this.type = type;
  this.url = url;
  this.hashfunction = hashfunction;
  this.hashvalue = hashvalue;
  this.size = size;
}

/**
 * Update
 * Implements nsIUpdate
 */
function Update(type, version, extensionversion, detailsurl, patches) {
  this.type = type;
  this.version = version;
  this.extensionversion = extensionversion;
  this.detailsurl = detailsurl;
  this._patches = patches;
}

Update.prototype = {
  /**
   * 
   */
  get patchCount() {
    return this._patches.length;
  },
  
  /**
   *
   */
  getPatchAt: function(index) {
    return this._patches[index];
  },
   
  /**
   * See nsISupports.idl
   */
  QueryInterface: function(iid) {
    if (!iid.equals(Components.interfaces.nsIUpdate) &&
        !iid.equals(Components.interfaces.nsISupports))
      throw Components.results.NS_ERROR_NO_INTERFACE;
    return this;
  }
}; 
 

/**
 * UpdateNode
 * Parses an <update> element into a group of datastructures for the purpose
 * of determining the best path to take when updating. 
 */
function UpdateNode(node) {
  this.partial = { patches: [], size: 0 };
  this.complete = { patches: [], size: 0 };

  // Initialize the dependent patches
  for (var i = 0; i < node.childNodes.length; ++i) {
    var patchNode = node.childNodes[i];
    if (patchNode.nodeType != Node.ELEMENT_NODE)
      continue;
    var patch = new UpdatePatch(patchNode.getAttribute("type"),
                                patchNode.getAttribute("url"),
                                patchNode.getAttribute("hashfunction"),
                                patchNode.getAttribute("hashvalue"),
                                parseInt(patchNode.getAttribute("size")));
    var collection = patch.type == "partial" ? this.partial : this.complete;
    collection.patches.push(patch);
    collection.size += patch.size;
  }
  
  // Initialize this object
  this._type = node.getAttribute("type");
  this._version = node.getAttribute("version");
  this._extensionversion = node.getAttribute("extensionversion");
  this._detailsurl = node.getAttribute("detailsurl");
}

UpdateNode.prototype = {
  partial : { patches: [], size: 0 },
  complete: { patches: [], size: 0 },
  
  get completeUpdate() {
    return new Update(this._type, this._version, this._extensionversion,
                      this._detailsurl, this.complete.patches);
  },
  
  get partialUpdate() {
    return new Update(this._type, this._version, this._extensionversion,
                      this._detailsurl, this.partial.patches);
  },
};

/**
 * Checker
 */
function Checker() {
}
Checker.prototype = {
  _request  : null,
  _callback : null,
  observer  : null,
  
  get _updateURL() {
    try {
      return gPref.getComplexValue(PREF_APP_UPDATE_URL, nsIPrefLocalizedString).data;
    }
    catch (e) {
    }
    return null;
  },
  
  findUpdates: function(callback) {
    if (!callback)
      throw Components.results.NS_ERROR_NULL_POINTER;
      
    this._request = Components.classes["@mozilla.org/xmlextras/xmlhttprequest;1"]
                              .createInstance(Components.interfaces.nsIXMLHttpRequest);
    this._request.open("GET", this._updateURL, true);
    this._request.overrideMimeType("text/xml");
    this._request.setRequestHeader("Cache-Control", "no-cache");
    
    var self = this;
    this._request.onerror     = function(event) { self.onError(event);    };
    this._request.onload      = function(event) { self.onLoad(event);     };
    this._request.onprogress  = function(event) { self.onProgress(event); };

    LOG("Checker.findUpdates: sending request to " + this._updateURL);
    this._request.send(null);
    
    this._callback = callback;
  },
  
  onProgress: function(event) {
    dump("*** download progress: " + event.position + "/" + event.totalSize + "\n");
    this._callback.onProgress(event.target, event.position, event.totalSize);
  },
  
  get _updates() {
    var updatesElement = this._request.responseXML.documentElement;
    if (!updatesElement) {
      LOG("Checker.get_updates: empty updates document?!");
      return [];
    }
    
    var newestUpdate = { version: "0.0", update: null };
    var minorPartialPatches = [];
    var updates = [];
    var sizeOfPartialPatches = 0;
    for (var i = 0; i < updatesElement.childNodes.length; ++i) {
      var updateElement = updatesElement.childNodes[i];
      if (updateElement.nodeType != Node.ELEMENT_NODE)
        continue;
      if (updateElement.getAttribute("type") == "minor") {
        var updateNode = new UpdateNode(updateElement); 
        var updateVersion = updateElement.getAttribute("version");
        var vc = new VersionChecker();
        if (vc.compare(newestUpdate.version, updateVersion) < 0)
          newestUpdate = { version: updateVersion, updateNode: updateNode };
        minorPartialPatches = minorPartialPatches.concat(updateNode.partial.patches);
        updates.push(updateNode.partialUpdate);
        sizeOfPartialPatches += updateNode.partial.size;
      }
      else {
        dump("*** HANDLE MAJOR UPDATE TO = " + updateElement.getAttribute("version") + "\n");
      }
    }
    
    if (newestUpdate.updateNode && 
        sizeOfPartialPatches > newestUpdate.updateNode.complete.size) {
      LOG("Checker.get_updates: size of " + minorPartialPatches.length + " partial " + 
          "patches (" + sizeOfPartialPatches + ") exceeds size of newest " + 
          "full patch (" + newestUpdate.updateNode.complete.size + "), " + 
          "returning full patch instead.");
      return [newestUpdate.completeUpdate];
    }
    LOG("Checker.get_updates: size of " + minorPartialPatches.length + " partial " + 
        "patches (" + sizeOfPartialPatches + ") is less than size of newest " + 
        "full patch (" + newestUpdate.updateNode.complete.size + "), " + 
        "returning incremental patches.");
    return updates;
  },
  
  onLoad: function(event) {
    LOG("Checker.onLoad: request completed downloading document");
    
    // Notify the front end that we're complete
    if (this.observer)
      this.observer.onLoad(event.target);

    // Analyze the resulting DOM and determine the set of updates to install
    var updates = this._updates;
    
    // ... and tell the Update Service about what we discovered.
    this._callback.onCheckComplete(updates, updates.length);
  },
  
  onError: function(event) {
    LOG("Checker.onError: error during load");
    this._callback.onError(event.target);
  }
};

function Downloader() {
}
Downloader.prototype = {

};

function Manager() {
}
Manager.prototype = {

};

function Verifier() {
}
Verifier.prototype = {

};

function Installer() {
}
Installer.prototype = {

};

function UpdateItem () {
}
UpdateItem.prototype = {
  /**
   * See nsIUpdateService.idl
   */
  init: function(id, version, installLocationKey, minAppVersion, maxAppVersion,
                 name, downloadURL, iconURL, updateURL, type) {
    this._id                  = id;
    this._version             = version;
    this._installLocationKey  = installLocationKey;
    this._minAppVersion       = minAppVersion;
    this._maxAppVersion       = maxAppVersion;
    this._name                = name;
    this._downloadURL         = downloadURL;
    this._iconURL             = iconURL;
    this._updateURL           = updateURL;
    this._type                = type;
  },
  
  /**
   * See nsIUpdateService.idl
   */
  get id()                { return this._id;                },
  get version()           { return this._version;           },
  get installLocationKey(){ return this._installLocationKey;},
  get minAppVersion()     { return this._minAppVersion;     },
  get maxAppVersion()     { return this._maxAppVersion;     },
  get name()              { return this._name;              },
  get xpiURL()            { return this._downloadURL;       },
  get iconURL()           { return this._iconURL            },
  get updateRDF()         { return this._updateURL;         },
  get type()              { return this._type;              },

  /**
   * See nsIUpdateService.idl
   */
  get objectSource() {
    return { id                 : this._id, 
             version            : this._version, 
             installLocationKey : this._installLocationKey,
             minAppVersion      : this._minAppVersion,
             maxAppVersion      : this._maxAppVersion,
             name               : this._name, 
             xpiURL             : this._downloadURL, 
             iconURL            : this._iconURL, 
             updateRDF          : this._updateURL,
             type               : this._type 
           }.toSource();
  },
  
  /**
   * See nsISupports.idl
   */
  QueryInterface: function(iid) {
    if (!iid.equals(Components.interfaces.nsIUpdateItem) &&
        !iid.equals(Components.interfaces.nsISupports))
      throw Components.results.NS_ERROR_NO_INTERFACE;
    return this;
  }
};

function Version(aMajor, aMinor, aRelease, aBuild, aPlus) 
{ 
  this.major    = aMajor    || 0;
  this.minor    = aMinor    || 0;
  this.release  = aRelease  || 0;
  this.build    = aBuild    || 0;
  this.plus     = aPlus     || 0;
}

Version.prototype = {
  toString: function Version_toString() 
  {
    return this.major + "." + this.minor + "." + this.subminor + "." + this.release + (this.plus ? "+" : "");
  },
  
  compare: function (aVersion)
  {
    var fields = ["major", "minor", "release", "build", "plus"];
    
    for (var i = 0; i < fields.length; ++i) {
      var field = fields[i];
      if (aVersion[field] > this[field])
        return -1;
      else if (aVersion[field] < this[field])
        return 1;
    }
    return 0;
  }
}

function VersionChecker() {
}

VersionChecker.prototype = {
  /////////////////////////////////////////////////////////////////////////////
  // nsIVersionChecker
  
  // -ve      if B is newer
  // equal    if A == B
  // +ve      if A is newer
  compare: function(aVersionA, aVersionB)
  {
    var a = this._decomposeVersion(aVersionA);
    var b = this._decomposeVersion(aVersionB);
    
    return a.compare(b);
  },
  
  _decomposeVersion: function(aVersion)
  {
    var plus = 0;
    if (aVersion.charAt(aVersion.length-1) == "+") {
      aVersion = aVersion.substr(0, aVersion.length-1);
      plus = 1;
    }

    var parts = aVersion.split(".");
    
    return new Version(this._getValidInt(parts[0]),
                       this._getValidInt(parts[1]),
                       this._getValidInt(parts[2]),
                       this._getValidInt(parts[3]),
                       plus);
  },
  
  _getValidInt: function(aPartString)
  {
    var integer = parseInt(aPartString);
    if (isNaN(integer))
      return 0;
    return integer;
  },
  
  isValidVersion: function(aVersion)
  {
    return /^([0-9]+\.){0,3}[0-9]+\+?$/.test(aVersion);
  },

  /////////////////////////////////////////////////////////////////////////////
  // nsISupports
  QueryInterface: function(aIID) 
  {
    if (!aIID.equals(Components.interfaces.nsIVersionChecker) &&
        !aIID.equals(Components.interfaces.nsISupports))
      throw Components.results.NS_ERROR_NO_INTERFACE;
    return this;
  }
};

var gModule = {
  registerSelf: function(componentManager, fileSpec, location, type) {
    componentManager = componentManager.QueryInterface(Components.interfaces.nsIComponentRegistrar);
    
    for (var key in this._objects) {
      var obj = this._objects[key];
      componentManager.registerFactoryLocation(obj.CID, obj.className, obj.contractID,
                                               fileSpec, location, type);
    }

    // Make the Update Service a startup observer
    var categoryManager = Components.classes["@mozilla.org/categorymanager;1"]
                                    .getService(Components.interfaces.nsICategoryManager);
    categoryManager.addCategoryEntry("app-startup", this._objects.service.className,
                                     "service," + this._objects.service.contractID, 
                                     true, true, null);
  },
  
  getClassObject: function(componentManager, cid, iid) {
    if (!iid.equals(Components.interfaces.nsIFactory))
      throw Components.results.NS_ERROR_NOT_IMPLEMENTED;

    for (var key in this._objects) {
      if (cid.equals(this._objects[key].CID))
        return this._objects[key].factory;
    }
    
    throw Components.results.NS_ERROR_NO_INTERFACE;
  },
  
  _makeFactory: #1= function(ctor) {
    function ci(outer, iid) {
      if (outer != null)
        throw Components.results.NS_ERROR_NO_AGGREGATION;
      return (new ctor()).QueryInterface(iid);
    } 
    return { createInstance: ci };
  },
  
  _objects: {
    service: { CID        : Components.ID("{B3C290A6-3943-4B89-8BBE-C01EB7B3B311}"),
               contractID : "@mozilla.org/updates/update-service;1",
               className  : "Update Service",
               factory    : #1#(UpdateService)
             },
    prompt:  { CID        : Components.ID("{27ABA825-35B5-4018-9FDD-F99250A0E722}"),
               contractID : "@mozilla.org/updates/update-prompt;1",
               className  : "Update Prompt",
               factory    : #1#(UpdatePrompt)
             },
    version: { CID        : Components.ID("{9408E0A5-509E-45E7-80C1-0F35B99FF7A9}"),
               contractID : "@mozilla.org/updates/version-checker;1",
               className  : "Version Checker",
               factory    : #1#(VersionChecker)
             },
    item:    { CID        : Components.ID("{F3294B1C-89F4-46F8-98A0-44E1EAE92518}"),
               contractID : "@mozilla.org/updates/item;1",
               className  : "Update Item",
               factory    : #1#(UpdateItem)
             }
  },
  
  canUnload: function (aComponentManager) 
  {
    return true;
  }
};

function NSGetModule(compMgr, fileSpec) 
{
  return gModule;
}

