<?xml version="1.0"?>

<!DOCTYPE bindings SYSTEM "chrome://mozapps/locale/update/update.dtd">

<bindings id="updatesBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="updateStatusbarNotification" extends="chrome://global/content/bindings/general.xml#statusbarpanel">
    <resources>
      <stylesheet src="chrome://mozapps/skin/update/update.css"/>
    </resources>
    <content>
      <xul:hbox flex="1" class="updateIndicator" xbl:inherits="updateCount">
        <xul:image xbl:inherits="severity" class="updateIcon"/>
        <xul:label xbl:inherits="value=updateCount" flex="1" crop="right"/>
      </xul:hbox>
      <xul:popupset>
        <xul:popup anonid="infoPopup">
          <xul:hbox>
            <xul:label flex="1" crop="right">&updatesAvailable.title</xul:label>
            <xul:button class="popupCloseBox"/>
          </xul:hbox>
          <xul:description anonid="infoPopupDetails"/>
        </xul:popup>
      </xul:popupset>
    </content>
    <implementation implements="nsIObserver">
      <constructor>
      <![CDATA[
        var os = Components.classes["@mozilla.org/observer-service;1"]
                          .getService(Components.interfaces.nsIObserverService);
        os.addObserver(this, "Update:Ended", false);
      ]]>
      </constructor>
      <destructor>
      <![CDATA[
        var os = Components.classes["@mozilla.org/observer-service;1"]
                          .getService(Components.interfaces.nsIObserverService);
        os.removeObserver(this, "Update:Ended");
      ]]>
      </destructor>
      
      <!-- nsIObserver -->
      <method name="observe">
        <parameter name="aSubject"/>
        <parameter name="aTopic"/>
        <parameter name="aData"/>
        <body>
        <![CDATA[
          if (aTopic == "Update:Ended") {
            var updates = Components.classes["@mozilla.org/updates/background-update-service;1"]
                                    .getService(Components.interfaces.nsIBackgroundUpdateService);
            this.severity     = updates.updateSeverity;
            this.updateCount  = updates.updateCount;
          }
        ]]>
        </body>
      </method>
      
      <property name="severity"     onset="this.setAttribute('severity', val); return val;"
                                    onget="return this.getAttribute('severity');"/>
      <property name="updateCount"  onset="this.setAttribute('updateCount', val); return val;"
                                    onget="return this.getAttribute('updateCount');"/>
    </implementation>
    <handlers>
      <handler event="dblclick">
      <![CDATA[
        var em = Components.classes["@mozilla.org/extensions/manager;1"]
                           .getService(Components.interfaces.nsIExtensionManager);
        em.update([], 0, Components.interfaces.nsIExtensionManager.UPDATE_TYPE_USERINVOKED);
      ]]>
      </handler>
    </handlers>
  </binding>
         
  <binding id="updateItem">
    <resources>
      <stylesheet src="chrome://mozapps/skin/update/update.css"/>
    </resources>
    <content>
      <xul:hbox flex="1">
        <xul:stack>
          <xul:vbox align="center" pack="center">
            <xul:image class="updateItemIcon" xbl:inherits="src=icon"/>
          </xul:vbox>
          <xul:vbox align="right" pack="end">
            <xul:checkbox class="updateItemChecked" xbl:inherits="checked"/>
          </xul:vbox>
        </xul:stack>
        <xul:vbox flex="1">
          <xul:hbox class="updateItemNameRow" align="center">
            <xul:label class="updateItemName" xbl:inherits="value=name" flex="1" crop="right"/>
          </xul:hbox>
          <xul:hbox class="updateItemDetailsRow" align="center">
            <xul:label class="updateItemFromLabel">&from.label;</xul:label>
            <xul:textbox class="updateItemURL" xbl:inherits="value=url" flex="1" readonly="true" crop="right"/>
          </xul:hbox>
        </xul:vbox> 
      </xul:hbox>
    </content>
    <implementation>
      <property name="name"     onset="this.setAttribute('name', val); return val;"
                                onget="return this.getAttribute('name');"/>
      <property name="url"      onset="this.setAttribute('url', val); return val;"
                                onget="return this.getAttribute('url');"/>
      <property name="icon"     onset="this.setAttribute('icon', val); return val;"
                                onget="return this.getAttribute('icon');"/>
      <property name="checked"  onset="this.setAttribute('checked', val); return val;"
                                onget="return this.getAttribute('checked');"/>
    </implementation>
  </binding>

</bindings>

