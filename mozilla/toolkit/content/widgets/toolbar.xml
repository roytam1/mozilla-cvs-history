<?xml version="1.0"?>

<bindings id="toolbarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="toolbar-base">
    <resources>
      <stylesheet src="chrome://global/skin/toolbar.css"/>
    </resources>
  </binding>
  
  <binding id="toolbar" extends="chrome://global/content/widgets/toolbar.xml#toolbar-base">
    <implementation>
      <field name="palette">
        null
      </field>
      <field name="afterPalette">
        null
      </field>

      <field name="toolbarChanged">
        null
      </field>

      <method name="rebuild">
        <body>
          <![CDATA[
            while (this.firstChild != this.afterPalette) {
              this.removeChild(this.firstChild);
            }
            this.buildItemsFromPalette();
            this.toolbarChanged();
          ]]>
        </body>
      </method>
      <method name="foopy">
        <body>
        <![CDATA[
          setTimeout(this.buildItemsFromPalette, 0, this);
          ]]>
          </body>
          </method>
      <method name="buildItemsFromPalette">
        <parameter name="aThis"/>
        <body>
          <![CDATA[
            var currentSet = aThis.getAttribute("currentset");
            if (!currentSet)
              currentSet = aThis.getAttribute("defaultset");
            if (!currentSet)
              return;

            var node = aThis.palette ? aThis.palette : aThis.firstChild;
              
            if (!aThis.palette) {
              while (node) {
                if (node.localName == "toolbarpalette")
                  break;
                node = node.nextSibling;
              }
              if (!node)
                return;
            
              aThis.afterPalette = node.nextSibling;
              aThis.palette = node;
              aThis.removeChild(node);
            }
            
            var items = currentSet.split(",");
            for (var i = 0; i < items.length; i++) {
              var item = items[i];
              if (!item) continue;

              if (item == "separator") {
                var sep = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                   "toolbarseparator");
                sep.id = "separator";
                aThis.insertBefore(sep, aThis.afterPalette);
                continue;
              }

              // Attempt to locate the item within the palette's list of children.
              var paletteItem = node.firstChild;
              while (paletteItem) {
                var paletteID = paletteItem.getAttribute("id");
                if (paletteID == item) {
                  var newItem = paletteItem.cloneNode(true);
                  newItem.hidden = true;
                  aThis.insertBefore(newItem, aThis.afterPalette);
                  newItem.hidden = false;
                  break;
                }
                  
                paletteItem = paletteItem.nextSibling;
              }
            }
          ]]>
        </body>
      </method>
      <constructor>
        <![CDATA[
          this.foopy();
        ]]>
      </constructor>
    </implementation>
  </binding>

  <binding id="toolbox" extends="chrome://global/content/widgets/toolbar.xml#toolbar-base"/>

  <binding id="menubar" extends="xul:menubar">
    <resources>
      <stylesheet src="chrome://global/skin/toolbar.css"/>
    </resources>

    <implementation implements="nsIAccessibleProvider">
      <property name="accessible">
        <getter>
          <![CDATA[
            var accService = Components.classes["@mozilla.org/accessibilityService;1"].getService(Components.interfaces.nsIAccessibilityService);
            return accService.createXULMenubarAccessible(this);
          ]]>
        </getter>
       </property>

    </implementation>
  </binding>

  <binding id="toolbarseparator" extends="chrome://global/content/widgets/toolbar.xml#toolbar-base"/>

  <binding id="toolbarpaletteitem" extends="xul:button"/>
</bindings>          

