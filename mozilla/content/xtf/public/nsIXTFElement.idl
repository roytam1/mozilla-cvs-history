/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ----- BEGIN LICENSE BLOCK -----
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Mozilla XTF project.
 *
 * The Initial Developer of the Original Code is 
 * Alex Fritze.
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *    Alex Fritze <alex@croczilla.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or 
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ----- END LICENSE BLOCK ----- */

#include "nsISupports.idl"

[scriptable, uuid(f0617ed1-db6a-4704-ac4b-67bf15a77788)]
interface nsIXTFElement : nsISupports
{
  void onDestroyed();

  const unsigned long ELEMENT_TYPE_GENERIC_ELEMENT     = 0;
  const unsigned long ELEMENT_TYPE_SVG_VISUAL          = 1;
  const unsigned long ELEMENT_TYPE_XML_VISUAL          = 2;
  const unsigned long ELEMENT_TYPE_XUL_VISUAL          = 3;
  
  readonly attribute unsigned long elementType;

  // getScriptingInterfaces: This array servers 2 purposes: a) All
  // interfaces in this array will automatically be accessible when
  // our wrapper element is used from JS (other interfaces need to be
  // explicitly QI'ed for), and b) All these interfaces are callable
  // from unpriviliged script.
  
  void getScriptingInterfaces(out unsigned long count,
                              [array, size_is(count), retval] out nsIIDPtr array);

  // context events:
  
  void willChangeDocument(in nsISupports newDoc);
  void documentChanged(in nsISupports newDoc);
  
  void willChangeParent(in nsISupports newParent);
  void parentChanged(in nsISupports newParent);

  void willInsertChild(in nsISupports child, in unsigned long index);
  void childInserted(in nsISupports child, in unsigned long index);

  void willAppendChild(in nsISupports child);
  void childAppended(in nsISupports child);

  void willRemoveChild(in unsigned long index);
  void childRemoved(in unsigned long index);

  void doneAddingChildren();

  // attribute management: xxx these must handle namespaces
  void setAttribute(in AString name, in AString newValue);
  void unsetAttribute(in AString name);
  AString getAttribute(in AString name);
  boolean hasAttribute(in AString name);
  unsigned long getAttributeCount();
  AString getAttributeNameAt(in unsigned long index);
};

