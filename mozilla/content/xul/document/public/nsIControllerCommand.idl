/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is 
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * nsIControllerCommand
 *
 * A generic command interface. You can register an nsIControllerCommand
 * with the nsIControllerCommandManager.
 */

[scriptable, uuid(0eae9a46-1dd2-11b2-aca0-9176f05fe9db)]
interface nsIControllerCommand : nsISupports
{

  /**
   * Returns true if the command is currently enabled. An nsIControllerCommand
   * can implement more than one commands; say, a group of related commands
   * (e.g. delete left/delete right). Because of this, the command name is
   * passed to each method.
   *
   * @param aCommandName  the name of the command for which we want the enabled
   *                      state.
   * @param aCommandRefCon    a cookie held by the nsIControllerCommandManager,
   *                  allowing the command to get some context information.
   *                  The contents of this cookie are implementation-defined.
   */
  boolean isCommandEnabled(in string aCommandName, in nsISupports aCommandRefCon);
  
  /**
   * Execute the name command.
   *
   * @param aCommandName  the name of the command to execute.
   * 
   * @param aCommandRefCon    a cookie held by the nsIControllerCommandManager,
   *                  allowing the command to get some context information.
   *                  The contents of this cookie are implementation-defined.
   */
  void    doCommand(in string aCommandName, in nsISupports aCommandRefCon);
  
};


/**
 * nsIStatefulControllerCommand
 *
 * An extension of the basic nsIControllerCommand interface, for commands
 * that have to update state (e.g. "bold" in an editor). Note that the 
 * implementation of the command *must* be stateless (since a given command
 * can be shared between clients of the controller command manager). State
 * must be stored/update via the refCon.
 */

[scriptable, uuid(78ad2381-1ae6-11d4-9f7e-a6d3f6dffffc)]
interface nsIStateUpdatingControllerCommand : nsISupports
{

  /**
   * Update the state of the named command.
   *
   * @param aCommandName     the name of the command for which we want to update state.
   * 
   * @param aCommandRefCon    a cookie held by the nsIControllerCommandManager,
   *                  allowing the command to get some context information.
   *                  The contents of this cookie are implementation-defined.
   */
  void    updateCommandState(in string aCommandName, in nsISupports aCommandRefCon);
};




/**
 * nsIControllerCommandManager
 * 
 * An interface via which a controller can maintain a series of commands,
 * and efficiently dispatch commands to their respective handlers.
 *
 * Controllers that use an nsIControllerCommandManager should support
 * nsIInterfaceRequestor, and be able to return an interface to their
 * controller command manager via getInterface().
 * 
 */

[scriptable, uuid(65a2f51a-1dd2-11b2-889f-d886b255ffe7)]
interface nsIControllerCommandManager : nsISupports
{
  /**
   * Register and unregister commands with the command manager.
   *
   * @param aCommandName  the name of the command under which to register or
   *                      unregister the given command handler.
   *
   * @param aCommand      the handler for this command.
   */
  void    registerCommand(in string aCommandName, in nsIControllerCommand aCommand);
  void    unregisterCommand(in string aCommandName, in nsIControllerCommand aCommand);
  
  /**
   * Find the command handler which has been registered to handle the named command.
   *
   * @param aCommandName  the name of the command to find the handler for.
   */
  nsIControllerCommand findCommandHandler(in string aCommandName);

  /**
   * Get whether the named command is enabled.
   *
   * @param aCommandName    the name of the command to test
   * @param aCommandRefCon  the command context data
   */
	boolean isCommandEnabled(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Tell the command to udpate its state (if it is a state updating command)
   *
   * @param aCommandName    the name of the command to update
   * @param aCommandRefCon  the command context data
   */
	void  updateCommandState(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Get whether the named command is supported.
   *
   * @param aCommandName    the name of the command to test
   * @param aCommandRefCon  the command context data
   */
	boolean supportsCommand(in string aCommandName, in nsISupports aCommandRefCon);

  /**
   * Execute the named command.
   *
   * @param aCommandName    the name of the command to execute
   * @param aCommandRefCon  the command context data
   */
	void    doCommand(in string aCommandName, in nsISupports aCommandRefCon);

};

%{C++
nsresult
NS_NewControllerCommandManager(nsIControllerCommandManager** aResult);

%}
