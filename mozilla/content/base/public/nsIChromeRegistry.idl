/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Mozilla browser.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 * 
 * Original Author: David W. Hyatt (hyatt@netscape.com)
 * 
 * Contributor(s): pav
 *                 Blake Ross (blaker@netscape.com)
 */

#include "nsISupports.idl"
#include "nsIURL.idl"
#include "nsISimpleEnumerator.idl"
#include "nsISupportsArray.idl"
interface nsIDocShell;

[scriptable, uuid(D8C7D8A1-E84C-11d2-BF87-00105A1B0627)]
interface nsIChromeRegistry : nsISupports
{
  const PRInt32 NONE = 0;
  const PRInt32 PARTIAL = 1;
  const PRInt32 FULL = 2;

  /**
   * Convert a chrome URL into a canonical representation; specifically,
   *
   *   chrome://package/provider/file
   *
   * Chrome URLs are allowed to be specified in "shorthand", leaving the
   * "file" portion off. In that case, the URL is expanded to:
   *
   *   chrome://package/provider/package.ext
   *
   * where "ext" is:
   *
   *   "xul" for a "content" package,
   *   "css" for a "skin" package, and
   *   "dtd" for a "locale" package.
   *
   * @param aChromeURL the URL that is to be canonified.
   */
  void canonify(in nsIURI aChromeURL);

  /**
   * Convert a chrome URL to a "real" using the information in the registry.
   * Does not modify aChromeURL.
   *
   * @param aChromeURL the URL that is to be converted.
   */
  AUTF8String convertChromeURL(in nsIURI aChromeURL);

  /**
   * get the style sheets for a specific chrome URL
   */
  nsISupportsArray getStyleSheets(in nsIURI aChromeURL);

  /**
   * get the user-specified style sheets
   */
  nsISupportsArray getUserSheets(in boolean useChromeSheets);

  /**
   * get the style sheets required for a specific running docshell
   */
  nsISupportsArray getAgentSheets(in nsIDocShell docShell);

  /**
   * refresh the chrome list at runtime, looking for new packages/etc
   */
  void checkForNewChrome();
};

[scriptable, uuid(a9f92623-5982-4afe-9d90-619cf5b0c39f)]
interface nsIXULChromeRegistry : nsIChromeRegistry {

  /* Applies a skin or locale to all possible packages */
  void selectSkin(in ACString skinName, in boolean useProfile);
  void selectLocale(in ACString localeName, in boolean useProfile);
  void deselectSkin(in ACString skinName, in boolean useProfile);
  void deselectLocale(in ACString localeName, in boolean useProfile);
  PRInt32 isSkinSelected(in ACString skinName, in boolean useProfile);
  PRInt32 isLocaleSelected(in ACString localeName, in boolean useProfile);
 
 // Special additional APIs for locales only.
  void selectLocaleForProfile(in ACString localeName, in wstring profilePath);
  
  /* Should be called when locales change to reload all chrome (including XUL). */
  void reloadChrome();
  
  /* runtimeProvider == true: don't assert the runtime change */
  void setRuntimeProvider(in boolean runtimeProvider); 

  boolean checkThemeVersion(in ACString skinName);
  boolean checkLocaleVersion(in ACString localeName);

  /* Apply skin/locale to a specific package */
  void selectSkinForPackage(in ACString skinName,
                            in wstring packageName,
                            in boolean useProfile);
  
  void selectLocaleForPackage(in ACString localeName,
                              in wstring packageName,
                              in boolean useProfile);
  
  void deselectSkinForPackage(in ACString skinName,
                              in wstring packageName,
                              in boolean useProfile);
  
  void deselectLocaleForPackage(in ACString localeName,
                                in wstring packageName,
                                in boolean useProfile);
  
  boolean isSkinSelectedForPackage(in ACString skinName,
                                   in wstring packageName,
                                   in boolean useProfile);
  
  boolean isLocaleSelectedForPackage(in ACString localeName,
                                     in wstring packageName,
                                     in boolean useProfile);

  ACString getSelectedLocale(in ACString packageName);
  ACString getSelectedSkin(in ACString packageName);
  
  nsISimpleEnumerator getOverlays(in nsIURI aChromeURL);
  
  /* Should be called when skins change. Reloads only stylesheets. */
  void refreshSkins();

  boolean allowScriptsForSkin(in nsIURI url);

  /* Whether or not an addon package can dynamically overlay another package. 
     You can use these APIs to effectively disable a chrome add-on without
	 uninstalling it. */
  void setAllowOverlaysForPackage(in wstring packageName, in boolean allowOverlays);
  boolean overlaysAllowedForPackage(in wstring packageName);
  boolean isOverlayAllowed(in nsIURI aChromeURL);

  /* Installation APIs */
  void installSkin(in string baseURL,
                   in boolean useProfile,
                   in boolean allowScripts);
  
  void uninstallSkin(in ACString skinName, in boolean useProfile);

  void installLocale(in string baseURL, in boolean useProfile);
  void uninstallLocale(in ACString localeName, in boolean useProfile);

  void installPackage(in string baseURL, in boolean useProfile);
  void uninstallPackage(in wstring packageName, in boolean useProfile);
};

%{ C++

#define NS_CHROMEREGISTRY_CONTRACTID \
  "@mozilla.org/chrome/chrome-registry;1"
%}
