/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 */

#include "nsISupports.idl"

/* THIS IS A PUBLIC INTERFACE */

interface nsIDOMNode;
interface nsIDOMRange;

/**
 * Interface for manipulating and querying the current selected range
 * of nodes within the document.
 *
 * @status FROZEN
 * @version 1.0
 */

[scriptable, uuid(B2C7ED59-8634-4352-9E37-5484C8B6E4E1)]
interface nsISelection : nsISupports
{
    /**
     * The node representing one end of the selection.
     */
    readonly attribute nsIDOMNode anchorNode;

    /**
     * The offset within the (text) node where the selection begins.
     */
    readonly attribute long anchorOffset;

    /**
     * The node with keyboard focus.
     */
    readonly attribute nsIDOMNode focusNode;

    /**
     * The offset within the (text) node where focus starts.
     */
    readonly attribute long focusOffset;

    /**
     * Indicates if the whole selection just one point, or unset.
     */
    readonly attribute boolean isCollapsed;

    /**
     * Returns the number of ranges in the selection.
     */
    readonly attribute long rangeCount;

    /**
     * Returns the range at the specified index.
     */
    nsIDOMRange getRangeAt(in long index);

    /**
     * Sets the whole selection down to a single point specified
     * by the node and offset.
     */
    void collapse(in nsIDOMNode parentNode, in long offset);

    /**
     * Changes the current selection to extend to the specified node
     * and offset.
     */
    void extend(in nsIDOMNode parentNode, in long offset);

    /**
     * Sets the whole selection to be a point at the start of the current
     * selection.
     */
    void collapseToStart();

    /**
     * Sets the whole selection to be a point at the end of the current
     * selection.
     */
    void collapseToEnd();

    /**
     * Tests whether the node is in the selection, optionally
     * using recursion to locate it.
     */
    boolean containsNode(in nsIDOMNode node, in boolean recursive);

    /**
     * Adds all children of the specified node to the selection.
     */
    void selectAllChildren(in nsIDOMNode parentNode); 

    /**
     * Adds a range to the current selection.
     */
    void addRange(in nsIDOMRange range);
 
    /**
     * Removes a range from the current selection.
     */
    void removeRange(in nsIDOMRange range);

    /**
     * Removes all ranges from the current selection.
     */
    void removeAllRanges();

    /**
     * Deletes this selection from document the nodes belong to.
     */
    void deleteFromDocument();

    /**
     * Modifies the cursor Bidi level after a change in keyboard direction
     *  @param langRTL is PR_TRUE if the new language is right-to-left or
     *                 PR_FALSE if the new language is left-to-right
     */
    void selectionLanguageChange(in boolean langRTL);

    /**
     * Returns the whole selection into a plain text string.
     */
    wstring toString();
};
