/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is 
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or 
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
interface nsIInputStream;
interface nsIInputStreamObserver;

%{C++
/**
 * The signature of the writer function passed to ReadSegments. This
 * specifies where the data should go that gets read from the buffer.
 * Implementers should return the following:
 * @return NS_OK and writeCount - if successfully wrote something
 * @return NS_BASE_STREAM_CLOSED - if no more can be written
 * @return NS_BASE_STREAM_WOULD_BLOCK - if there is currently space to write (in
 *   a non-blocking mode)
 * @return <other-error> - on failure
 */
typedef NS_CALLBACK(nsWriteSegmentFun)(nsIInputStream* in,
                                       void* closure,
                                       const char* fromRawSegment,
                                       PRUint32 toOffset,
                                       PRUint32 count,
                                       PRUint32 *writeCount);
%}

native nsWriteSegmentFun(nsWriteSegmentFun);

[scriptable, uuid(fa9c7f6c-61b3-11d4-9877-00c04fa0cf4a)]
interface nsIInputStream : nsISupports
{
    /** 
     * Closes the stream. 
     */
    void close();

    /**
     * Return the number of bytes currently available in the stream
     * @param aLength out parameter to hold the number of bytes
     *        if an error occurs, the parameter will be undefined
     * @return error status
     */
    unsigned long available();

    /** 
     * Read data from the stream.
     * @param aBuf the buffer into which the data is read
     * @param aCount the maximum number of bytes to read
     * @return aReadCount out parameter to hold the number of
     *        bytes read, eof if 0. if an error occurs, the
     *        read count will be undefined
     */
    [noscript] unsigned long read(in charPtr buf, in unsigned long count);

    /**
     * Low-level read method that has access to the stream's underlying buffer. The
     * writer function may be called multiple times for segmented buffers.
     */
    [noscript] unsigned long readSegments(in nsWriteSegmentFun writer,
                                          in voidPtr closure,
                                          in unsigned long count);

    /**
     * Check this attribute to see if the stream is in non-blocking mode.
     */
    readonly attribute boolean nonBlocking;

    /**
     * Allows users to set an observer on an input stream to receive notifications
     * about the consumer emptying the input stream's underlying buffer, or closing the
     * stream. This is necessary for non-blocking streams so that the producer can suspend
     * itself until more data can be written.
     */
    attribute nsIInputStreamObserver observer;
};

[scriptable, uuid(019d67cc-61b4-11d4-9877-00c04fa0cf4a)]
interface nsIInputStreamObserver : nsISupports
{
    /**
     * Called when the input stream's consumer has read all the existing data from the stream.
     */
    void onEmpty(in nsIInputStream inStr);

    /**
     * Called when the consumer closes its end of the stream.
     */
    void onClose(in nsIInputStream inStr);
};
