/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *  
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *  
 * The Original Code is Mozilla FastLoad code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *   Brendan Eich <brendan@mozilla.org> (original author)
 */

#include "nsISupports.idl"

interface nsIObjectInputStream;
interface nsIObjectOutputStream;

[nsid] native nsCID(nsCID);

[scriptable, uuid(91cca981-c26d-44a8-bebe-d9ed4891503a)]
interface nsISerializable : nsISupports
{
    /**
     * Initialize the object implementing nsISerializable, which must have
     * been freshly constructed via CreateInstance.  All data members that
     * can't be set to default values must have been serialized by write,
     * and should be read from aInputStream in the same order by this method.
     */
    void read(in nsIObjectInputStream aInputStream);

    /**
     * Serialize the object implementing nsISerializable to aOutputStream, by
     * writing each data member that must be recovered later to reconstitute
     * a working replica of this object, in a canonical member and byte order,
     * to aOutputStream.
     */
    void write(in nsIObjectOutputStream aOutputStream);

    /**
     * Return the CID of the object implementing nsISerializable.  We require
     * all nsISerializable implementations to self-identify by CID so that the
     * nsIObjectOutputStream implementation(s) can write each object's CID to
     * the stream in a fashion understood by the matching nsIObjectInputStream
     * implementation.  nsIObjectInputStream.readObject needs to recover each
     * object's CID before it can construct the object and then initialize it
     * using nsISerializable.read.
     */
    nsCID getCID();
};
