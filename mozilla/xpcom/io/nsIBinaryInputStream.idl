/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *  
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *  
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 1998-1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 */

#include "nsIInputStream.idl"
#include "nsrootidl.idl"

/**
 * This interface allows consumption of primitive data types from a "binary
 * stream" containing untagged, big-endian binary data, i.e. as produced by an
 * implementation of nsIBinaryOutputStream.  This might be used, for example,
 * to implement network protocols or to read from architecture-neutral disk
 * files, i.e. ones that can be read and written by both big-endian and
 * little-endian platforms.
 *
 * @See nsIBinaryOutputStream
 */

[scriptable, uuid(7b456cb0-8772-11d3-90cf-0040056a906e)]
interface nsIBinaryInputStream : nsIInputStream {
    void setInputStream(in nsIInputStream aInputStream);
    
    PRBool readBoolean();

    PRUint8 read8();
    PRUint16 read16();
    PRUint32 read32();
    PRUint64 read64();

    float readFloat();
    double readDouble();

    /**
     * Read a NUL-terminated 8-bit char* string from a binary stream.
     */
    string readStringZ();

    /**
     * Read a NUL-terminated 16-bit PRUnichar* string from a binary stream.
     */
    wstring readWStringZ();

    /**
     * Read a NUL-terminated UTF8-encoded string from a binary stream, producing
     * a NUL-terminated 16-bit PRUnichar* string argument as a result.
     */
    wstring readUtf8Z();

    /**
     * Read an opaque byte array from a binary stream.
     */
    void readBytes([size_is(aLength)] out string aString, in PRUint32 aLength);
};

%{C++

NS_COM nsresult
NS_NewBinaryInputStream(nsIBinaryInputStream* *aResult, nsIInputStream* aSrcStream);

inline nsresult
NS_ReadOptionalStringZ(nsIBinaryInputStream* aStream, char* *aResult)
{
    PRBool nonnull;
    nsresult rv = aStream->ReadBoolean(&nonnull);
    if (NS_SUCCEEDED(rv)) {
        if (nonnull)
            rv = aStream->ReadStringZ(aResult);
        else
            *aResult = nsnull;
    }
    return rv;
}

inline nsresult
NS_ReadOptionalWStringZ(nsIBinaryInputStream* aStream, PRUnichar* *aResult)
{
    PRBool nonnull;
    nsresult rv = aStream->ReadBoolean(&nonnull);
    if (NS_SUCCEEDED(rv)) {
        if (nonnull)
            rv = aStream->ReadWStringZ(aResult);
        else
            *aResult = nsnull;
    }
    return rv;
}

%}
