/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *  
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *  
 * The Original Code is Mozilla FastLoad code.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation. Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *   Brendan Eich <brendan@mozilla.org> (original author)
 */

#include "nsISupports.idl"
#include "nsrootidl.idl"

/**
 * An interface for access to a buffering stream implementation's underlying
 * memory buffer.
 *
 * Stream implementations that QueryInterface to nsIStreamBufferAccess must
 * ensure that all buffers are aligned on the most restrictive type size for
 * the current architecture (e.g., sizeof(double) for RISCy CPUs).  malloc(3)
 * satisfies this requirement.
 */
[uuid(ac923b72-ac87-4892-ac7a-ca385d429435)]
interface nsIStreamBufferAccess : nsISupports
{
    /**
     * Get access to a contiguous, aligned run of bytes in the stream's buffer.
     * Exactly one successful getBuffer call must occur before a putBuffer call
     * taking the non-null pointer returned by the successful getBuffer.
     *
     * The run of bytes are the next bytes (modulo alignment padding) to read
     * for an input stream, and the next bytes (modulo alignment padding) to
     * store before (eventually) writing buffered data to an output stream.
     * There can be space beyond this run of bytes in the buffer for further
     * accesses before the fill or flush point is reached.
     *
     * @param aLength
     *    Count of contiguous bytes requested at the address A that satisfies
     *    (A & aAlignMask) == 0 in the buffer, starting from the current stream
     *    position, mapped to a buffer address B.  The stream implementation
     *    must pad from B to A by skipping bytes (if input stream) or storing
     *    zero bytes (if output stream).
     *
     * @param aAlignMask
     *    Bit-mask computed by subtracting 1 from the power-of-two alignment
     *    modulus (e.g., 3 or sizeof(PRUint32)-1 for PRUint32 alignment).
     *
     * @return
     *    The aligned pointer to aLength bytes in the buffer, or null if the
     *    buffer has no room for aLength bytes starting at the next address A
     *    after the current position that satisfies (A & aAlignMask) == 0.
     */
    [notxpcom] charPtr getBuffer(in PRUint32 aLength, in PRUint32 aAlignMask);

    /**
     * Relinquish access to the stream's buffer, filling if at end of an input
     * buffer, flushing if completing an output buffer.  After a getBuffer call
     * that returns non-null, putBuffer must be called.
     *
     * @param aBuffer
     *    A non-null pointer returned by getBuffer on the same stream buffer
     *    access object.
     *
     * @param aLength
     *    The same count of contiguous bytes passed to the getBuffer call that
     *    returned aBuffer.
     */
    [notxpcom] void putBuffer(in charPtr aBuffer, in PRUint32 aLength);

    /**
     * Disable and enable buffering on the stream implementing this interface.
     * DisableBuffering flushes an output stream's buffer, and invalidates an
     * input stream's buffer.
     */
    void disableBuffering();
    void enableBuffering();
};

%{C++

// Swap macros, used to convert to/from canonical (big-endian) format
#if defined IS_LITTLE_ENDIAN

# define NS_SWAP16(x) ((((x) & 0xff) << 8) | (((x) >> 8) & 0xff))
# define NS_SWAP32(x) ((NS_SWAP16((x) & 0xffff) << 16) | (NS_SWAP16((x) >> 16)))

// XXXbe shouldn't NSPR's LL_INIT work for non-constant arguments in all cases?
# if defined(HAVE_LONG_LONG)
#  define NS_SWAP64(x) (((PRUint64)NS_SWAP32(*(PRUint32*)&(x)) << 32)         \
                        | NS_SWAP32(*((PRUint32*)&(x)+1)))
# else
#  define NS_SWAP64(x) LL_INIT(NS_SWAP32(*(PRUint32*)&(x)),                   \
                               NS_SWAP32(*((PRUint32*)&(x)+1)))
# endif

#elif defined IS_BIG_ENDIAN

# define NS_SWAP16(x) (x)
# define NS_SWAP32(x) (x)
# define NS_SWAP64(x) (x)

#else

# error "Unknown byte order"

#endif

/**
 * These macros get and put a buffer given either an sba parameter that may
 * point to an object implementing nsIStreamBufferAccess, nsIObjectInputStream,
 * or nsIObjectOutputStream.
 */
#define NS_GET_BUFFER(sba,n,a)  ((sba)->GetBuffer(n, a))
#define NS_PUT_BUFFER(sba,p,n)  ((sba)->PutBuffer(p, n))

#define NS_GET8(p)              (*(PRUint8*)(p))
#define NS_GET16(p)             NS_SWAP16(*(PRUint16*)(p))
#define NS_GET32(p)             NS_SWAP32(*(PRUint32*)(p))
#define NS_GET64(p)             NS_SWAP64(*(PRUint64*)(p))
#define NS_GET_FLOAT(p)         ((float)NS_SWAP32(*(PRUint32*)(p)))
#define NS_GET_DOUBLE(p)        ((double)NS_SWAP64(*(PRUint64*)(p)))

#define NS_PUT8(p,x)            (*(PRUint8*)(p) = (x))
#define NS_PUT16(p,x)           (*(PRUint16*)(p) = NS_SWAP16(x))
#define NS_PUT32(p,x)           (*(PRUint32*)(p) = NS_SWAP32(x))
#define NS_PUT64(p,x)           (*(PRUint64*)(p) = NS_SWAP64(x))
#define NS_PUT_FLOAT(p,x)       (*(PRUint32*)(p) = NS_SWAP32(*(PRUint32*)&(x)))
#define NS_PUT_DOUBLE(p,x)      (*(PRUint64*)(p) = NS_SWAP64(*(PRUint64*)&(x)))

%}
