/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/*
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code, 
 * released March 31, 1998. 
 *
 * The Initial Developer of the Original Code is Netscape Communications 
 * Corporation.  Portions created by Netscape are
 * Copyright (C) 1998-1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *     Doug Turner <dougt@netscape.com>
 */


#include "nsIFile.idl"

[scriptable, uuid(aa610f20-a889-11d3-8c81-000064657374)]
interface nsILocalFile : nsIFile
{

    /**
      * initWithKey
      *
      * This function will initialize the nsIFile object to the
      * location of a well known place.  The location is specified
      * by a string which will be looked up in the registry.  If
      * the string is not found, NS_ERROR_FILE_UNRECONGNIZED_PATH
      * will be returned         
      * 
      *   @param fileKey
      *          A string which represents a special system directory
      *          or a directory which has been registered.
      *
      */
       
       void initWithKey( [const] in string fileKey);


    /**
      * initWithFile
      *
      * This function will initialize the nsIFile object to the
      * exact location of the passed nsIFile.             // what errors can this return?
      * 
      *   @param file
      *          A nsIFile which this object will be initialize
      *          with.
      *
      */
       
       void initWithFile(in nsIFile file);

    /**
      * initWithPath
      *
      * This function will initialize the nsIFile object.  Any
      * internal state information will be reset.  Non-terminal
      * nodes will be resolved. An error will be returned if a
      * non-terminal is a file (NS_ERROR_FILE_INVALID_PATH)
      * 
      *
      *  NOTE:  This function has a known bug on the macintosh and
      *         other OSes which do not represent file locations 
      *         as pathes.  If you do use this function, be very
      *         aware of this problem as bugs.
      *
      *   @param filePath       
      *          A string which specifies a full file path to a 
      *          location.  Relative paths will be treated as an
      *          error (NS_ERROR_FILE_UNRECONGNIZED_PATH).  This
      *          path must in native.
      */
      
       void initWithPath([const] in string filePath );


       readonly attribute PRInt64 diskSpaceAvailable;  // maybe we should put this somewhere else.

       };

%{C++
#define NS_LOCAL_FILE_PROGID "component://netscape/file/local"
#define NS_LOCAL_FILE_CLASSNAME "Local File Specification"
%}
