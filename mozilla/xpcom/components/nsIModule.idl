/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"
#include "nsIFactory.idl"
#include "nsIFile.idl"
#include "nsIComponentManager.idl"

[scriptable, uuid(7392D032-5371-11d3-994E-00805FD26FEE)]
interface nsIModule : nsISupports
{
    // Object Instance Creation.
    // Factory can be queried off the Class Object. Factory will be used to
    //		create new objects.
    // SingletonFactory can be queried off the Class Object. Services can be created
    //		using the singletonfactory.
    void getClassObject(in nsIComponentManager aCompMgr, in nsCIDRef aClass,
                        in nsIIDRef aIID,
                        [retval, iid_is(aIID)] out nsQIResult result);

    // Component registration
    void registerSelf(in nsIComponentManager aCompMgr, in nsIFile location,
                      in string registryLocation, in string componentType);

    void unregisterSelf(in nsIComponentManager aCompMgr, in nsIFile location,
                        in string registryLocation);

    // Module load management
    // @return indicates to the caller if the module can be unloaded.
    // 		Returning PR_TRUE isn't a guarantee that the module will be
    //		unloaded. It constitues only willingness of the module to be
    //		unloaded.
    //		Returning PR_FALSE guaratees that the module wont be unloaded.
    //
    boolean canUnload(in nsIComponentManager aCompMgr);
};

%{C++

// Exported Function from module dll to Create the nsIModule
#define NS_GET_MODULE_SYMBOL "NSGetModule"

extern "C" NS_EXPORT nsresult NSGetModule(nsIComponentManager *aCompMgr,
                                          nsIFile* location,
                                          nsIModule** return_cobj);

typedef nsresult (*nsGetModuleProc)(nsIComponentManager *aCompMgr,
                                    nsIFile* location,
                                    nsIModule** return_cobj);
%}



