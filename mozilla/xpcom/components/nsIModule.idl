/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"
#include "nsIFactory.idl"
#include "nsIFileSpec.idl"
#include "nsIComponentManager.idl"

[scriptable, uuid(7392D032-5371-11d3-994E-00805FD26FEE)]
interface nsIModule : nsISupports
{
    // Object Instance Creation.
    // Factory can be queried off the Class Object. Factory will be used to
    //		create new objects.
    // SingletonFactory can be queried off the Class Object. Services can be created
    //		using the singletonfactory.
    [noscript] void GetClassObject(in nsIComponentManager aCompMgr, in nsCIDRef aClass,
                        in nsIIDRef aIID, out voidStar return_ClassObject);

    // Component registration
    void RegisterSelf(in nsIComponentManager aCompMgr, in nsIFileSpec location);
    void UnregisterSelf(in nsIComponentManager aCompMgr, in nsIFileSpec location);

    // Module load management
    // okToUnload: indicates to the caller if the module can be unloaded.
    // 		Returning PR_TRUE isn't a guarantee that the module will be
    //		unloaded. It constitues only willingness of the module to be
    //		unloaded.
    //		Returning PR_FALSE guaratees that the module wont be unloaded.
    //
    void CanUnload(in nsIComponentManager aCompMgr, out boolean okToUnload);
};

%{C++

// Exported Function from module dll to Create the nsIModule
#define NS_GET_MODULE_SYMBOL "NSGetModule"

extern "C" NS_EXPORT nsresult NSGetModule(nsIComponentManager *aCompMgr,
                                          nsIFileSpec* location,
                                          nsIModule** return_cobj);

typedef nsresult (*nsGetModuleProc)(nsIComponentManager *aCompMgr,
                                    nsIFileSpec* location,
                                    nsIModule** return_cobj);
%}



