/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

[scriptable, object, uuid(00000001-0000-0000-c000-000000000046)]
interface nsIFactory :  nsISupports {

  void CreateInstance(in nsISupports aOuter, in nsIIDRef iid,
                      [retval, iid_is(iid)] out nsQIResult result);

  void LockFactory(in PRBool lock);
};

%{C++

#ifndef nsCOMPtr_h__
#include "nsCOMPtr.h"
#endif

#ifndef class_nsCreateInstance__
#define class_nsCreateInstance__
	// Have to protect this section with a #define because it gets built from
	//	two different IDL files (nsIComponentManager.idl #includes this file)

class NS_EXPORT nsCreateInstance : public nsCOMPtr_helper
	{
		public:
			nsCreateInstance( nsIFactory* aFactory, nsISupports* aOuter, nsresult* error )
					: mFactory(aFactory),
						mOuter(aOuter),
						mErrorPtr(error)
				{
					// nothing else to do here
				}

			virtual nsresult operator()( const nsIID& aIID, void** answer ) const;

		private:
			nsIFactory*		mFactory;
			nsISupports*	mOuter;
			nsresult*			mErrorPtr;
	};

inline
const nsCreateInstance
do_CreateInstance( nsIFactory* aFactory, nsresult* error = 0 )
	{
		return nsCreateInstance(aFactory, 0, error);
	}

inline
const nsCreateInstance
do_CreateInstance( nsIFactory* aFactory, nsISupports* aOuter, nsresult* error = 0 )
	{
		return nsCreateInstance(aFactory, aOuter, error);
	}

#endif // !defined(class_nsCreateInstance__)

%}