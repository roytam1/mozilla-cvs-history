/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

/* The nsIInterfaceInfo public declaration. */


#include "nsISupports.idl"

// forward declaration of non-XPCOM types

[ptr] native nsXPTMethodInfoPtr(nsXPTMethodInfo);
[ptr] native nsXPTConstantPtr(nsXPTConstant);
[ptr] native nsXPTParamInfoPtr(nsXPTParamInfo);
      native nsXPTType(nsXPTType);

// We bend the rules to do a [shared] nsIID (but this is never scriptable)  
[ptr] native nsIIDPtrShared(nsIID);

%{C++
class nsXPTMethodInfo;
class nsXPTConstant;
class nsXPTParamInfo;
class nsXPTType;
%}

/* this is NOT intended to be scriptable */
[uuid(215DBE04-94A7-11d2-BA58-00805F8A5DD7)]
interface nsIInterfaceInfo : nsISupports
{
    readonly attribute string   name;
    readonly attribute nsIIDPtr IID;

    PRBool isScriptable();

    readonly attribute nsIInterfaceInfo parent;

    /**
    * These include counts for parent (and all ancestors).
    */
    readonly attribute PRUint16 methodCount;
    readonly attribute PRUint16 constantCount;

    /**
    * These include methods and constants for parent (and all ancestors).
    * 
    * These do *not* make copies ***explicit bending of XPCOM rules***.
    */
    
    void getMethodInfo(in PRUint16 index, 
                       [shared, retval] out nsXPTMethodInfoPtr info);

    void getMethodInfoForName(in string methodName, out PRUint16 index, 
                       [shared, retval] out nsXPTMethodInfoPtr info);

    void getConstant(in PRUint16 index, 
                     [shared, retval] out nsXPTConstantPtr constant);


    /**
    * Get the interface information or iid associated with a param of some
    * method in this interface.
    */

    nsIInterfaceInfo getInfoForParam(in PRUint16 methodIndex, 
                                     [const] in nsXPTParamInfoPtr param);

    nsIIDPtr getIIDForParam(in PRUint16 methodIndex, 
                            [const] in nsXPTParamInfoPtr param);


    /**
    * These do *not* make copies ***explicit bending of XPCOM rules***.
    */

    nsXPTType getTypeForParam(in PRUint16 methodIndex, 
                              [const] in nsXPTParamInfoPtr param,
                              in PRUint16 dimension);

    PRUint8 getSizeIsArgNumberForParam(in PRUint16 methodIndex, 
                                       [const] in nsXPTParamInfoPtr param,
                                       in PRUint16 dimension);

    PRUint8 getLengthIsArgNumberForParam(in PRUint16 methodIndex, 
                                         [const] in nsXPTParamInfoPtr param,
                                         in PRUint16 dimension);

    PRUint8 getInterfaceIsArgNumberForParam(in PRUint16 methodIndex, 
                                            [const] in nsXPTParamInfoPtr param);

    PRBool isIID(in nsIIDPtr IID);

    void   getNameShared([shared,retval] out string name);
    void   getIIDShared([shared,retval] out nsIIDPtrShared iid);

    PRBool isFunction();
};

