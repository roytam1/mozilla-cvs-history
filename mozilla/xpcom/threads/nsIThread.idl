/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim:set ts=2 sw=2 sts=2 et cindent: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIDispatchTarget.idl"

[ptr] native PRThread(PRThread);

[scriptable, uuid(9c889946-a73a-4af3-ae9a-ea64f7d4e3ca)]
interface nsIThread : nsIDispatchTarget
{
  /**
   * Returns the name of the thread, which may be empty if this thread is
   * anonymous.
   */
  readonly attribute ACString name;

  /**
   * Returns the NSPR thread object corresponding to this nsIThread.
   */
  [noscript] PRThread getPRThread();

  /**
   * Shutdown the thread.  This method may not be executed from the thread
   * itself.  Instead, it is meant to be executed from another thread (usually
   * the thread that created this thread).  When this function returns, the
   * thread will be shutdown, and it will no longer be possible to dispatch
   * tasks to the thread.
   */
  void shutdown();

  /*
  boolean hasEvents();
  void processNextEvent();
  */
   
  /**
   * Run the next task assigned to this thread.  This function should block
   * execution of the current thread until a task is available and run.
   * This function is re-entrant but may only be called if this thread is the 
   * current thread.
   * @throws NS_BASE_STREAM_WOULD_BLOCK if RUN_NO_WAIT is specified and there
   * were no tasks to run.
   */
  void runNextTask(in unsigned long flags);
  const unsigned long RUN_NORMAL  = 0;
  const unsigned long RUN_NO_WAIT = 1;
};
