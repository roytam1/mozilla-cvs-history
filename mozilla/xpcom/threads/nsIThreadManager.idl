/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim:set ts=2 sw=2 sts=2 et cindent: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIThread;

[scriptable, uuid(056216f5-8803-46b4-9199-d95bc1f0446f)]
interface nsIThreadManager : nsISupports
{
  /**
   * Create a new named thread (a global, user PRThread).  The name
   * must be unique.
   */
  nsIThread newThread(in ACString name);
   
  /**
   * Find a named thread.
   */
  nsIThread getThread(in ACString name);

  /**
   * Get the main thread.
   */
  nsIThread getMainThread();

  /**
   * Get the current thread.
   */
  nsIThread getCurrentThread();
   
  /**
   * Set an external nsIThread instance (or null) as the nsIThread for the
   * current thread.  If a nsIThread is already associated with the calling
   * thread, then this function will replace it with the given nsIThread.  If
   * the given nsIThread is non-null, then its name attribute must be unique.
   * Its name may be equal to the name of the nsIThread being replaced.  This
   * method returns the nsIThread that was replaced by this method call or null
   * if there was no previous nsIThread associated with the current thread.
   */
  nsIThread setCurrentThread(in nsIThread thread);

  /**
   * This method returns true if the calling thread is the main thread of the
   * application process.
   */
  boolean isMainThread();
};
