/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim:set ts=2 sw=2 sts=2 et cindent: */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla code.
 *
 * The Initial Developer of the Original Code is Google Inc.
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Darin Fisher <darin@meer.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsIThread.idl"

interface nsIThreadObserver;

/**
 * The standard XPCOM thread object implements this interface, which allows a
 * consumer to observe dispatch activity on the thread.
 */
[scriptable, uuid(f89b5063-b06d-42f8-bf23-4dfcf2d80d6a)]
interface nsIThreadInternal : nsIThread
{
  /**
   * The consumer's thread observer.
   */
  attribute nsIThreadObserver observer;
};

/**
 * This interface provides the observer with hooks to implement a layered
 * event queue.  For example, it is possible to overlay processing events
 * for a GUI toolkit on top of the events for a thread.
 *
 * NativeQueue;
 *
 * Observer = {
 *   onNewTask(thread, flags) {
 *     NativeQueue.signal();
 *   }
 *   onBeforeRunNextTask(thread, flags) {
 *     NativeQueue.processPendingEvents();
 *   }
 *   onAfterRunNextTask(thread, flags, status) {
 *     NativeQueue.processPendingEvents();
 *   }
 *   onWaitNextTask(thread, flags) {
 *     while (!thread.hasPendingTask()) {
 *       NativeQueue.wait();
 *       NativeQueue.processPendingEvents();
 *     }
 *   }
 * };
 *
 * NOTE: The implementation of this interface must be threadsafe.
 */
[scriptable, uuid(719d2fb9-54ce-4847-b15b-fa9960e22f9f)]
interface nsIThreadObserver : nsISupports
{
  /**
   * This method is called whenever a new task is added to the thread.  This
   * method may be called from any thread.
   */
  void onDispatchEvent(in nsIThreadInternal thread,
                       in unsigned long dispatchFlags);

  /**
   * This method is called (from nsIThread.runNextTask) before a task is
   * processed.  This method is only called on the target thread.
   */
  void onEnterProcessNextEvent(in nsIThreadInternal thread,
                               in boolean mayWait);

  /**
   * This method is called (from nsIThread.runNextTask) after a task is
   * processed.  This method is only called on the target thread.
   */
  void onLeaveProcessNextEvent(in nsIThreadInternal thread,
                               in nsresult status);

  /**
   * This method is called (from nsIThread.runNextTask) when it may wait for a
   * pending task to become available.  It's possible that a pending task may
   * already be available when this method is called.  This method is only
   * called on the target thread.
   */
//  void onWaitNextTask(in nsIThreadInternal thread,
//                      in unsigned long runFlags);
};
