/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"

%{C++
#include "nscore.h" // for PRUnichar
%}

[scriptable, uuid(DB242E01-E4D9-11d2-9DDE-000064657374)]
interface nsIObserver : nsISupports {

	/*------------------------------- Observe ----------------------------------
    | Called when aTopic changes for aSubject (presumably; it is actually      |
    | called whenever anyone calls nsIObserverService::Notify for aTopic).     |
    |                                                                          |
    | Implement this in your class to handle the event appropriately.  If      |
    | your observer objects can respond to multiple topics and/or subjects,    |
    | then you will have to filter accordingly.                                |
	--------------------------------------------------------------------------*/
    void Observe( in nsISupports aSubject,
				  in wstring     aTopic,
				  in wstring     someData );

};

%{C++

#define NS_OBSERVER_PROGID "component://netscape/xpcom/observer"

#define NS_OBSERVER_CLASSNAME "Observer"

#define NS_DECL_IOBSERVER \
    NS_IMETHOD Observe( nsISupports*, const PRUnichar*, const PRUnichar* );

%}
