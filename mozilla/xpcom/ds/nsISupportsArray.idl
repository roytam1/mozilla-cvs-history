/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */


#include "nsISupports.idl"
#include "nsICollection.idl"

native nsISupportsArrayEnumFunc(nsISupportsArrayEnumFunc);

%{C++

class nsIBidirectionalEnumerator;
 
#define NS_SUPPORTSARRAY_CID                         \
{ /* bda17d50-0d6b-11d3-9331-00104ba0fd40 */         \
    0xbda17d50,                                      \
    0x0d6b,                                          \
    0x11d3,                                          \
    {0x93, 0x31, 0x00, 0x10, 0x4b, 0xa0, 0xfd, 0x40} \
}
#define NS_SUPPORTSARRAY_PROGID "component://netscape/supports-array"
#define NS_SUPPORTSARRAY_CLASSNAME "Supports Array"
 
// Enumerator callback function. Return PR_FALSE to stop
typedef PRBool (*nsISupportsArrayEnumFunc)(nsISupports* aElement, void *aData);
 
%}

[scriptable, uuid(791eafa0-b9e6-11d1-8031-006008159b5a)]
interface nsISupportsArray : nsICollection {

  [notxpcom] boolean Equals([const] in nsISupportsArray other);
  
  [notxpcom] nsISupports ElementAt(in unsigned long aIndex);
  
  [notxpcom] long IndexOf([const] in nsISupports aPossibleElement);
  [notxpcom] long IndexOfStartingAt([const] in nsISupports aPossibleElement,
                                    in unsigned long aStartIndex);
  [notxpcom] long LastIndexOf([const] in nsISupports aPossibleElement);
  
  // xpcom-compatible versions
  long GetIndexOf(in nsISupports aPossibleElement);
  long GetIndexOfStartingAt(in nsISupports aPossibleElement,
                            in unsigned long aStartIndex);
  long GetLastIndexOf(in nsISupports aPossibleElement);  
  
  [notxpcom] boolean InsertElementAt(in nsISupports aElement,
                                     in unsigned long aIndex);
  [notxpcom] boolean ReplaceElementAt(in nsISupports aElement,
                                      in unsigned long aIndex);

  [notxpcom] boolean RemoveElementAt(in unsigned long aIndex);
  [notxpcom] boolean RemoveLastElement([const] in nsISupports aElement);
  
  // xpcom-compatible versions
  void DeleteLastElement(in nsISupports aElement);
  void DeleteElementAt(in unsigned long aIndex);
  
  [notxpcom] boolean AppendElements(in nsISupportsArray aElements);
  
  void Compact();
  
  [notxpcom, noscript]
      boolean EnumerateForwards(in nsISupportsArrayEnumFunc aFunc,
                                in voidStar aData);
  [notxpcom, noscript]
      boolean EnumerateBackwards(in nsISupportsArrayEnumFunc aFunc,
                                 in voidStar aData);
%{C++
private:
  NS_IMETHOD_(nsISupportsArray&) operator=(const nsISupportsArray& other) = 0;
  NS_IMETHOD_(PRBool) operator==(const nsISupportsArray& other) = 0;
  NS_IMETHOD_(nsISupports*)  operator[](PRUint32 aIndex) = 0;
%}
};

%{C++

// Construct and return a default implementation of nsISupportsArray:
extern NS_COM nsresult
NS_NewISupportsArray(nsISupportsArray** aInstancePtrResult);

// Construct and return a default implementation of an enumerator for nsISupportsArrays:
extern NS_COM nsresult
NS_NewISupportsArrayEnumerator(nsISupportsArray* array,
                               nsIBidirectionalEnumerator* *aInstancePtrResult);


%}
