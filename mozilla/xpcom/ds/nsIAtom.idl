/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/*
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code, 
 * released March 31, 1998. 
 *
 * The Initial Developer of the Original Code is Netscape Communications 
 * Corporation.  Portions created by Netscape are
 * Copyright (C) 1998-1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *     
 */
#include "nsISupports.idl"

interface nsISizeOfHandler;

%{C++
#include "nsAString.h"
#include "nsCOMPtr.h"
%}

/*
 * Should this really be scriptable?  Using atoms from script or proxies
 * could be dangerous since double-wrapping could lead to loss of
 * pointer identity.
 */
 
[scriptable, uuid(3d1b15b0-93b4-11d1-895b-006008911b81)]
interface nsIAtom : nsISupports
{
  /**
   * Translate the unicode string into the stringbuf.
   */
  [noscript] AString toString(); 
	
  /**
   * Return a pointer to a zero terminated unicode string.
   */
   void GetUnicode([shared, retval] out wstring aResult);

  /**
   * Get the size, in bytes, of the atom.
   */
  PRUint32 SizeOf(in nsISizeOfHandler aHandler);
};


%{C++
/*
 * The three forms of NS_NewAtom and do_GetAtom (for use with
 * |nsCOMPtr<nsIAtom>|) return the atom for the string given.  At any
 * given time there will always be one atom representing a given string.
 * Atoms are intended to make string comparison cheaper by simplifying
 * it to pointer equality.  A pointer to the atom that does not own a
 * reference is not guaranteed to be valid.
 *
 * The three forms of NS_NewPermanentAtom and do_GetPermanentAtom return
 * the atom for the given string and ensure that the atom is permanent.
 * An atom that is permanent will exist (occupy space at a specific
 * location in memory) until XPCOM is shut down.  The advantage of
 * permanent atoms is that they do not need to maintain a reference
 * count, which requires locking and hurts performance.
 */


/**
 * Find an atom that matches the given ISO-Latin1 C string. The
 * C string is translated into its unicode equivalent.
 */
extern NS_COM nsIAtom* NS_NewAtom(const char* isolatin1);
extern NS_COM nsIAtom* NS_NewPermanentAtom(const char* isolatin1);

inline already_AddRefed<nsIAtom> do_GetAtom(const char* isolatin1)
    { return NS_NewAtom(isolatin1); }
inline already_AddRefed<nsIAtom> do_GetPermanentAtom(const char* isolatin1)
    { return NS_NewPermanentAtom(isolatin1); }

/**
 * Find an atom that matches the given unicode string. The string is assumed
 * to be zero terminated.
 */
extern NS_COM nsIAtom* NS_NewAtom(const PRUnichar* unicode);
extern NS_COM nsIAtom* NS_NewPermanentAtom(const PRUnichar* unicode);

inline already_AddRefed<nsIAtom> do_GetAtom(const PRUnichar* unicode)
    { return NS_NewAtom(unicode); }
inline already_AddRefed<nsIAtom> do_GetPermanentAtom(const PRUnichar* unicode)
    { return NS_NewPermanentAtom(unicode); }

/**
 * Find an atom that matches the given string.
 */
extern NS_COM nsIAtom* NS_NewAtom(const nsAString& aString);
extern NS_COM nsIAtom* NS_NewPermanentAtom(const nsAString& aString);

inline already_AddRefed<nsIAtom> do_GetAtom(const nsAString& aString)
    { return NS_NewAtom(aString); }
inline already_AddRefed<nsIAtom> do_GetPermanentAtom(const nsAString& aString)
    { return NS_NewPermanentAtom(aString); }

/**
 * Return a count of the total number of atoms currently
 * alive in the system.
 */
extern NS_COM nsrefcnt NS_GetNumberOfAtoms(void);

%}
