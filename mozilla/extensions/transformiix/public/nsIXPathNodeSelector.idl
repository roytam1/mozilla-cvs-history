/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ----- BEGIN LICENSE BLOCK -----
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is .
 *
 * The Initial Developer of the Original Code is .
 * Portions created by  are
 * Copyright (C)  . All
 * Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the LGPL or the GPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ----- END LICENSE BLOCK ----- */

#include "nsISupports.idl"

#include "domstubs.idl"
%{C++
#include "nsString.h"
%}

/**
 * The nsIXPathNodeSelector can be used to query a DOM tree using XPath.
 */

[scriptable, uuid(f70c3f08-1dd1-11b2-b582-db02dfacb173)]
interface nsIXPathNodeSelector : nsISupports
{

  /**
   * Return a nodelist that is the result of an XPath query of the tree
   * fragment starting with the context node.
   *
   * @param aContextNode The context node for the query.
   * @param aPattern The pattern for the query.
   *
   * @returns The result of the XPath query.
   */
    nsIDOMNodeList selectNodes(in nsIDOMNode aContextNode,
	                             in DOMString aPattern);						  
};


%{ C++
extern nsresult
NS_NewXPathNodeSelector(nsIXPathNodeSelector** aNodeSelector);
%}
