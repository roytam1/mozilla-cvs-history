<?xml version="1.0" encoding="utf-8"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Mozilla XForms support.
   -
   - The Initial Developer of the Original Code is
   - Novell, Inc.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -  Allan Beaufour <abeaufour@novell.com>
   -  Alexander Surkov <surkov.alexander@gmail.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml">

  <!-- RANGE: <NUMBER>
    This binding is base for xforms range controls. It assumes successors
    bindings implement getElementControl() method that returns the object:
    {
      get/set value(); // get/set "number" value
      set readonly(); // makes range disabled
      get/set start(); // get/set @start attribute, type is "number"
      get/set end(); // get/set @end attribute, type is "number"
      get/set step(); // get/set @step attribute, type is "number"
      focus() // set the focus
    }
  -->
  <binding id="xformswidget-range-base"
           extends="chrome://xforms/content/xforms.xml#xformswidget-base">

    <implementation>
      <method name="refresh">
        <body>
        <![CDATA[
          this.control.readonly = this.accessors.isReadonly();

          var value = parseFloat(this.accessors.getValue());
          if (!value)
            return;

          var inrange = this.start >= value && value <= this.end;
          this.accessors.setInRange(inrange);
          this.control.set(this.start, this.end, this.step, value);
        ]]>
        </body>
      </method>

      <method name="focus">
        <body>
          this.control.focus();
        </body>
      </method>

      <method name="getCurrentValue">
        <body>
          var value = this.control.value;
          return isNaN(value) ? "" : value;
        </body>
      </method>

      <property name="start"
                onget="return this.control.start;"
                onset="this.setAttribute('start', val); this.control.start = val;"/>

      <property name="end"
                onget="return this.control.end;"
                onset="this.setAttribute('end', val); this.control.end = val;"/>

      <property name="step"
                onget="return this.control.step;"
                onset="this.setAttribute('step', val); this.control.step = val;"/>

      <property name="incremental">
        <getter>
          return this.getAttribute("incremental") == "true";
        </getter>
        <setter>
          if (val)
            this.setAttribute("incremental", "true");
          else
            this.removeAttribute("incremental");
        </setter>
      </property>

      <property name="accessors" readonly="true">
        <getter>
        <![CDATA[
          if (!this._accessors && this.delegate) {
            this._accessors = this.delegate.getXFormsAccessors().
              QueryInterface(Components.interfaces.nsIXFormsRangeAccessors);
          }
          return this._accessors;
        ]]>
        </getter>
      </property>

      <method name="updateInstanceData">
        <parameter name="aIncremental"/>
        <body>
          if (!this.accessors.hasBoundNode())
            return;

          if (!aIncremental || this.incremental)
            this.accessors.setValue(this.control.value);
        </body>
      </method>
    </implementation>
  </binding>

</bindings>
