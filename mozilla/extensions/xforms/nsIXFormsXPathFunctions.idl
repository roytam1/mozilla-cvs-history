/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Peter Van der Beken.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Peter Van der Beken <peterv@propagandism.org>
 *
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "txIFunctionEvaluationContext.idl"

[scriptable, uuid(c227850e-c326-4458-b436-0c4680fbe0d5)]
interface nsIXFormsXPathFunctions : nsISupports
{
    double avg(in txINodeSet aNodeSet);
    boolean booleanFromString(in DOMString aString);
    double countNonEmpty(in txINodeSet aNodeSet);
    double daysFromDate(in DOMString aDateTime);
    DOMString if(in boolean aValue, in DOMString aIfString, in DOMString aElseString);
    double index(in txIFunctionEvaluationContext aContext, in DOMString aId);
    txINodeSet instance(in txIFunctionEvaluationContext aContext, in DOMString aString);
    double max(in txINodeSet aNodeSet);
    double min(in txINodeSet aNodeSet);
    double months(in DOMString aDuration);
    DOMString now();
    DOMString localDate();
    DOMString localDateTime();
    DOMString property(in DOMString aProperty);
    double seconds(in DOMString aDuration);
    double secondsFromDateTime(in DOMString aDateTime);
    txINodeSet current(in txIFunctionEvaluationContext aContext);
    txINodeSet event(in txIFunctionEvaluationContext aContext, in DOMString aString);
    double power(in double aBase, in double aExponent);
    double random(in boolean aSeed);
    double compare(in DOMString aString1, in DOMString aString2);
    boolean isCardNumber(in DOMString aNumber);
    DOMString daysToDate(in double aDays);
    DOMString secondsToDateTime(in double aSeconds);
    // context is translated to contextNode because context is a reserved word.
    txINodeSet contextNode(in txIFunctionEvaluationContext aContext);
};
