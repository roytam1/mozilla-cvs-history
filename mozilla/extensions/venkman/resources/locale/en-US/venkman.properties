#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/ 
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License. 
#
# The Original Code is The JavaScript Debugger
# 
# The Initial Developer of the Original Code is
# Netscape Communications Corporation
# Portions created by Netscape are
# Copyright (C) 1998 Netscape Communications Corporation.
#
# Alternatively, the contents of this file may be used under the
# terms of the GNU Public License (the "GPL"), in which case the
# provisions of the GPL are applicable instead of those above.
# If you wish to allow use of your version of this file only
# under the terms of the GPL and not to allow others to use your
# version of this file under the MPL, indicate your decision by
# deleting the provisions above and replace them with the notice
# and other provisions required by the GPL.  If you do not delete
# the provisions above, a recipient may use your version of this
# file under either the MPL or the GPL.
#
# Contributor(s):
#  Robert Ginda, <rginda@netscape.com>, original author
#

## exception descriptions ##
err.notimplemented = Not implemented
err.required.param = Missing required parameter %1$S
err.invalid.param  = Invalid value for parameter %1$S (%2$S)
# 1 url, 2 fileName, 3 lineNumber, 4 reason
err.subscript.load = Error loading subscript from <%1$S>.
err.no.debugger    = JS Debugger Service is not installed.
err.failure        = Unclassified failure.
err.no.stack       = No Stack
err.no.source      = No scripts loaded match ``%1$S''.

## error messages ##
msg.err.nostack         = No stack
msg.err.noscript        = No debuggable scripts found for ``%1$S''
msg.err.nocommand       = No such command, ``%1$S''
msg.err.disabled        = Sorry, ``%1$S'' is currently disabled
msg.err.notimplemented  = Sorry, ``%1$S'' has not been implemented
msg.err.ambigcommand    = Ambiguous command, ``%1$S'', %2$S commands match [%3$S]
msg.err.bp.noscript     = <%1$S> URL not loaded
msg.err.bp.noline       = <%1$S> contains no code at line %2$S
msg.err.bp.nodice       = No breakpoint set at <%1$S> line %2$S
msg.err.bp.noindex      = No breakpoint at index %1$S
msg.err.source.load.failed = Error loading source for URL <%1$S>
msg.err.startup         = An exception occurred while initializing, please file a bug.\n%1$S
msg.err.cant.close      = Cannot exit, execution in progress.
msg.err.internal.bpt    = Internal error handling breakpoint.

## "values" ##
msg.val.commasp     = ,%1$S
msg.val.unknown     = <unknown>
msg.val.console     = <console>
msg.val.na          = <not-available>
msg.val.object      = <object>
msg.val.expression  = <expression>
msg.val.proto       = [[Prototype]]
msg.val.parent      = [[Parent]]

## words ##
msg.val.native      = native
msg.val.script      = script
msg.val.this        = this
msg.val.breakpoint  = breakpoint
msg.val.debug       = error handler
msg.val.debugger    = debugger keyword
msg.val.throw       = thrown exception
msg.val.scope       = scope
msg.val.exception   = exception
msg.val.on          = on
msg.val.off         = off
msg.val.tlscript    = __toplevel__
msg.val.toscript    = [TimeoutScript]
msg.val.ivscript    = [IntervalScript]
msg.val.evscript    = [EvalScript]

## types ##
msg.type.int        = integer
msg.type.boolean    = boolean
msg.type.double     = double
msg.type.function   = function
msg.type.null       = null
msg.type.object     = object
msg.type.string     = string
msg.type.unknown    = unknown
msg.type.void       = void

msg.class.xpcobj    = XPComponent
msg.blacklist       = Blacklist
msg.break.rec       = Breakpoints
msg.callstack       = Call Stack

## messages ##
msg.status.default   = Welcome to the JavaScript Debugger
msg.status.loading   = Loading source for ``%1$S''
msg.status.marking   = Marking source for ``%1$S''
msg.status.stopped   = Stopped in %1$S, %2$S

msg.stop             = Stopped for %1$S.
msg.cont             = Continuing from %1$S.
msg.subscript.load   = Subscript <%1$S> loaded with result ``%2$S''.
# 1 exception name, 2 fileName, 3 lineNumber
msg.eval.error       = %1$S: <%2$S>, line %3$S
msg.eval.threw       = Caught exception: %1$S
msg.hello            = Welcome to ``Venkman'', the JavaScript debugger. Visit the Venkman homepage <http://www.mozilla.org/projects/venkman/> for more information, or <chrome://venkman/content/tests/testpage.html> for a sample debugging target.
msg.version          = You are running Venkman version %1$S.
msg.tip.help         = Use ``help <command-name>'' for help on specific commands.
msg.no.breakpoints.set = No breakpoints set.
msg.no.fbreaks.set   = No future breakpoints set.
msg.noproperties     = %1$S has no properties.
msg.no-commandmatch  = No commands match ``%1$S''.
msg.commandmatch     = Commands matching ``%1$S'' are [%2$S].
msg.commandmatch.all = Implemented commands are %1$S.
msg.props.header     = Properties of %1$S in debug target scope:
msg.propsd.header    = Properties of %1$S in debugger scope:
msg.bp.header        = %1$S breakpoints set:
# 1 index, 2 file name, 3 line, 4 match count
msg.bp.line          = #%1$S <%2$S> line %3$S (%4$S scripts match.)
msg.bp.created       = Breakpoint at <%1$S> line %2$S created (%3$S scripts match.)
msg.bp.disabled      = Breakpoint at <%1$S> line %2$S disabled (%3$S scripts match.)
msg.bp.cleared       = Breakpoint at <%1$S> line %2$S deleted (%3$S scripts match.)
msg.bp.exists        = Breakpoint at <%1$S> line %2$S already set.
msg.fbp.header       = %1$S future breakpoints set:
# 1 index, 2 file name, 3 line
msg.fbp.line         = #%1$S %2$S:%3$S
msg.fbp.created      = Future breakpoint at <%1$S> line %2$S created.
msg.fbp.disabled     = Future breakpoint at <%1$S> line %2$S deleted.
msg.fbp.exists       = Future breakpoint at <%1$S> line %2$S already set.
msg.source.line      = %1$S: %2$S
msg.emode.ignore     = Errors will now be ignored.
msg.emode.trace      = Errors will now be traced.
msg.emode.break      = Errors will now stop the debug target.
msg.tmode.ignore     = Exceptions will now be ignored.
msg.tmode.trace      = Exceptions will now be traced.
msg.tmode.break      = Exceptions will now stop the debug target.
msg.iasmode          = Initialize at Startup is now %1$S.
msg.chrome.filter    = Chrome filtering is now %1$S.
# 1 value, 2 frame
msg.exception.trace  = Exception %1$S thrown from %2$S.
# 1 message, 2 flags, 3 file, 4 line, 5 pos
msg.erpt.error       = Error ``%1$S'' [%2$S] in file ``%3$S'', line %4$S, character %5$S.
msg.erpt.warn        = Warning ``%1$S'' [%2$S] in file ``%3$S'', line %4$S, character %5$S.

## property value flags ##
vf.enumerable = e
vf.readonly   = r
vf.permanent  = p
vf.alias      = A
vf.argument   = a
vf.variable   = v
vf.hinted     = h

## formatting ##

# 1: argument name, 2: value
fmt.argument = %1$S=%2$S
# 1: property flags, 2: property name, 3: property value
fmt.property = [%1$S] %2$S = %3$S
# 1: function name, 2: filename
fmt.script = function %1$S in <%2$S>
# 1: function name, 2: arguments, 3: filename, 4: line number
fmt.frame = function %1$S(%2$S) in <%3$S> line %4$S
# 1: type, 2: class name, 3: value
fmt.value.long = [%1$S] [class: %2$S] %3$S
# 1: type, 2: value
fmt.value.med  = [%1$S] %2$S
# 1: type, 2: value
fmt.value.short = %1$S:%2$S
# 1: property count
fmt.object = %1$S properties
# 1: JS exception name, 2: error text, 3: file name, 4: line number
fmt.jsexception = %1$S: %2$S @ <%3$S> %4$S
# 1: error number,  2: error text, 3: file name, 4: line number, 5: function name
fmt.badmojo = BadMojo %1$S: %2$S @ <%3$S> line %4$S (%5$S)
# 1: var number, 2: value
fmt.tmp.assign = $[%1$S] = %2$S
# 1: string length
fmt.longstr = %1$S characters
# 1: command name 2: parameters
fmt.usage = %1$S %2$S
# 1: function name
fmt.guessedname = [%1$S]
# 1: pref name 2: value
fmt.prefvalue = Preference ``%1$S'' is ``%2$S''

## menu headings ##
mnu.debug = &Debug
mnu.view  = &View
popup.project = Project View Context Menu
popup.source  = Source View Context Menu
popup.script  = Script View Context Menu
popup.stack   = Stack View Context Menu
popup.console = Console View Context Menu

msg.default.alias.help = This command is an alias for ``%1$S''.
msg.help.title       = -- Help --
msg.no.help          = Help not available.
msg.extra.params     = Extra parameters ``%1$S'' ignored.
#msg.doc.consolehdr   = Console Commands
#msg.doc.menuhdr      = Menus
#msg.doc.popuphdr     = Popups
#msg.doc.keyhdr       = Keys

msg.note.console     = This command is available from the console.
msg.note.noconsole    = This command is NOT available from the console.
msg.note.needstack   = You must be stopped at a breakpoint to use this command.
msg.note.nostack     = You CANNOT be stopped at a breakpoint to use this command.
msg.doc.commandlabel = "     Command Name: ``%1$S'' (%2$S)
msg.doc.key          = "Keyboard Shortcut: %1$S
msg.doc.syntax       = "           Syntax: %1$S %2$S
msg.doc.notes        = Notes:
msg.doc.description  = Description:


###################### DO NO LOCALIZE THE *.params STRINGS ######################

## commands ##

cmd.break.label  = &Set Breakpoint
cmd.break.params = [<file-name> <line-number>]
cmd.break.help   = Set a breakpoint in the file named <file-name> at the line number <line-number>.  <file-name> can be a substring of the actual filename.  If no parameters are specified all active breakpoints will be listed.  See also: clear.

cmd.bp-props.label  = Breakpoint &Properties
cmd.bp-props.params = <breakpoint-rec>
cmd.bp-props.help   = Displays a properties dialog for the selected breakpoint <brekpoint-rec>.

cmd.chrome-filter.params = [<toggle>]
cmd.chrome-filter.help   = Enables or disabled the filtering of chrome: urls.  With chrome: filtering on, the JavaScript files which make up the browser will not be displayed in the Script View, and the debugger will not step through them while debugging.
cmd.toggle-chrome.label  = &Hide Browser Files

cmd.clear.label  = &Clear Breakpoint
cmd.clear.params = <breakpoint-index>
cmd.clear.help   = Clears breakpoint at index <breakpoint-index>.  See also: break.

cmd.clear-all.label  = &Clear All Breakpoints
cmd.clear-all.help   = Clears every breakpoint currently defined.

cmd.clear-script.label  = &Clear Script Breakpoints
cmd.clear-script.params = <script-rec> [<...>]
cmd.clear-script.help   = Clear all breakpoints in <script-rec>.

cmd.commands.params = [<pattern>]
cmd.commands.help   = Lists all command names matching <pattern>, or all command names if pattern is not specified.

cmd.cont.label = &Continue
cmd.cont.key   = VK_F5
cmd.cont.help  = Continue execution of the debug target.

cmd.emode.params = [<mode>]
cmd.emode.help   = Sets what action the debugger should take when an error occurs in the debug target.  ``emode ignore'' ignores all errors, ``emode trace'' shows a log of the error in the console, and ``emode break'' stops excecution when an error is thrown.  ``emode'' without any parameter will display the current error mode.  Note that ``emode'' controls what happens whan an exception goes uncaught, to control what happens when an exception is *thrown*, use ``tmode''.

cmd.eval.params = <script-text>
cmd.eval.help   = Evaluates <script-text> in the scope of the debug target's current frame.  See also: frame, where, props, and evald.

cmd.evald.params = <script-text>
cmd.evald.help   = Evaluates <script-text> in the debugger's scope.  See also: eval.

cmd.em-break.label  = Stop for E&rrors
cmd.em-cycle.label  = Cycle Error Mode
cmd.em-cycle.key    = accel shift  E
cmd.em-ignore.label = Ig&nore Errors
cmd.em-trace.label  = Tr&ace Errors

cmd.fbreak.params = [<file-pattern> <line-number>]
cmd.fbreak.help   = Sets a ``future'' breakpoint.  Any time a script whose file name matches <file-pattern> is loaded, a breakpoint a <line-number> is set.  Setting a breakpoint at line 1 will cause the debugger to break when the script is loaded.  fbreak with no parameters will list all future breakponts.  See also: break

cmd.find-bp.label  = Find &Breakpoint
cmd.find-bp.params = <breakpoint-rec>
cmd.find-bp.help   = Focus the breakpoint specified by the BreakpointRecord <breakpoint-rec>

cmd.find-creator.label  = Find &Creator
cmd.find-creator.params = <jsd-value>
cmd.find-creator.help   = Focus the creator of the object referenced by the jsdIValue <jsd-value>.

cmd.find-ctor.label  = Find C&onstructor
cmd.find-ctor.params = <jsd-value>
cmd.find-ctor.help   = Focus the constructor of the object referenced by the jsdIValue <jsd-value>.

cmd.find-url-soft.label  = &Soft Focus URL
cmd.find-url-soft.params = <url> <line-number>
cmd.find-url-soft.help   = Displays the contents of the URL <url> in the source view.  If <line-number> is not already in the center two thirds of the source view, the view is not scrolled, otherwise, the view is scrolled so that <line-number> is two lines from the top of the view.

cmd.find-url.label  = Find &URL
cmd.find-url.params = <url> [<range-start> [<range-end>]]
cmd.find-url.help   = Displays the contents of the URL <url> in the source view.  If <range-start> is provided, the source will be scrolled to that line.  If <range-end> is also provided, all of the text between <range-start> and <range-end> will be highlighted.

cmd.find-frame.label   = Find &Frame Source
cmd.find-frame.params  = <frameIndex>
cmd.find-frame.help    = Focus the stack frame specified by the integer <frameIndex>.

cmd.find-script.label  = Find F&unction
cmd.find-script.params = <script-rec>
cmd.find-script.help   = Focus the stack script specified by the ScriptRecord <script-rec>.

cmd.finish.label = S&tep Out
cmd.finish.key   = shift VK_F11
cmd.finish.help  = Execute until the current stack frame returns.

cmd.focus-input.key  = VK_ESCAPE
cmd.focus-input.help = Places focus in the console's text input widget.

cmd.frame.params = [<frameIndex>]
cmd.frame.help   = Sets the current frame to the one numbered <frameIndex>, and displays a summary of the frame.  If <frameIndex> is not provided, a summary of the current frame will be displayed.  Use the where command to list available frames and frame numbers.

cmd.help.params = [<pattern>]
cmd.help.help   = Displays help on <pattern>, which can be a full command name, or the first few characters of the command name.  If <pattern> matches more than one command, help on all matching commands will be displayed.  If <pattern> is not provided, a complete command reference will be loaded in the source view.

cmd.loadd.label  = Load Script in Debugger Scope
cmd.loadd.params = <url>
cmd.loadd.help   = Executes the contents of the url specified by <url> in the context of the debugger.  Useful for loading debugger plugins.  See also: The ``initialScripts'' pref.

cmd.next.label = Step &Over
cmd.next.key   = VK_F10
cmd.next.help  = Executes the next line of script.  If a function call is encountered it is traced as a single instruction.

cmd.pprint.label = &Pretty Print
cmd.pprint.key   = accel P
cmd.pprint.help  = Toggle Pretty Print mode.

cmd.pref.params  = [<pref-name> [<pref-value>]]
cmd.pref.help    = Sets the value of the preference named <pref-name> to the value of <pref-value>.  If <pref-value> is not provided, the current value of <pref-name> will be displayed.  If both <pref-name> and <pref-value> are omitted, all preferences will be displayed.

cmd.props.params = <script-text>
cmd.props.help   = Lists the properties of the value returned by <script-text>.  The expression is evaluated in the scope of the debug target's current frame.  See also: where, frame, eval, and propsd.

cmd.propsd.params = <script-text>
cmd.propsd.help   = Lists the properties of the value returned by <script-text>.  The expression is evaluated in the debugger's scope.  See also: props.

cmd.reload.label = &Reload Source
cmd.reload.key   = accel R
cmd.reload.help  = Reload the currently dsplayed source.

cmd.reloadui.key = accel alt R

cmd.scope.help = Lists the properties of the topmost object in the scope chain for the current frame.

cmd.startup-init.label  = Initialize at &Startup
cmd.startup-init.params = [<toggle>]
cmd.startup-init.help   = Sets the state of the "Initialize at Startup" feature.  With this feature enabled, the debugger will begin tracking scripts when the browser is first started, instead of waiting until the user interface is launched.  This will allow the script list to display files that were loaded before you started the debugger user interface.  This feature incurrs a *slight* performance hit, and so it is off by default.  The value of <toggle> can be "true", "on", "yes", or "1" to turn the flag on; "false", "off", "no", or "0" to turn it off; or "toggle" to invert the current state.  If <toggle> is not provided, the current state will be displayed.

cmd.stop.label = Sto&p
cmd.stop.key   = VK_F4
cmd.stop.help  = Stop before the next line of code is executed.

cmd.step.label = Step &Into
cmd.step.key   = VK_F11
cmd.step.help  = Executes the next line of script and stops.

cmd.testargs.params = <int> <word> [<word2> <word3>]
cmd.testargs.help   = Function for testing argument parsing.  Pass it what it wants, and it'll spit out the event object to stdout.

cmd.testargs1.params = <int> [<...>]
cmd.testargs1.help   = Function for testing argument parsing.  Pass it what it wants, and it'll spit out the event object to stdout.

cmd.tmode.params = [<mode>]
cmd.tmode.help   = Sets what action the debugger should take when an exception is thrown from the debug target.  ``tmode ignore'' ignores all exceptions, ``tmode trace'' shows a log of the exception to the console, and ``tmode break'' stops excecution when an exception is thrown.  ``tmode'' without any parameter will display the current throw mode.  Note that ``tmode'' controls what happens whan an exception is *thrown*, to control what happens when an exception reaches the top level and becomes an error, use ``emode''.  The key combination Control + T can be used to cycle the throw mode.

cmd.tm-break.label  = Stop for &Exceptions
cmd.tm-cycle.label  = Cycle Exception Mode
cmd.tm-cycle.key    = accel T
cmd.tm-ignore.label = I&gnore Exceptions 
cmd.tm-trace.label  = T&race Exceptions


cmd.version.help = Display version information.
cmd.where.help   = Displays a summarized list of stack frames in the current call chain.

cmd.quit.help    = Close this window.
