#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/ 
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License. 
#
# The Original Code is The JavaScript Debugger
# 
# The Initial Developer of the Original Code is
# Netscape Communications Corporation
# Portions created by Netscape are
# Copyright (C) 1998 Netscape Communications Corporation.
#
# Alternatively, the contents of this file may be used under the
# terms of the GNU Public License (the "GPL"), in which case the
# provisions of the GPL are applicable instead of those above.
# If you wish to allow use of your version of this file only
# under the terms of the GPL and not to allow others to use your
# version of this file under the MPL, indicate your decision by
# deleting the provisions above and replace them with the notice
# and other provisions required by the GPL.  If you do not delete
# the provisions above, a recipient may use your version of this
# file under either the MPL or the GPL.
#
# Contributor(s):
#  Robert Ginda, <rginda@netscape.com>, original author
#

# NOTE ON LEADING/TRAILING SPACES AND QUOTES...
# Strings in this file are stripped of leading and trailing qoutes, if they are
# present.  This allows you to express leading and trailing whitespace, which
# would otherwise be trimmed by the stringbundle code.  In order to express
# a leading or trailing quote, use two of them.
#
# For example...
#
# my.message1 = "          foo"
# my.message2 = "          foo
#  Both of these produce 10 spaces, followed by the word ``foo''.
# my.message3 = "foo          "
# my.message3 = foo          "
#  Both of these produce the word ``foo'', followed by 10 spaces.
# my.message4 = A sphincter says, "what?""
# my.message4 = "A sphincter says, "what?""
#  Both of these produce the phrase ``A sphincter says "what?"''
#

## exception descriptions ##
err.notimplemented = Not implemented
err.required.param = Missing required parameter %1$S
err.invalid.param  = Invalid value for parameter %1$S (%2$S)
# 1 url, 2 fileName, 3 lineNumber, 4 reason
err.subscript.load = Error loading subscript from <%1$S>.
err.no.debugger    = JS Debugger Service is not installed.
err.failure        = Unclassified failure.
err.no.stack       = No Stack

## error messages ##
msn.err.required.param  = Missing required parameter %1$S
msn.err.invalid.param   = Invalid value for parameter %1$S (%2$S)
msn.err.scriptload      = Error loading subscript from <%1$S>.
msn.err.no.source       = No scripts loaded match ``%1$S''.
msn.err.no.such.view    = No such view ``%1$S''.
msn.err.no.such.container = No such container ``%1$S''.
msg.err.nostack         = No stack
msn.err.noscript        = No debuggable scripts found for ``%1$S''
msn.err.nocommand       = No such command, ``%1$S''
msn.err.disabled        = Sorry, ``%1$S'' is currently disabled
msn.err.notimplemented  = Sorry, ``%1$S'' has not been implemented
msn.err.ambigcommand    = Ambiguous command, ``%1$S'', %2$S commands match [%3$S]
msn.err.bp.noscript     = <%1$S> URL not loaded
msn.err.bp.noline       = <%1$S> contains no code at line %2$S
msn.err.bp.nodice       = No breakpoint set at <%1$S> line %2$S
msn.err.bp.noindex      = No breakpoint at index %1$S
msn.err.source.load.failed = Error loading URL <%1$S>: %2$S
msn.err.startup         = An exception occurred while initializing, please file a bug.\n%1$S
msg.err.internal.bpt    = Internal error handling breakpoint.
msn.err.internal.dispatch = Internal error dispatching command ``%1$S''.

## "values" ##
msg.val.unknown     = <unknown>
msg.val.console     = <console>
msg.val.na          = <not-available>
msg.val.object      = <object>
msg.val.expression  = <expression>
msg.val.proto       = [[Prototype]]
msg.val.parent      = [[Parent]]

## words ##
msg.val.native      = native
msg.val.script      = script
msg.val.this        = this
msg.val.breakpoint  = breakpoint
msg.val.debug       = error handler
msg.val.debugger    = debugger keyword
msg.val.throw       = thrown exception
msg.val.scope       = scope
msg.val.exception   = exception
msg.val.on          = on
msg.val.off         = off
msg.val.tlscript    = __toplevel__
msg.val.toscript    = [TimeoutScript]
msg.val.ivscript    = [IntervalScript]
msg.val.evscript    = [EvalScript]
msg.url.native      = x-jsd:native-code

## types ##
msg.type.int        = integer
msg.type.boolean    = boolean
msg.type.double     = double
msg.type.function   = function
msg.type.null       = null
msg.type.object     = object
msg.type.string     = string
msg.type.unknown    = unknown
msg.type.void       = void

msg.class.xpcobj    = XPComponent
msg.blacklist       = Blacklist
msg.window.rec      = Windows
msg.files.rec       = Files
msg.break.rec       = Breakpoints
msg.callstack       = Call Stack
msg.watches         = Watches
## messages ##
msg.query.close      = Debugging in progress, close anyway?
msg.status.default   = Welcome to the JavaScript Debugger
msn.status.loading   = Loading source for ``%1$S''
msn.status.marking   = Marking source for ``%1$S''
msn.status.stopped   = Stopped in %1$S, %2$S

msg.commasp          = , "
msn.stop             = Stopped for %1$S.
msn.cont             = Continuing from %1$S.
msn.subscript.loaded = Subscript <%1$S> loaded with result ``%2$S''.
# 1 exception name, 2 fileName, 3 lineNumber
msn.eval.error       = %1$S: <%2$S>, line %3$S
msn.eval.threw       = Caught exception: %1$S
msg.hello            = Welcome to ``Venkman'', the JavaScript debugger. Visit the Venkman homepage <http://www.mozilla.org/projects/venkman/> for more information, or <chrome://venkman/content/tests/testpage.html> for a sample debugging target.
msn.version          = You are running Venkman version %1$S.
msg.tip.help         = Use ``help <command-name>'' for help on specific commands.
msg.no.breakpoints.set = No breakpoints set.
msg.no.fbreaks.set   = No future breakpoints set.
msn.noproperties     = %1$S has no properties.
msn.no.cmdmatch      = No commands match ``%1$S''.
msn.cmdmatch         = Commands matching ``%1$S'' are [%2$S].
msn.cmdmatch.all     = Implemented commands are %1$S.
msn.props.header     = Properties of %1$S in debug target scope:
msn.propsd.header    = Properties of %1$S in debugger scope:
msn.bp.header        = %1$S breakpoints set:
# 1 index, 2 file name, 3 line, 4 match count
msn.bp.line          = #%1$S <%2$S> line %3$S (%4$S scripts match.)
msn.bp.created       = Breakpoint at <%1$S> line %2$S created (%3$S scripts match.)
msn.bp.disabled      = Breakpoint at <%1$S> line %2$S disabled (%3$S scripts match.)
msn.bp.cleared       = Breakpoint at <%1$S> line %2$S deleted (%3$S scripts match.)
msn.bp.exists        = Breakpoint at <%1$S> line %2$S already set.
msn.fbp.header       = %1$S future breakpoints set:
msn.watch.header     = %1$S watches set:

# 1 index, 2 file name, 3 line
msn.fbp.line         = #%1$S %2$S:%3$S
msn.fbp.created      = Future breakpoint at <%1$S> line %2$S created.
msn.fbp.disabled     = Future breakpoint at <%1$S> line %2$S deleted.
msn.fbp.exists       = Future breakpoint at <%1$S> line %2$S already set.
msn.source.line      = %1$S: %2$S
msg.emode.ignore     = Errors will now be ignored.
msg.emode.trace      = Errors will now be traced.
msg.emode.break      = Errors will now stop the debug target.
msg.tmode.ignore     = Exceptions will now be ignored.
msg.tmode.trace      = Exceptions will now be traced.
msg.tmode.break      = Exceptions will now stop the debug target.
msn.iasmode          = Initialize at Startup is now %1$S.
msn.chrome.filter    = Chrome filtering is now %1$S.
# 1 value, 2 frame
msn.exception.trace  = Exception %1$S thrown from %2$S.
# 1 message, 2 flags, 3 file, 4 line, 5 pos
msn.erpt.error       = Error ``%1$S'' [%2$S] in file ``%3$S'', line %4$S, character %5$S.
msn.erpt.warn        = Warning ``%1$S'' [%2$S] in file ``%3$S'', line %4$S, character %5$S.
msn.profile.lost     = Lost profile data for script %1$S.
msn.profile.state    = Profile data collection is now %1$S.
msn.profile.saved    = Profile data saved to <%1$S>.
msg.profile.cleared  = Profile data cleared.
msg.open.file        = Open File...
msg.open.url         = Enter a URL to Load...
msg.save.profile     = Save Profile Data As...
msg.save.source      = Save Source As...

## property value flags ##
msg.vf.enumerable = e
msg.vf.readonly   = r
msg.vf.permanent  = p
msg.vf.alias      = A
msg.vf.argument   = a
msg.vf.variable   = v
msg.vf.hinted     = h

## formatting ##

# 1: argument name, 2: value
msn.fmt.argument = %1$S=%2$S"
# 1: property flags, 2: property name, 3: property value
msn.property = [%1$S] %2$S = %3$S"
# 1: function name, 2: filename
msn.script = function %1$S in <%2$S>
# 1: function name, 2: arguments, 3: filename, 4: line number
msn.fmt.frame = function %1$S(%2$S) in <%3$S> line %4$S
# 1: type, 2: class name, 3: value
msn.fmt.value.long = [%1$S] [class: %2$S] %3$S"
# 1: type, 2: value
msn.fmt.value.med  = [%1$S] %2$S"
# 1: type, 2: value
msn.fmt.value.short = %1$S:%2$S"
# 1: property count
msn.fmt.object = %1$S properties
# 1: JS exception name, 2: error text, 3: file name, 4: line number
msn.fmt.jsexception = %1$S: %2$S @ <%3$S> %4$S"
# 1: error number,  2: error text, 3: file name, 4: line number, 5: function name
msn.fmt.badmojo = BadMojo %1$S: %2$S @ <%3$S> line %4$S (%5$S)
# 1: var number, 2: value
msn.fmt.tmp.assign = $[%1$S] = %2$S"
# 1: string length
msn.fmt.longstr = %1$S characters
# 1: command name 2: parameters
msn.fmt.usage = %1$S %2$S
# 1: function name
msn.fmt.guessedname = [%1$S]
# 1: pref name 2: value
msn.fmt.prefvalue = Preference ``%1$S'' is ``%2$S''
# 1: index, 2: label, 3: value
msn.fmt.watch.item = %1$S: %2$S = %3$S

## menu headings ##
mnu.file = &File
mnu.debug = &Debug
mnu.profile = &Profile
mnu.view  = &View
mnu.toggle-views  = Sho&w/Hide
popup.project = Project View Context Menu
popup.source  = Source View Context Menu
popup.script  = Script View Context Menu
popup.stack   = Stack View Context Menu
popup.console = Console View Context Menu

msn.default.alias.help = This command is an alias for ``%1$S''.
msg.no.help          = Help not available.
msn.extra.params     = Extra parameters ``%1$S'' ignored.
#msg.doc.consolehdr   = Console Commands
#msg.doc.menuhdr      = Menus
#msg.doc.popuphdr     = Popups
#msg.doc.keyhdr       = Keys

msg.note.console     = This command is available from the console.
msg.note.noconsole    = This command is NOT available from the console.
msg.note.needstack   = You must be stopped at a breakpoint to use this command.
msg.note.nostack     = You CANNOT be stopped at a breakpoint to use this command.
msn.doc.commandlabel = "     Command Name: ``%1$S'' (%2$S)
msn.doc.key          = "Keyboard Shortcut: %1$S
msn.doc.syntax       = "           Syntax: %1$S %2$S
msg.doc.notes        = Notes:
msg.doc.description  = Description:


###################### DO NO LOCALIZE THE *.params STRINGS ######################

## commands ##

cmd.break.label  = &Set Breakpoint
cmd.break.params = [<file-name> <line-number>]
cmd.break.help   = Set a breakpoint in the file named <file-name> at the line number <line-number>.  <file-name> can be a substring of the actual filename.  If no parameters are specified all active breakpoints will be listed.  See also: clear.

cmd.bp-props.label  = Breakpoint &Properties
cmd.bp-props.params = <breakpoint-rec>
cmd.bp-props.help   = Displays a properties dialog for the selected breakpoint <brekpoint-rec>.

cmd.chrome-filter.params = [<toggle>]
cmd.chrome-filter.help   = Enables or disabled the filtering of chrome: urls.  With chrome: filtering on, the JavaScript files which make up the browser will not be displayed in the Script View, and the debugger will not step through them while debugging.
cmd.toggle-chrome.label  = &Hide Browser Files

cmd.clear.label  = &Clear Breakpoint
cmd.clear.params = <breakpoint-index> [<...>]
cmd.clear.help   = Clears breakpoint at index <breakpoint-index>.  See also: break.

cmd.clear-all.label  = &Clear All Breakpoints
cmd.clear-all.help   = Clears every breakpoint currently defined.

cmd.clear-profile.label = C&lear Profile Data
cmd.clear-profile.help  = Zeros out any existing profile data.

cmd.clear-script.label  = &Clear Script Breakpoints
cmd.clear-script.params = <script-rec> [<...>]
cmd.clear-script.help   = Clear all breakpoints in <script-rec>.

cmd.close.label = &Close
cmd.close.key   = accel W
cmd.close.help  = Close the debugger.

cmd.commands.params = [<pattern>]
cmd.commands.help   = Lists all command names matching <pattern>, or all command names if pattern is not specified.

cmd.cont.label = &Continue
cmd.cont.key   = VK_F5
cmd.cont.help  = Continue execution of the debug target.

cmd.dumpprofile.label  = Dump Profile Data
cmd.dumpprofile.params = [<file-name>]

cmd.dumptree.params = <tree> [<depth>]

cmd.emode.params = [<mode>]
cmd.emode.help   = Sets what action the debugger should take when an error occurs in the debug target.  ``emode ignore'' ignores all errors, ``emode trace'' shows a log of the error in the console, and ``emode break'' stops excecution when an error is thrown.  ``emode'' without any parameter will display the current error mode.  Note that ``emode'' controls what happens whan an exception goes uncaught, to control what happens when an exception is *thrown*, use ``tmode''.

cmd.eval.params = <script-text>
cmd.eval.help   = Evaluates <script-text> in the scope of the debug target's current frame.  See also: frame, where, props, and evald.

cmd.evald.params = <script-text>
cmd.evald.help   = Evaluates <script-text> in the debugger's scope.  See also: eval.

cmd.em-break.label  = Stop for E&rrors
cmd.em-cycle.label  = Cycle Error Mode
cmd.em-cycle.key    = accel shift  E
cmd.em-ignore.label = Ig&nore Errors
cmd.em-trace.label  = Tr&ace Errors

cmd.fbreak.label  = Set &Future Breakpoint
cmd.fbreak.params = [<file-name> <line-number>]
cmd.fbreak.help   = Sets a ``future'' breakpoint.  Any time a script whose file name matches <file-name> is loaded, a breakpoint a <line-number> is set.  Setting a breakpoint at line 1 will cause the debugger to break when the script is loaded.  fbreak with no parameters will list all future breakponts.  See also: break

cmd.find-bp.label  = Find &Breakpoint
cmd.find-bp.params = <breakpoint-rec>
cmd.find-bp.help   = Focus the breakpoint specified by the BreakpointRecord <breakpoint-rec>

cmd.find-creator.label  = Find &Creator
cmd.find-creator.params = <jsd-value>
cmd.find-creator.help   = Focus the creator of the object referenced by the jsdIValue <jsd-value>.

cmd.find-ctor.label  = Find C&onstructor
cmd.find-ctor.params = <jsd-value>
cmd.find-ctor.help   = Focus the constructor of the object referenced by the jsdIValue <jsd-value>.

cmd.find-file.label  = &Open File...
cmd.find-file.key    = accel O
cmd.find-file.params = [<file-name>]
cmd.find-file.help   = Displays the contents of the file located at <file-name> in the script view, where <file-name> is an operating system specific path string.  If <file-name> is not provided, or is the character '?', a file chooser widget will be displayed.

cmd.find-frame.label   = Find &Frame Source
cmd.find-frame.params  = <frame-index>
cmd.find-frame.help    = Focus the stack frame specified by the frame at index <frame-index>.

cmd.find-script.label  = Find F&unction
cmd.find-script.params = <script-rec>
cmd.find-script.help   = Focus the stack script specified by the ScriptRecord <script-rec>.

cmd.find-url.label  = Find &URL
cmd.find-url.params = <url> [<range-start> [<range-end>]]
cmd.find-url.help   = Displays the contents of the URL <url> in the source view.  If <range-start> is provided, the source will be scrolled to that line.  If <range-end> is also provided, all of the text between <range-start> and <range-end> will be highlighted.

cmd.find-url-soft.label  = &Soft Focus URL
cmd.find-url-soft.params = <url> <line-number>
cmd.find-url-soft.help   = Displays the contents of the URL <url> in the source view.  If <line-number> is not already in the center two thirds of the source view, the view is not scrolled, otherwise, the view is scrolled so that <line-number> is two lines from the top of the view.

cmd.finish.label = S&tep Out
cmd.finish.key   = shift VK_F11
cmd.finish.help  = Execute until the current stack frame returns.

cmd.float.params = <view-id> [<window-id>]
cmd.float.help   = Removes the view specified by <view-id> from the main window and inserts it into a separate window.  If <window-id> is provided, the new window will be bound to it.  If an existing window is already bound to <window-id>, the floater will be placed in it, instead of a new window.

cmd.focus-input.key  = VK_ESCAPE
cmd.focus-input.help = Places focus in the console's text input widget.

cmd.frame.label  = Set &Current Frame
cmd.frame.params = [<frame-index>]
cmd.frame.help   = Sets the current frame to the one numbered <frame-index>, and displays a summary of the frame.  If <frame-index> is not provided, a summary of the current frame will be displayed.  Use the where command to list available frames and frame numbers.

cmd.grout-container.params = <view-container>
cmd.grout-container.help   = Inserts whatever "grout" is required around the view content contained by <view-container>.  If grout exists for a view that is no longer contained by <view-container>, it will be removed.  Grout can be a splitter or a new tab, depending on the particular view and/or container.

cmd.help.params = [<pattern>]
cmd.help.help   = Displays help on <pattern>, which can be a full command name, or the first few characters of the command name.  If <pattern> matches more than one command, help on all matching commands will be displayed.  If <pattern> is not provided, a complete command reference will be loaded in the source view.

cmd.hide-view.params = <view-id>
cmd.hide-view.help   = Removes the view specified by <view-id> from its container.

cmd.hook-debug-stop.help = Called when the debugger stops execution of the debug target.

cmd.hook-debug-continue.help = Called when the debugger continues execution of the debug target.

cmd.hook-display-sourcetext.params = <sourceText> <startLine> [<details>]
cmd.hook-display-sourcetext.help   = Called when a the source text object <sourceText> should be displayed to the user.  <startLine> is the line which should appear at or near the top of the display.  If <details> is provided, it will be an object representing details about where the <sourceText> object was derived from.

cmd.hook-display-sourcetext-soft.params = <sourceText> <startLine> [<details>]
cmd.hook-display-sourcetext-soft.help   = Called when a the source text object <sourceText> should be displayed to the user.  <startLine> is the line which should appear at or near the top of the display.  If <startLine> is already visible, the display should *not* be scrolled.  If <details> is provided, it will be an object representing details about where the <sourceText> object was derived from.

cmd.hook-guess-complete.params = <url>
cmd.hook-guess-complete.help   = Called when function name guessing has completed for the url <url>.

cmd.hook-source-load-complete.params = <sourceText> <status>
cmd.hook-source-load-complete.help   = Called when the source text represented by the object <sourceText> is loaded (or reloaded.)  <status> indicates the status of the load.  A <status> of 0 indicates success, non-zero values indicate a failure.

cmd.hook-window-closed.params = <window>
cmd.hook-window-closed.help   = Called when a window object is destroyed.  <window> is a reference to the DOM window object for the window.

cmd.hook-window-loaded.params = <event>
cmd.hook-window-loaded.help   = Called when a source file is loaded into a window object.  <event> is a reference to the DOM event passed to the onLoad handler of the window.

cmd.hook-window-opened.params = <window>
cmd.hook-window-opened.help   = Called when a new window object is opened.  The source for this window will most likely *not* be loaded at this point.  <window> is a reference to the DOM window object for the new window.

cmd.hook-window-unloaded.params = <event>
cmd.hook-window-unloaded.help   = Called when a source file is unloaded from a window object.  <event> is a reference to the DOM event passed to the onUnload handler of the window.

cmd.loadd.label  = Load Script in Debugger Scope
cmd.loadd.params = <url>
cmd.loadd.help   = Executes the contents of the url specified by <url> in the context of the debugger.  Useful for loading debugger plugins.  See also: The ``initialScripts'' pref.

cmd.move-view.params = <view-content> <view-container> [<before-content>]
cmd.move-view.help   = Moves the view associated <view-content> into the element specified by <view-container>.  If the view associated by <view-content> is already displayed somewhere, it will be removed from its container.  If <before-content> is provided, <view-content> will be placed before <before-content> in <view-container>, otherwise <view-content> will become the first child of <view-content>.  If <view-container> is |null| the view will be hidden.

cmd.next.label = Step &Over
cmd.next.key   = VK_F10
cmd.next.help  = Executes the next line of script.  If a function call is encountered it is traced as a single instruction.

cmd.open-dialog.params = <url> [<window-name> [<window-flags>]]
cmd.open-dialog.help   = Opens a dialog window and loads the source from <url>.  This is typically used to open a new XUL window, though it can be used to load a web page without chrome.

cmd.open-url.help  = Prompts the user for a url to load in the source view.
cmd.open-url.label = Open Web &Location...
cmd.open-url.key   = accel shift L

cmd.pprint.params = <toggle>
cmd.pprint.help   = Set the state of Pretty Print mode.

cmd.toggle-pprint.label = &Pretty Print
cmd.toggle-pprint.key   = accel P
cmd.toggle-pprint.help  = Toggle Pretty Print mode.

cmd.pref.params  = [<pref-name> [<pref-value>]]
cmd.pref.help    = Sets the value of the preference named <pref-name> to the value of <pref-value>.  If <pref-value> is not provided, the current value of <pref-name> will be displayed.  If both <pref-name> and <pref-value> are omitted, all preferences will be displayed.

cmd.profile.params = [<toggle>]
cmd.profile.help   = Enables or disables the collection of profile data.  If <toggle> is not provided, the current state is displayed.

cmd.toggle-profile.label  = &Collect Profile Data

cmd.profile-tb.label = Profile

cmd.props.params = <script-text>
cmd.props.help   = Lists the properties of the value returned by <script-text>.  The expression is evaluated in the scope of the debug target's current frame.  See also: where, frame, eval, and propsd.

cmd.propsd.params = <script-text>
cmd.propsd.help   = Lists the properties of the value returned by <script-text>.  The expression is evaluated in the debugger's scope.  See also: props.

cmd.quit.label = &Quit
cmd.quit.key   = accel Q
cmd.quit.help  = Quit Mozilla.

cmd.reload.label = &Reload Source
cmd.reload.key   = accel R
cmd.reload.help  = Reload the currently dsplayed source.

cmd.reloadui.key = accel alt R

cmd.save-source.label = &Save Source View As...
cmd.save-source.params = [<target-file>]
cmd.save-source.key   = accel S
cmd.save-source.help  = Saves the contents of the source view to a file on the local system.  If <target-file> is not provided, or is the character '?', a file chooser widget will be displayed.  <target-file> is an operating system specific path string.

cmd.save-profile.label = Save P&rofile Data As...
cmd.save-profile.params = [<target-file> [<url> [<...>]]
cmd.save-profile.help = Saves the profile data collected for one or more source files specified by <url> into the file at <target-file>.  If <target-file> is not provided, or is the character '?', a file chooser widget will be displayed.  If <url> is not provided, all profile data is saved.  <target-file> is an operating system specific path string, <url> is a complete url.

cmd.scope.help = Lists the properties of the topmost object in the scope chain for the current frame.

cmd.startup-init.label  = Initialize at &Startup
cmd.startup-init.params = [<toggle>]
cmd.startup-init.help   = Sets the state of the "Initialize at Startup" feature.  With this feature enabled, the debugger will begin tracking scripts when the browser is first started, instead of waiting until the user interface is launched.  This will allow the script list to display files that were loaded before you started the debugger user interface.  This feature incurrs a *slight* performance hit, and so it is off by default.  The value of <toggle> can be "true", "on", "yes", or "1" to turn the flag on; "false", "off", "no", or "0" to turn it off; or "toggle" to invert the current state.  If <toggle> is not provided, the current state will be displayed.

cmd.stop.label = Sto&p
cmd.stop.key   = VK_F4
cmd.stop.help  = Stop before the next line of code is executed.

cmd.step.label = Step &Into
cmd.step.key   = VK_F11
cmd.step.help  = Executes the next line of script and stops.

cmd.testargs.params = <int> <word> [<word2> <word3>]
cmd.testargs.help   = Function for testing argument parsing.  Pass it what it wants, and it'll spit out the event object to stdout.

cmd.testargs1.params = <int> [<...>]
cmd.testargs1.help   = Function for testing argument parsing.  Pass it what it wants, and it'll spit out the event object to stdout.

cmd.tmode.params = [<mode>]
cmd.tmode.help   = Sets what action the debugger should take when an exception is thrown from the debug target.  ``tmode ignore'' ignores all exceptions, ``tmode trace'' shows a log of the exception to the console, and ``tmode break'' stops excecution when an exception is thrown.  ``tmode'' without any parameter will display the current throw mode.  Note that ``tmode'' controls what happens whan an exception is *thrown*, to control what happens when an exception reaches the top level and becomes an error, use ``emode''.  The key combination Control + T can be used to cycle the throw mode.

cmd.tm-break.label  = Stop for &Exceptions
cmd.tm-cycle.label  = Cycle Exception Mode
cmd.tm-cycle.key    = accel T
cmd.tm-ignore.label = I&gnore Exceptions 
cmd.tm-trace.label  = T&race Exceptions

cmd.toggle-view.params = <view-id> [<container-id>]
cmd.toggle-view.help   = Displays the view with the id <view-id> in the container with the id <container-id>.  If the view is already displayed somewhere, it is removed first.  If <container-id> is not provided, the default <container-id> associated with <view-id> will be used.  If the view represented by <view-id> is already being displayed, and <container-id> is not provided, the view will be hidden.

cmd.toggle-breaks.label  = &Breakpoints
cmd.toggle-stack.label   = &Call Stack
cmd.toggle-locals.label  = &Local Variables
cmd.toggle-scripts.label = L&oaded Scripts
cmd.toggle-windows.label = &Open Windows
cmd.toggle-source.label  = &Source Code
cmd.toggle-watch.label   = &Watches


cmd.version.help = Display version information.

cmd.watch-expr.params = [<expression>]
cmd.watch-expr.help   = Evaluates <expression> in the debug target scope and adds the result to the watch window.  If <expression> is not provided, all watches are printed to the console.

cmd.watch-exprd.params = [<expression>]
cmd.watch-exprd.help   = Evaluates <expression> in the debugger scope and adds the result to the watch window.  If <expression> is not provided, all watches are printed to the console.

cmd.watch-property.params = <jsd-value> <property-name>
cmd.watch-property.help   = Adds the property named <property-name> of the object stored in <jsd-value> to the watch window.

cmd.where.help = Displays a summarized list of stack frames in the current call chain.
