## exception descriptions ##
err.notimplemented = Not implemented
err.required.param = Missing required parameter %1$S
err.invalid.param  = Invalid value for parameter %1$S (%2$S)
# 1 url, 2 fileName, 3 lineNumber, 4 reason
err.subscript.load = Error loading subscript from %1$S, %2$S, line %3$S: %4$S
err.no.debugger    = JS Debugger Service is not installed.

## error messages ##
msg.err.nostack         = No stack
msg.err.nocommand       = No such command, ``%1$S''
msg.err.notimeplemented = Sorry, ``%1$S'' has not been implemented
msg.err.ambigcommand    = Ambiguous command, ``%1$S'', %2$S commands match [%3$S]

## "values" ##
msg.val.unknown     = <unknown>
msg.val.console     = <console>
msg.val.object      = <object>
msg.val.expression  = <expression>

## words ##
msg.val.breakpoint  = breakpoint
msg.val.debug       = error handler
msg.val.debugger    = debugger keyword
msg.val.throw       = thrown exception
msg.val.scope       = scope

## types ##
msg.type.native     = native
msg.type.primitive  = primitive
msg.type.class      = class
msg.type.int        = integer
msg.type.double     = double
msg.type.function   = function
msg.type.null       = null
msg.type.object     = object
msg.type.string     = string
msg.type.void       = void
msg.type.unknown    = unknown
msg.type.properties = properties
msg.type.line       = line

## messages ##
msg.stop             = Stopped for %1$S.
msg.cont             = Continuing from %1$S.
msg.subscript.load   = Subscript %1$S loaded.
# 1 exception name, 2 fileName, 3 lineNumber
msg.eval.error       = %1$S: %2$S, line %3$S
msg.eval.threw       = Caught exception: %1$S
msg.hello.1          = Welcome to ``venkman'', the JavaScript debugger. Visit 
msg.hello.2          = for a sample debugging target.
msg.tip.help         = Use /help <command-name> for help on specific commands.
msg.noproperties     = %1$S has no properties.
msg.no-commandmatch  = No commands match ``%1$S''.
msg.commandmatch     = Commands matching ``%1$S'' are %2$S.
msg.commandmatch.all = Implemented commands are %1$S.
msg.props.header     = Properties of %1$S in debug target scope:
msg.propsd.header    = Properties of %1$S in debugger scope:

## commands ##
cmd.commands        = commands
cmd.commands.params = [<pattern>]
cmd.commands.help   = Lists all command names matching <pattern>, or all command names if pattern is not specified.

cmd.cont            = cont
cmd.cont.params     = 
cmd.cont.help       = Continue execution of the debug target.

cmd.eval         = eval
cmd.eval.params  = <script>
cmd.eval.help    = Evaluates <script> in the scope of the debug target's current frame.  See also: frame, where, props, and evald.

cmd.evald         = evald
cmd.evald.params  = <script>
cmd.evald.help    = Evaluates <script> in the debugger's scope.  See also: eval.

cmd.frame        = frame
cmd.frame.params = [<frame-number>]
cmd.frame.help   = Sets the current frame to the one numbered <frame-number>, and displays a summary of the frame.  If <frame-number> is not provided, a summary of the current frame will be displayed.  Use the where command to list available frames and frame numbers.

cmd.help         = help
cmd.help.params  = [<command>]
cmd.help.help    = Displays help on <command>, which can be a full command name, or the first few characters of the command name.  If <command> matches more than one command, help on all matching commands will be displayed.

cmd.props        = props
cmd.props.params = <expression>
cmd.props.help   = Lists the properties of the jsdIValue returned by <expression>.  The expression is evaluated in the scope of the debug target's current frame.  See also: where, frame, eval, and propsd.

cmd.propsd        = propsd
cmd.propsd.params = <expression>
cmd.propsd.help   = Lists the properties of the jsdIValue returned by <expression>.  The expression is evaluated in the debugger's scope.  See also: props.

cmd.scope        = scope
cmd.scope.params = 
cmd.scope.help   = Lists the properties of the topmost object in the scope chain for the current frame.

cmd.where        = where
cmd.where.params = 
cmd.where.help   = Displays a summarized list of stack frames in the current call chain.

cmd.quit         = quit
cmd.quit.params  =
cmd.quit.help    = Close this window.
