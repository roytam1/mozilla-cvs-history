/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsISupportsArray;

/**
 * This interface encapsulates an arbitrary parameter to be used
 * by the soap serialization or protocol.  It formalizes a type
 * string, a reference to the object, and optionally a name.
 * Conveniences are supplied for creating parameters from most
 * types of primatives and objects.
 */

[scriptable, uuid(99ec6690-535f-11d4-9a58-000064657374)]
interface nsISOAPParameter : nsISupports {
    
  /**
   * The name of the parameter. If the parameter is left unnamed, it
   * will be encoded using the element types defined in the SOAP-ENC
   * schema. For example, <code>&lt;SOAP-ENC:int&gt;45&lt;/SOAP-ENC:int&gt;
   * </code>
   */
  attribute DOMString name;

  /**
   * An optional encodingStyle specifically for this parameter. The
   * default is to inherit the encodingStyle from the element parent
   * chain.
   */
  attribute DOMString encodingStyleURI;

  /**
   * The type of the parameter.  Usually, the type is automatically
   *    set when setting the value, but the type may be manually
   *    overridden to utilize different types of serializers.
   * <p>Possible values for the type of a Parameter object.  When
   *      setting the value of a parameter object, the type is
   *      automatically set.  The JS params method which creates the 
   *      parameters array also sets types.  All predefined types 
   *      start with "#", leaving names not prefixed with "#" for 
   *      custom uses.
   * <p>Notes:
   * <ul>
   *   <li><code>"#DOMString"</code> - The value is of type
   *       nsISupportsWString.</li>
   *   <li><code>"#boolean"</code> - The value is of type
   *       nsISupportsPRBool.</li>
   *   <li><code>#double</code> - The value is of type
   *       nsISupportsDouble.</li>
   *   <li><code>#float</code> - The value is of type
   *       nsISupportsFloat.</li>
   *   <li><code>#long</code> - The value is of type
   *       nsISupportsPRInt64.</li>
   *   <li><code>#int</code> - The value is of type
   *       nsISupportsPRInt32.</li>
   *   <li><code>#short</code> - The value is of type
   *       nsISupportsPRInt16.</li>
   *   <li><code>#byte</code> - The value is of type
   *       nsISupportsPRInt8.</li>
   *   <li><code>#array</code> - The value is of type
   *       nsISupportsArray (each element is itself an instance of 
   *       nsISOAPParameter).</li>
   *   <li><code>#js#&lt;actual js class&gt;</code> - The value is
   *       a generic JSObject of type <class>.</li>
   *   <li><code>#iid#&lt;actual uuid&gt;</code> - The value is
   *       implementation of iid.</li>
   *   <li>Types not beginning with '#' are permitted for custom uses</li>
   * </ul>
   * </p>
   */
  attribute DOMString type;

  /**
   * The schema type associated with a parameter.  In addition
   *   to a language data type, there may be a schema type associated
   *   with a parameter.  If this is not specified, the serializer
   *   or application must make its own choice as appropriate.
   */
  attribute DOMString schemaType;

  /**
   * <p>The getter is for native and script callers (despite the
   * [noscript] qualification). For native callers, the interface
   * implemented by the returned value depends on the
   * <code>type</code> attribute as detailed in the description of the
   * type constants. For script callers, the value returned is either
   * a string, boolean, double, integer, or object.</p> To set this
   * value, callers should use a specialized language constructor or
   * setAs methods.</p>
   */
  [noscript] readonly attribute nsISupports value;

  /**
   * A convenience method to set the value and type as a DOMString.
   * This creates the wrapper and sets the type to "#DOMString".
   *
   * @param aValue In DOMString parameter specifying the parameter value.
   */
  void setAsWString(in DOMString aValue);

  /**
   * A convenience method to set the value and type as a boolean.
   * This creates the wrapper and sets the type to "#boolean".
   *
   * @param aValue In boolean parameter specifying the parameter value.
   */
  void setAsBoolean(in PRBool aValue);

  /**
   * A convenience method to set the value and type as a double.
   * This creates the wrapper and sets the type to "#double".
   *
   * @param aValue In double parameter specifying the parameter value.
   */
  void setAsDouble(in double aValue);

  /**
   * A convenience method to set the value and type as a float.
   * This creates the wrapper and sets the type to "#float".
   *
   * @param aValue In float parameter specifying the parameter value.
   */
  void setAsFloat(in float aValue);

  /**
   * A convenience method to set the value and type as a long.
   * This creates the wrapper and sets the type to "#long".
   *
   * @param aValue In long parameter specifying the parameter value.
   */
  void setAsLong(in PRInt64 aValue);

  /**
   * A convenience method to set the value and type as an int.
   * This creates the wrapper and sets the type to "#int".
   *
   * @param aValue In int parameter specifying the parameter value.
   */
  void setAsInt(in PRInt32 aValue);

  /**
   * A convenience method to set the value and type as a short.
   * This creates the wrapper and sets the type to "#short".
   *
   * @param aValue In short parameter specifying the parameter value.
   */
  void setAsShort(in PRInt16 aValue);

  /**
   * A convenience method to set the value and type as a byte.
   * This creates the wrapper and sets the type to "#byte".
   *
   * @param aValue In byte parameter specifying the parameter value.
   */
  void setAsByte(in PRUint8 aValue);

  /**
   * A convenience method to set the value and type as an array.
   * This sets the type to "#array".
   *
   * @param aValue In nsISupportsArray parameter specifying the parameter value.
   */
  void setAsArray(in nsISupportsArray aValue);

  /**
   * A convenience method to set the value and type as an XPCOM
   * interface.
   * This sets the type to "#iid#&lt;specific uuid&gt;".
   *
   * @param aIID In nsIIDRef, iid of xpcom object.
   * @param aValue In nsISupports parameter specifying value.
   */
  void setAsInterface(in nsIIDRef aIID, in nsISupports aValue);
};

%{ C++
#define NS_SOAPPARAMETER_CID                        \
{ /* 87d21ec2-539d-11d4-9a59-00104bdf5339 */        \
  0x87d21ec2, 0x539d, 0x11d4,                       \
 {0x9a, 0x59, 0x00, 0x10, 0x4b, 0xdf, 0x53, 0x39} }
#define NS_SOAPPARAMETER_CONTRACTID \
"@mozilla.org/xmlextras/soap/parameter;1"
%}
