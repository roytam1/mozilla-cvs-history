/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 2001 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 */

#include "nsISupports.idl"

interface nsIDOMElement;
interface nsISOAPType;

/**
 * This interface keeps track of all the known types and how
 *   each should be marshalled (by parameter type) or
 *   unmarshalled (by element namespaceURI and localName)
 */

[scriptable, uuid(9ae49600-1dd1-11b2-877f-e62f620c5e92)]
interface nsISOAPTypeRegistry : nsISupports {
  /**
   * Process a configuration and add the resulting types
   *
   * @param aConfiguration Root element of configuration XML.
   *
   * @return boolean True if types were added, false if an error occurred
   */
  boolean addConfiguration(in nsIDOMElement aConfiguration);

  /**
   * Add a type to this registry so it can be serialized / deserialized
   *
   * @param aType The type to be added.
   *
   * @return True if type was added, false if type could not be added
   */
  void addType(in nsISOAPType aType);

  /**
   * Given an unmarshalled type, find the type information.
   *
   * @param aEncodingStyleURI The URI that matches the encoding style of 
   *   the type to be located.
   *
   * @param aParameterType The string identifying the type to be located.
   *
   * @return The type in the registry that matches the encoding and type name
   */
  nsISOAPType queryByParameterType(
        in DOMString aEncodingStyleURI, in DOMString aParameterType);
  
  /**
   * Given an element type, find the type information.
   *
   * @param encodingStyleURI The URI that matches the encoding style of 
   *   the type to be located.
   *
   * @param aNamespace the namespace URI of the element.
   *
   * @param aName the local name of the element.
   *
   * @return The type in the registry that matches the encoding and element
   */
  nsISOAPType queryByElementType(
        in DOMString aEncodingStyleURI, in DOMString aNamespace,
        in DOMString aName);
};

%{ C++
#define NS_SOAPTYPEREGISTRY_CID                            \
{ /* 5ad0eace-1dd2-11b2-a260-ff42edcaedb3 */        \
  0x5ad0eace, 0x1dd2, 0x11b2,                       \
 {0xa2, 0x60, 0xff, 0x42, 0xed, 0xca, 0xed, 0xb3} }
#define NS_SOAPTYPEREGISTRY_CONTRACTID \
"@mozilla.org/xmlextras/soap/typeregistry;1"
#define NS_SOAPDEFAULTTYPEREGISTRY_CID                            \
{ /* 06fb035c-1dd2-11b2-bc30-f6d8e314d6b9 */        \
  0x06fb035c, 0x1dd2, 0x11b2,                       \
 {0xbc, 0x30, 0xf6, 0xd8, 0xe3, 0x14, 0xd6, 0xb9} }
#define NS_SOAPDEFAULTTYPEREGISTRY_CONTRACTID \
"@mozilla.org/xmlextras/soap/defaulttyperegistry;1"
%}
