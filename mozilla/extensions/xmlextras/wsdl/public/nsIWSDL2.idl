/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is Mozilla.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications.  Portions created by Netscape Communications are
 * Copyright (C) 2001 by Netscape Communications.  All
 * Rights Reserved.
 * 
 * Contributor(s): 
 *   Vidur Apparao <vidur@netscape.com> (original author)
 */

#include "nsISupports.idl"

/*
 * XXX Currently not in use, but a better representation of a WSDL
 * definition. In this case, the binding refers to the abstract
 * construct for each of port, operation, message and part, not the
 * other way. The SOAP-specific binding data is retrieved using a 
 * set of interfaces derived from the base binding interfaces.
 * 
 * This scheme would probably yield a more efficient and reusable
 * internal structure, but is more complex to use relative to the one
 * where the abstract constructs refer to the corresponding binding
 * information.
 */

%{ C++
#include "nsAString.h"
%} 

interface nsIWSDLPort;
interface nsIWSDLOperation;
interface nsIWSDLMessage;
interface nsIWSDLPart;
interface nsIDOMElement;
interface nsISchemaComponent;
interface nsISchema;

[scriptable, uuid(0458dac1-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLPortType : nsISupports { 
  readonly attribute AString name;
  readonly attribute nsIDOMElement documentation;

  readonly attribute PRUint32 operationCount;
  nsIWSDLOperation getOperation(in PRUint32 index);
  nsIWSDLOperation getOperationByName(in AString name);
};

[scriptable, uuid(0458daca-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLPortBinding : nsISupports {
  readonly attribute AString name;
  readonly attribute AString protocol;
  readonly attribute nsIDOMElement documentation;

  readonly attribute nsIWSDLPortType;
  readonly attribute PRUint32 operationCount;
  nsIWSDLOperationBinding getOperation(in PRUint32 index);
};

[scriptable, uuid(0458dac2-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLOperation : nsISupports {
  readonly attribute AString name;
  readonly attribute nsIDOMElement documentation;

  readonly attribute nsIWSDLMessage input;
  readonly attribute nsIWSDLMessage output;
  readonly attribute PRUint32 faultCount;
  nsIWSDLMessage getFault(in PRUint32 index);

  readonly attribute PRUint32 parameterCount;
  AString getParameter(in PRUint32 index);
};

[scriptable, uuid(0458dacb-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLOperationBinding : nsISupports {
  readonly attribute AString protocol;
  readonly attribute nsIDOMElement documentation;

  readonly attribute nsIWSDLOperation;

  readonly attribute nsIWSDLMessageBinding input;
  readonly attribute nsIWSDLMessageBinding output;
  readonly attribute PRUint32 faultCount;
  nsIWSDLMessageBinding getFault(in PRUint32 index);
};

[scriptable, uuid(0458dac3-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLMessage : nsISupports {
  readonly attribute AString name;
  readonly attribute nsIDOMElement documentation;
  
  readonly attribute PRUint32 partCount;
  nsIWSDLPart getPart(in PRUint32 index);
  nsIWSDLPart getPartByName(in AString name);
};

[scriptable, uuid(0458dacc-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLMessageBinding : nsISupports {
  readonly attribute AString protocol;
  readonly attribute nsIDOMElement documentation;

  readonly attribute nsIWSDLMessage;

  readonly attribute PRUint32 partCount;
  nsIWSDLPartBinding getPart(in PRUint32 index);
};

[scriptable, uuid(0458dac4-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLPart : nsISupports {
  readonly attribute AString name;

  readonly attribute AString type;
  readonly attribute AString elementName;

  /**
   * The schema component that corresponds to this part. If the
   * type attribute is used, this is a nsISchemaType. If the 
   * elementName attribute is used, it is a nsISchemaElement.
   */
  readonly attribute nsISchemaComponent schemaComponent;
};

[scriptable, uuid(0458dacd-65de-11d5-9b42-00104bdf5339)]
interface nsIWSDLPartBinding : nsISupports {
  readonly attribute AString protocol;

  readonly attribute nsIWSDLPart;  
};

[scriptable, uuid(0458dac7-65de-11d5-9b42-00104bdf5339)]
interface nsISOAPPortBinding : nsIWSDLPortBinding {
  const unsigned short STYLE_RPC = 1;
  const unsigned short STYLE_DOCUMENT = 2;

  readonly attribute AString address;
  readonly attribute unsigned short style;
  readonly attribute AString transport;
};

[scriptable, uuid(0458dac8-65de-11d5-9b42-00104bdf5339)]
interface nsISOAPOperationBinding : nsIWSDLOperationBinding {
  readonly attribute unsigned short style;
  readonly attribute AString soapAction;
};

[scriptable, uuid(0458dac9-65de-11d5-9b42-00104bdf5339)]
interface nsISOAPPartBinding : nsIWSDLPartBinding {
  const unsigned short   LOCATION_BODY = 1;
  const unsigned short   LOCATION_HEADER = 2;
  const unsigned short   LOCATION_FAULT = 3;

  const unsigned short   USE_LITERAL = 1;
  const unsigned short   USE_ENCODED = 2;

  readonly attribute unsigned short location;
  readonly attribute unsigned short use;
  readonly attribute AString encodingStyle;
  readonly attribute AString namespace;
};
