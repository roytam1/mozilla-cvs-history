<?xml version="1.0"?>

<bindings id="editModeBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="editBoxBinding" extends="xul:box">
    <content>
      <xul:box class="edit-children-master">
        <xul:dropslot class="edit-children-dropslot" type="before"/>
        <xul:box class="edit-children-container" ondraggesture="this.startDrag(event);">
          <children/>
        </xul:box>
      </xul:box>
      <xul:dropslot flex="1" class="edit-expander-dropslot" type="child"/>
    </content>
    <implementation>
      <method name="startDrag">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          // XXX refine this
          setDragNode(aEvent.target);
          
          aEvent.preventBubble();
        ]]>
        </body>
      </method>
    </implementation> 
    <handlers>
      <!-- XXX - this is a hack until hyatt learns how to code -->
      <handler event="draggesture">
      <![CDATA[
        this.startDrag(event);      
      ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="editBoxBinding-vertical" extends="chrome://vixen/content/vfd/editBindings.xml#editBoxBinding">
    <content orient="vertical">
      <xul:box class="edit-children-master" orient="vertical">
        <xul:dropslot class="edit-children-dropslot-vertical" type="before"/>
        <xul:box class="edit-children-container" orient="vertical" ondraggesture="this.startDrag(event);">
          <children/>
        </xul:box>
      </xul:box>
      <xul:dropslot flex="1" class="edit-expander-dropslot" type="child"/>
    </content>
  </binding>

  <!-- for non-display elements (includes grab-handle) -->
  <binding id="editBoxBinding-box" extends="chrome://vixen/content/vfd/editBindings.xml#editBoxBinding">
    <content>
      <xul:box class="edit-children-master">
        <xul:dropslot class="edit-children-dropslot" type="before"/>
        <xul:grabhandle class="edit-grabhandle"/>
        <xul:box class="edit-children-container" ondraggesture="this.startDrag(event);">
          <children/>
        </xul:box>
      </xul:box>
      <xul:dropslot flex="1" class="edit-expander-dropslot" type="child"/>
    </content>
  </binding>

  <binding id="editBoxBinding-box-vertical" extends="chrome://vixen/content/vfd/editBindings.xml#editBoxBinding-vertical">
    <content orient="vertical">
      <xul:box class="edit-children-master" orient="vertical">
        <xul:dropslot class="edit-children-dropslot-vertical" type="before"/>
        <xul:grabhandle class="edit-grabhandle-vertical"/>
        <xul:box class="edit-children-container" orient="vertical" ondraggesture="this.startDrag(event);">
          <children/>
        </xul:box>
      </xul:box>
      <xul:dropslot flex="1" class="edit-expander-dropslot" type="child"/>
    </content>
  </binding>
  
  <binding id="dropslot" extends="xul:box">
    <content>
      <xul:box class="dropslot-box" flex="1"/>
    </content>
    <implementation>
      <property name="dragover">
        <getter>
        <![CDATA[
          return this.getAttribute("dd-dragover");
        ]]>
        </getter>
        <setter>
        <![CDATA[
          this.setAttribute("dd-dragover", val);
          return val;
        ]]>  
        </setter>
      </property>
    </implementation>
    <handlers>
      <handler event="dragover">
      <![CDATA[
        this.dragover = true;
        
        // Retrieve the Drag Service
        const kDragServiceContractID = "@mozilla.org/widget/dragservice;1";
        var dragSvc = Components.classes[kDragServiceContractID].getService();
        if (!dragSvc) throw Components.results.NS_ERROR_FAILURE;
        dragSvc = dragSvc.QueryInterface(Components.interfaces.nsIDragService);

        var session = dragSvc.getCurrentSession();
        if (session.isDataFlavorSupported("text/unicode")) {
          session.canDrop = true;
          event.preventBubble();
        }
      ]]>
      </handler>
      <handler event="dragexit">
      <![CDATA[
        this.dragover = false;
      ]]>
      </handler>
      <handler event="dragdrop">
      <![CDATA[
        // There are two cases here:
        // 1). Dropping a DOM node dragged from within the document.
        //     The node is stored by the document's VFD Shell. (This is 
        //     because we cannot unwrap DOMNodes from transferables as they
        //     are not xpconnect savvy). 
        // 2). Dropping a transaction from a palette or similar. The drop
        //     handler unwraps the transaction and executes it using the 
        //     drop location as parameters.

        if (hasDragData()) {
          // case 1 defined above.
          
          // XXX Fix this
          var domNode = getDragNode();

          // new container
          var dropslot = event.originalTarget;
          var insertionPt = dropslot.getAttribute("type");
          var box = event.target;
          
          switch (insertionPt) {
          case "before": 
            var clonedNode = domNode.cloneNode(true);
            box.parentNode.insertBefore(box, clonedNode);
            break;
          case "child":
            var clonedNode = domNode.cloneNode(true);
            box.appendChild(clonedNode);
          }
          domNode.parentNode.removeChild(domNode);
        }
        else {
          // case 2 defined above. 

          // Retrieve the Drag Service
          const kDragServiceContractID = "@mozilla.org/widget/dragservice;1";
          var dragSvc = Components.classes[kDragServiceContractID].getService();
          if (!dragSvc) throw Components.results.NS_ERROR_FAILURE;
          dragSvc = dragSvc.QueryInterface(Components.interfaces.nsIDragService);
          
          var session = dragSvc.getCurrentSession();
          var numItems = session.numDropItems;
          
          const ksArrayContractID = "@mozilla.org/supports-array;1";
          var sArray = Components.classes[ksArrayContractID].createInstance();
          if (!sArray) throw Components.results.NS_ERROR_FAILURE;
          sArray = sArray.QueryInterface(Components.interfaces.nsISupportsArray);
          
          for (var i = 0; i < numItems; ++i) {
            const kxferableContractID = "@mozilla.org/widget/transferable;1";
            var xferable = Components.classes[kxferableContractID].createInstance();
            if (!xferable) throw Components.results.NS_ERROR_FAILURE;
            xferable = xferable.QueryInterface(Components.interfaces.nsITransferable);
            
            xferable.addDataFlavor("text/unicode");
            session.getData(xferable, i);
            
            var data = { };
            var flavour = { };
            var length = { };
            xferable.getTransferData("text/unicode", data, length);
            data = data.value.QueryInterface(Components.interfaces.nsISupportsWString);
            data = data.data.substring(0, length.value / 2);
            dump("*** dropped data = " + data + "\n");
            
            // now execute the transaction using the VFD Shell's
            // transaction decoder.
          }
        }      
      
      ]]>
      </handler>
    </handlers>
  </binding>
          
  <binding id="grabhandle" extends="xul:box"/>
          
</bindings>

          