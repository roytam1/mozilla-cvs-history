<?xml version="1.0"?>

<bindings id="historyTreeItem"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="history-tree-cell" extends="chrome://global/content/treeBindings.xml#treecell">
    <content>
      <xul:box class="cell-grabber" inherits="state,value,crop" flex="1"/>
    </content>
    <implementation>
      <method name="isInBounds">
        <parameter name="aEvent"/>
        <parameter name="aBoxObject"/>
        <body>
        <![CDATA[
          return aEvent.clientX > aBoxObject.x && aEvent.clientX < aBoxObject.width;
        ]]>
        </body>
      </method>
      <method name="unhookAttributes">
        <body>
        <![CDATA[
          var tree = document.getElementById("historyTree");
          tree.removeAttribute("dragstarttop");
          tree.removeAttribute("dragstartbottom");
          tree.removeAttribute("dragstartstate");
        ]]>
        </body>
      </method>
    </implementation>
    <handlers>
      <handler event="mousedown">
      <![CDATA[
        var treecell = event.target;
        var treecellBoxObject = treecell.boxObject.QueryInterface(Components.interfaces.nsIBoxObject);
        var tree = document.getElementById("historyTree");
        var treerow = treecell.parentNode;
        tree.setAttribute("dragstarttop", treecellBoxObject.y);
        tree.setAttribute("dragstartbottom", (treecellBoxObject.y + treecellBoxObject.height));
        tree.setAttribute("dragstartstate", treerow.getAttribute("state"));
      ]]>
      </handler>
      <handler event="mousemove">
      <![CDATA[
        var tree = document.getElementById("historyTree");
        var dragStartTop = tree.getAttribute("dragstarttop");
        var dragStartBottom = tree.getAttribute("dragstartbottom");
        if (dragStartTop || dragStartBottom) {
          var treecell = event.target;
          var treerow = treecell.parentNode;
          var treecellBO = treecell.boxObject.QueryInterface(Components.interfaces.nsIBoxObject);
          
          if (tree.getAttribute("currentnodetop") == treecellBO.y)
            return;
          tree.setAttribute("currentnodetop", treecellBO.y);

          if (!this.isInBounds(event, treecellBO) || 
              tree.getAttribute("dragstartstate") != "last-undo") 
            return;
          
          if (event.clientY < dragStartTop)
            requestUndo();
          else if (event.clientY > dragStartBottom)
            requestRedo();
          
          tree.setAttribute("dragstarttop", treecellBO.y);
          tree.setAttribute("dragstartbottom", (treecellBO.y + treecellBO.height));
        }
        return;
      ]]>
      </handler>
      <handler event="mouseup">
      <![CDATA[
        this.unhookAttributes();
      ]]>
      </handler>
    </handlers>
  </binding>          
  
  <binding id="grabber-last-undo" extends="xul:box">
    <content>
      <xul:stack class="grabber-stack" flex="1">
        <xul:box class="grabber-base">
          <xul:spring class="track-left" flex="1"/>
          <xul:spring class="track-center"/>
          <xul:spring class="track-right" flex="1"/>
          <xul:spring class="grabber-right" inherits="state"/>
        </xul:box>
        <xul:box class="grabber-container">
          <xul:box class="grabber-box-1" flex="1">
            <xul:box class="grabber-box-2" flex="1"/>
          </xul:box>
        </xul:box>
      </xul:stack>
    </content>
  </binding>
  
  <binding id="grabber-track" extends="xul:box">
    <content>
      <xul:spring class="track-left" flex="1"/>
      <xul:spring class="track-center" inherits="state"/>
      <xul:spring class="track-right" flex="1"/>
      <xul:spring class="grabber-right" inherits="state"/>
    </content>
  </binding>
  
  <binding id="cell-redo" extends="chrome://global/content/treeBindings.xml#treecell">
    <content>
      <xul:stack class="cell-redo-stack">
        <xul:text class="cell-redo-lower" inherits="value,crop"/>
        <xul:text class="cell-redo-upper" inherits="value,crop"/>
      </xul:stack>
    </content>
  </binding>
          
</bindings>          