/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jan Varga <varga@utcru.sk>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIVariant;

/**
 * @status UNDER_DEVELOPMENT
 */

[scriptable, uuid(dcc0d29e-2b44-460e-b39f-89121ff8b963)]
interface mozISqlResultEnumerator : nsISupports
{

  readonly attribute AString errorMessage;

  boolean next();

  boolean previous();

  void beforeFirst();

  void first();

  void last();

  void relative(in long aRows);

  void absolute(in long aRowIndex);


  boolean isNull(in long aColumnIndex);

  nsIVariant getVariant(in long aColumnIndex);

  AString getString(in long aColumnIndex);

  long getInt(in long aColumnIndex);

  float getFloat(in long aColumnIndex);

  float getDecimal(in long aColumnIndex);

  long long getDate(in long aColumnIndex);

  boolean getBool(in long aColumnIndex);


  void setNull(in long aColumnIndex);

  void setDefault(in long aColumnIndex);

  void copy(in long aColumnIndex);

  void setVariant(in long aColumnIndex, in nsIVariant aValue);

  void setString(in long aColumnIndex, in AString aValue);

  void setInt(in long aColumnIndex, in long aValue);

  void setFloat(in long aColumnIndex, in float aValue);

  void setDecimal(in long aColumnIndex, in float aValue);

  void setDate(in long aColumnIndex, in long long aValue);

  void setBool(in long aColumnIndex, in boolean aValue);


  void setNullValues();

  void setDefaultValues();

  void copyValues();


  boolean canInsert();

  boolean canUpdate();

  boolean canDelete();

  long insertRow();
  
  long updateRow();

  long deleteRow();

  readonly attribute AString currentCondition;

};
