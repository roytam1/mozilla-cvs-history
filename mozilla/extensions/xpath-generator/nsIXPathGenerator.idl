/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org XPath Generator.
 *
 * The Initial Developer of the Original Code is
 * Alexander J. Vincent <ajvincent@gmail.com>.
 * Portions created by the Initial Developer are Copyright (C) 2007
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "domstubs.idl"
#include "nsIDOMXPathNSResolver.idl"

[scriptable, uuid(341d8cbe-bcb3-4d9a-a5a6-dd4ef72a402d)]
interface nsIXPathGenerator : nsISupports {
  /**
   * A collection of bitwise flags which modify behavior.
   * 0x01000000 and flags greater are reserved for custom implementations.
   */

  // Ignore ID-type attribute nodes on elements
  // and continue to the document or context node.
  const unsigned long IGNORE_ID_TYPE_ATTRS          = 0x00000001;

  // Return expression containing a single step that uses the descendant axis.
  const unsigned long USE_DESCENDANT_AXIS           = 0x00000002;

  /**
   * Flags to modify parameters for generating the xpath string (default 0)
   */
  attribute unsigned long searchFlags;

  /**
   * Namespace resolver corresponding to all generated xpaths.
   */
  readonly attribute nsIDOMXPathNSResolver resolver;

  /**
   * Add a namespace URI and prefix to the namespace resolver.
   *
   * @param namespaceURI     The namespace URI of the namespace.
   * @param prefix           The prefix of the namespace.
   */
  void addNamespace(in DOMString namespaceURI,
                    in DOMString prefix);

  /**
   * Generate a xpath as a string.
   *
   * @param targetNode  The node our xpath ends at.
   * @param contextNode The node our xpath starts from.
   *                    If null, use targetNode's owner document.
   *
   * @return DOMString XPath from the context node to the target node.
   */
  DOMString generateXPath(in nsIDOMNode targetNode,
                          in nsIDOMNode contextNode);
};
