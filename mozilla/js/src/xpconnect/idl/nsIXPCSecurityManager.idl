/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express oqr
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *   John Bandhauer <jband@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

#include "nsISupports.idl"

[ptr] native JSContext(JSContext);
native jsid(jsid);
[ref] native MethodInfo(MethodInfo);

// forward decl...
interface nsIInterfaceInfo;

[uuid(31431440-f1ce-11d2-985a-006008962422)]
interface nsIXPCSecurityManager : nsISupports
{
    /**
    * These flags are used when calling nsIXPConnect::SetSecurityManager
    */

    const short HOOK_CREATE_WRAPPER  = 1 << 0;
    const short HOOK_CREATE_INSTANCE = 1 << 1;
    const short HOOK_GET_SERVICE     = 1 << 2;
    const short HOOK_CALL_METHOD     = 1 << 3;
    const short HOOK_GET_PROPERTY    = 1 << 4;
    const short HOOK_SET_PROPERTY    = 1 << 5;

    const short HOOK_ALL             = HOOK_CREATE_WRAPPER  |
                                       HOOK_CREATE_INSTANCE |
                                       HOOK_GET_SERVICE     |
                                       HOOK_CALL_METHOD     |
                                       HOOK_GET_PROPERTY    |
                                       HOOK_SET_PROPERTY    ;

    /**
    * For each of these hooks returning NS_OK means 'let the action continue'.
    * Returning an error code means 'veto the action'. XPConnect will do its
    * best to fail silently if the action is vetoed. The implementor of this
    * interface is responsible for setting a JS exception into the JSContext
    * if that is appropriate.
    */

    void CanCreateWrapper(in JSContext aJSContext,
                          in nsIIDRef aIID,
                          in nsISupports aObj);

    void CanCreateInstance(in JSContext aJSContext,
                           in nsCIDRef aCID);

    void CanGetService(in JSContext aJSContext,
                       in nsCIDRef aCID);

    void CanCallMethod(in JSContext aJSContext,
                       in nsIIDRef aIID,
                       in nsISupports aObj,
                       in nsIInterfaceInfo aInterfaceInfo,
                       in PRUint16 aMethodIndex,
                       [const] in jsid aName);

    void CanGetProperty(in JSContext aJSContext,
                        in nsIIDRef aIID,
                        in nsISupports aObj,
                        in nsIInterfaceInfo aInterfaceInfo,
                        in PRUint16 aMethodIndex,
                        [const] in jsid aName);

    void CanSetProperty(in JSContext aJSContext,
                        in nsIIDRef aIID,
                        in nsISupports aObj,
                        in nsIInterfaceInfo aInterfaceInfo,
                        in PRUint16 aMethodIndex,
                        [const] in jsid aName);
};
