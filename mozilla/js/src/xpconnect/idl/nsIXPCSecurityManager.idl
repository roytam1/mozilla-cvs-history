/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public License
 * Version 1.0 (the "NPL"); you may not use this file except in
 * compliance with the NPL.  You may obtain a copy of the NPL at
 * http://www.mozilla.org/NPL/
 *
 * Software distributed under the NPL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
 * for the specific language governing rights and limitations under the
 * NPL.
 *
 * The Initial Developer of this code under the NPL is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation.  All Rights
 * Reserved.
 */

#include "nsISupports.idl"

[ptr] native JSContext(JSContext);
native jsid(jsid);
[ref] native MethodInfo(MethodInfo);

// forward decl...
interface nsIInterfaceInfo;

[uuid(31431440-f1ce-11d2-985a-006008962422)]
interface nsIXPCSecurityManager : nsISupports
{
    /**
    * These flags are used when calling nsIXPConnect::SetSecurityManager
    */

    const short HOOK_CREATE_WRAPPER  = 1 << 0;
    const short HOOK_CREATE_INSTANCE = 1 << 1;
    const short HOOK_GET_SERVICE     = 1 << 2;
    const short HOOK_CALL_METHOD     = 1 << 3;
    const short HOOK_GET_PROPERTY    = 1 << 4;
    const short HOOK_SET_PROPERTY    = 1 << 5;

    const short HOOK_ALL             = HOOK_CREATE_WRAPPER  |
                                       HOOK_CREATE_INSTANCE |
                                       HOOK_GET_SERVICE     |
                                       HOOK_CALL_METHOD     |
                                       HOOK_GET_PROPERTY    |
                                       HOOK_SET_PROPERTY    ;

    /**
    * For each of these hooks returning NS_OK means 'let the action continue'.
    * returning *anything* else means 'veto the action'. XPConnect will do its
    * best to fail silently if the action is vetoed. The implementor of this
    * interface is responsible for setting a JS exception into the JSContext
    * if that is appropriate.
    */

    void CanCreateWrapper(in JSContext aJSContext,
                          in nsIIDRef aIID,
                          in nsISupports aObj);

    void CanCreateInstance(in JSContext aJSContext,
                           in nsCIDRef aCID);

    void CanGetService(in JSContext aJSContext,
                       in nsCIDRef aCID);

    void CanCallMethod(in JSContext aJSContext,
                       in nsIIDRef aIID,
                       in nsISupports aObj,
                       in nsIInterfaceInfo aInterfaceInfo,
                       in PRUint16 aMethodIndex,
                       [const] in jsid aName);

    void CanGetProperty(in JSContext aJSContext,
                        in nsIIDRef aIID,
                        in nsISupports aObj,
                        in nsIInterfaceInfo aInterfaceInfo,
                        in PRUint16 aMethodIndex,
                        [const] in jsid aName);

    void CanSetProperty(in JSContext aJSContext,
                        in nsIIDRef aIID,
                        in nsISupports aObj,
                        in nsIInterfaceInfo aInterfaceInfo,
                        in PRUint16 aMethodIndex,
                        [const] in jsid aName);
};
