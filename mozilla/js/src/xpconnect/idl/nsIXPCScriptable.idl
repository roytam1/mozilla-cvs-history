/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express oqr
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1998 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s): 
 *   John Bandhauer <jband@netscape.com>
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

#include "nsISupports.idl"
#include "nsIXPConnect.idl"

[uuid(fa2c3b80-0e9d-11d5-9092-0010a4e73d9a)]
interface nsIXPCScriptable : nsISupports
{
    /* bitflags used for 'flags' (only 32 bits available!) */

    const PRUint32 WANT_CREATE                      = 1 <<  0;
    const PRUint32 WANT_ADDPROPERTY                 = 1 <<  1;
    const PRUint32 WANT_DELPROPERTY                 = 1 <<  2;
    const PRUint32 WANT_GETPROPERTY                 = 1 <<  3;
    const PRUint32 WANT_SETPROPERTY                 = 1 <<  4;
    const PRUint32 WANT_ENUMERATE                   = 1 <<  5;
    const PRUint32 WANT_NEWENUMERATE                = 1 <<  6;
    const PRUint32 WANT_RESOLVE                     = 1 <<  7;
    const PRUint32 WANT_NEWRESOLVE                  = 1 <<  8;
    const PRUint32 WANT_CONVERT                     = 1 <<  9;
    const PRUint32 WANT_FINALIZE                    = 1 << 10;
    const PRUint32 WANT_CHECKACCESS                 = 1 << 11;
    const PRUint32 WANT_CALL                        = 1 << 12;
    const PRUint32 WANT_CONSTRUCT                   = 1 << 13;
    const PRUint32 WANT_HASINSTANCE                 = 1 << 14;
    const PRUint32 WANT_MARK                        = 1 << 15;
    const PRUint32 USE_JSSTUB_FOR_ADDPROPERTY       = 1 << 16;
    const PRUint32 USE_JSSTUB_FOR_DELPROPERTY       = 1 << 17;
    const PRUint32 USE_JSSTUB_FOR_GETPROPERTY       = 1 << 18;
    const PRUint32 USE_JSSTUB_FOR_SETPROPERTY       = 1 << 19;
    const PRUint32 DONT_ENUM_STATIC_PROPS           = 1 << 20;
    const PRUint32 DONT_ASK_INSTANCE_FOR_SCRIPTABLE = 1 << 21;
    const PRUint32 HIDE_QUERY_INTERFACE             = 1 << 22;
    const PRUint32 NO_TEAROFFS                      = 1 << 23;


    readonly attribute string   className;
    readonly attribute PRUint32 flags;

    void   create(in nsIXPConnectWrappedNative wrapper, 
                  in JSContextPtr cx, in JSObjectPtr obj);

    PRBool addProperty(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj, in JSID id, 
                       in JSValPtr vp);
            
    PRBool delProperty(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj, in JSID id,
                       in JSValPtr vp);

    PRBool getProperty(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj, in JSID id,
                       in JSValPtr vp);

    PRBool setProperty(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj, in JSID id,
                       in JSValPtr vp);

    PRBool enumerate(in nsIXPConnectWrappedNative wrapper,
                     in JSContextPtr cx, in JSObjectPtr obj);

    PRBool newEnumerate(in nsIXPConnectWrappedNative wrapper,
                        in JSContextPtr cx, in JSObjectPtr obj,
                        in PRUint32 enum_op, in JSValPtr statep, out JSID idp);

    PRBool resolve(in nsIXPConnectWrappedNative wrapper,
                   in JSContextPtr cx, in JSObjectPtr obj, in JSID id);

    PRBool newResolve(in nsIXPConnectWrappedNative wrapper,
                      in JSContextPtr cx, in JSObjectPtr obj, in JSID id,
                      in PRUint32 flags, out JSObjectPtr objp);

    PRBool convert(in nsIXPConnectWrappedNative wrapper,
                   in JSContextPtr cx, in JSObjectPtr obj,
                   in PRUint32 type, in JSValPtr vp);
                   
    void   finalize(in nsIXPConnectWrappedNative wrapper,
                    in JSContextPtr cx, in JSObjectPtr obj);

    PRBool checkAccess(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj, in JSID id,
                       in PRUint32 mode, in JSValPtr vp);

    PRBool call(in nsIXPConnectWrappedNative wrapper,
                in JSContextPtr cx, in JSObjectPtr obj, 
                in PRUint32 argc, in JSValPtr argv, in JSValPtr vp);
    
    PRBool construct(in nsIXPConnectWrappedNative wrapper,
                     in JSContextPtr cx, in JSObjectPtr obj, 
                     in PRUint32 argc, in JSValPtr argv, in JSValPtr vp);

    PRBool hasInstance(in nsIXPConnectWrappedNative wrapper,
                       in JSContextPtr cx, in JSObjectPtr obj,
                       in JSVal val, out PRBool bp);

    PRUint32 mark(in nsIXPConnectWrappedNative wrapper,
                  in JSContextPtr cx, in JSObjectPtr obj, in voidPtr arg);
};    


/***************************************************************************/

%{ C++

/*
 * These two classes are *not* xpcom interfaces. They have no virtual methods
 * and are not reference counted. They exist only as a way to expose a little
 * of the XPConnect interals to implementors of nsIXPCScriptable and users of
 * nsIXPCNativeCallContext interfaces. In the places where a pointer to a
 * nsIXPCWrappedNativeTearOff object is available it should be used only for
 * the lifetime of the call in question. Same story for nsIXPCNativeInterface.
 */

// no virtuals
class nsIXPCWrappedNativeTearOff
    {
public:
    inline nsIXPConnectWrappedNative* GetWrapper()   const {return mWrapper;}
    inline JSObject*                  GetJSObject()  const {return mJSObject;}
    inline nsISupports*               GetNative()    const {return mNative;}
    inline nsIXPCNativeInterface*     GetInterface() const {return mInterface;}

    inline JSBool IsFlattenedObject() const {return nsnull == mInterface;}

protected:
    nsIXPCWrappedNativeTearOff()
        : mWrapper(nsnull), mJSObject(nsnull), 
          mNative(nsnull), mInterface(nsnull) {}
    ~nsIXPCWrappedNativeTearOff() {}

    nsIXPCWrappedNativeTearOff(const nsIXPCWrappedNativeTearOff& r); // not implemented
    nsIXPCWrappedNativeTearOff& operator= (const nsIXPCWrappedNativeTearOff& r); // not implemented

protected:
    nsIXPConnectWrappedNative*  mWrapper;
    JSObject*                   mJSObject;
    nsISupports*                mNative;
    nsIXPCNativeInterface*      mInterface;
};

// no virtuals

class nsIXPCNativeInterface
{
public:
    inline nsIInterfaceInfo* GetInterfaceInfo() const {return mInfo;}
    inline jsid              GetNameID()        const {return mNameID;}

protected:
    nsIXPCNativeInterface(nsIInterfaceInfo* aInfo, jsid aNameID)
        : mInfo(aInfo), mNameID(aNameID) {}
    ~nsIXPCNativeInterface() {}

    nsIXPCNativeInterface(const nsIXPCNativeInterface& r); // not implemented
    nsIXPCNativeInterface& operator= (const nsIXPCNativeInterface& r); // not implemented

protected:
    nsCOMPtr<nsIInterfaceInfo> mInfo;
    jsid                       mNameID;
};

%}

/***************************************************************************/


