/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * The contents of this file are subject to the Netscape Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/NPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are
 * Copyright (C) 1999 Netscape Communications Corporation. All
 * Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU Public License (the "GPL"), in which case the
 * provisions of the GPL are applicable instead of those above.
 * If you wish to allow use of your version of this file only
 * under the terms of the GPL and not to allow others to use your
 * version of this file under the NPL, indicate your decision by
 * deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL.  If you do not delete
 * the provisions above, a recipient may use your version of this
 * file under either the NPL or the GPL.
 */

#include "nsISupports.idl"

// forward declare the below interfaces for clarity
interface nsIXPCSample_ClassA;
interface nsIXPCSample_ClassB;
interface nsIXPCSample_ClassC;

[scriptable, uuid(6bd0c120-c216-11d3-98c9-006008962422)]
interface nsIXPCSample_ClassA : nsISupports
{
    attribute PRInt32 someValue;
    readonly attribute nsIXPCSample_ClassB B;
};

[scriptable, uuid(c9c7bac0-c216-11d3-98c9-006008962422)]
interface nsIXPCSample_ClassB : nsISupports
{
    attribute PRInt32 someValue;
    readonly attribute nsIXPCSample_ClassC C;
};

[scriptable, uuid(df7bd080-c216-11d3-98c9-006008962422)]
interface nsIXPCSample_ClassC : nsISupports
{
    attribute PRInt32 someValue;
};

// This is an interace for a funky object that can create an instance of the
// chain above in the global scope of the currently running JSContext. One
// might more normally do this automatically as the JSContext is created
// (or the 'request' serviced), but here I wanted to be able to show this
// activity from within an xpcom component.
[scriptable, uuid(15794370-c217-11d3-98c9-006008962422)]
interface nsIXPCSample_HookerUpper : nsISupports
{
    void createSampleObjectAtGlobalScope(in string name, in PRInt32 value);
};

%{C++
#define NS_NSXPCSAMPLE_HOOKERUPPER_CONTRACTID "xpc.sample_hookerupper.1"
%}


