#
# The contents of this file are subject to the Netscape Public License
# Version 1.0 (the "NPL"); you may not use this file except in
# compliance with the NPL.  You may obtain a copy of the NPL at
# http://www.mozilla.org/NPL/
#
# Software distributed under the NPL is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the NPL
# for the specific language governing rights and limitations under the
# NPL.
#
# The Initial Developer of this code under the NPL is Netscape
# Communications Corporation.  Portions created by Netscape are
# Copyright (C) 1998 Netscape Communications Corporation.  All Rights
# Reserved.
#

DEPTH		= ../..
topsrcdir	= @top_srcdir@
srcdir		= @srcdir@
VPATH		= @srcdir@

FDLIBM_LIBRARY	= fdlibm/libfdm.a
JSMATH_PRELINK	= jsmathtemp.o
JS_SAFE_ARENA	= 1

include $(DEPTH)/config/autoconf.mk
include $(topsrcdir)/config/config.mk

LIBRARY_NAME	= $(MOZ_LIB_JS_PREFIX)js
MODULE		= js

SIMPLE_PROGRAMS	= jscpucfg

ifdef MOZ_OJI
DIRS		= liveconnect
endif

DIRS		+= fdlibm xpconnect

DEFINES     += -DEXPORT_JS_API

GARBAGE		+= $(JSMATH_PRELINK) $(OBJDIR)/jscpucfg.o $(OBJDIR)/jsautocfg.h $(OBJDIR)/jsautocfg.tmp

ifeq ($(OS_ARCH),OS2)
ifndef XCFLAGS
OS2_IMPLIB	= 1
LIBRARY		= js$(MOZ_BITS)$(VERSION_NUMBER).$(LIB_SUFFIX)
DEF_FILE	= jsos2$(VERSION_NUMBER).def
EXTRA_LIBS	= $(NSPR_LIBS) $(LIBNSJAVA)
else
EXTRA_LIBS	= $(NSPR_LIBS) $(LIBNSJAVA) $(OBJDIR)/libjs.lib
endif
OS_CFLAGS	+= -tm-
endif

CSRCS		= jsapi.c \
		  jsarena.c \
		  jsarray.c \
		  jsatom.c \
		  jsbool.c \
		  jscntxt.c \
		  jsdate.c \
		  jsdbgapi.c \
		  jsdtoa.c \
		  jsemit.c \
		  jsexn.c \
		  jsfun.c \
		  jsgc.c \
		  jshash.c \
		  jsinterp.c \
		  jslock.c \
		  jslog2.c \
		  jslong.c \
		  jsmath.c \
		  jsnum.c \
		  jsobj.c \
		  jsopcode.c \
		  jsparse.c \
		  jsprf.c \
		  jsregexp.c \
		  jsscan.c \
		  jsscope.c \
		  jsscript.c \
		  jsstr.c \
		  jsutil.c \
		  jsxdrapi.c \
		  prmjtime.c \
		  $(NULL)

EXPORTS		= js.msg \
		  jsapi.h \
		  jsarray.h \
		  jsarena.h \
		  jsatom.h \
		  jsbit.h \
		  jsbool.h \
		  jsclist.h \
		  jscntxt.h \
		  jscompat.h \
		  jsconfig.h \
		  jsdate.h \
		  jsdbgapi.h \
		  jsemit.h \
		  jsfun.h \
		  jsgc.h \
		  jshash.h \
		  jsinterp.h \
		  jslock.h \
		  jslong.h \
		  jsmath.h \
		  jsnum.h \
		  jsobj.h \
		  jsopcode.tbl \
		  jsopcode.h \
		  jsosdep.h \
		  jsotypes.h \
		  jsparse.h \
		  jsprf.h \
		  jsprvtd.h \
		  jspubtd.h \
		  jsregexp.h \
		  jsscan.h \
		  jsscope.h \
		  jsscript.h \
		  jsstr.h \
		  jstypes.h \
		  jsutil.h \
		  jsxdrapi.h \
		  jsstddef.h \
		  $(NULL)

EXPORTS		:= $(addprefix $(srcdir)/, $(EXPORTS))

# When using gcc the assembly is inlined in the C-file (see jslock.c)
ifdef NS_USE_NATIVE
ASFILES		= $(notdir $(wildcard $(srcdir)/*_$(OS_ARCH).s))
endif

ifndef BUILD_OPT
MOCHAFILE	= 1
endif

include $(topsrcdir)/config/rules.mk

INCLUDES	+= -I$(srcdir)

ifneq ($(findstring -L,$(NSPR_LIBS)),)
NSPR_STATIC_PATH	= $(subst -L,,$(findstring -L,$(NSPR_LIBS)))
else
NSPR_STATIC_PATH	= $(DIST)/lib
endif

ifeq ($(OS_ARCH),BeOS)
LDFLAGS		= $(pathsubst -l%,$(NSPR_STATIC_PATH)/%.a,$(NSPR_LIBS))
else
LDFLAGS		= $(pathsubst -l%,$(NSPR_STATIC_PATH)/%.a,$(NSPR_LIBS)) -lm
endif


ifdef JS_SAFE_ARENA
DEFINES		+= -DJS_USE_SAFE_ARENA
endif

ifdef JS_THREADSAFE
DEFINES		+= -DJS_THREADSAFE
endif

ifdef JS_NO_THIN_LOCKS
DEFINES		+= -DJS_USE_ONLY_NSPR_LOCKS
endif

ifdef JS_VERSION
DEFINES		+= -DJS_VERSION=$(JS_VERSION)
endif

ifeq ($(CPU_ARCH),sparc)

ifndef JS_NO_ULTRA
ULTRA_OPTIONS	:= -xarch=v8plus,-DULTRA_SPARC
ULTRA_OPTIONSCC	:= -DULTRA_SPARC
else
ULTRA_OPTIONS	:= -xarch=v8
ULTRA_OPTIONSCC	:=
endif

ifeq ($(shell uname -m),sun4u)
ASFLAGS		+= -Wa,$(ULTRA_OPTIONS),-P,-L,-D_ASM,-D__STDC__=0 $(ULTRA_OPTIONSCC)
else
ASFLAGS		+= -Wa,-xarch=v8,-P,-L,-D_ASM,-D__STDC__=0
endif

endif # sparc

ifndef NSBUILDROOT
JSJAVA_STUBHEADERS = -I$(topsrcdir)/sun-java/include/_gen \
		     -I$(topsrcdir)/sun-java/netscape/javascript/_jri \
		     -I$(topsrcdir)/sun-java/netscape/security/_jri
else
JSJAVA_STUBHEADERS = -I$(JRI_GEN_DIR) -I$(JDK_GEN_DIR)
endif

JSJAVA_CFLAGS	= -I$(topsrcdir)/sun-java/md-include \
		  -I$(topsrcdir)/sun-java/include \
		  $(JSJAVA_STUBHEADERS)

DASH_R		= -r

ifeq ($(OS_ARCH), IRIX)
ifneq ($(basename $(OS_RELEASE)),5)
LDFLAGS		+= -n32
DASH_R		+= -n32
endif
endif
ifeq ($(OS_ARCH), Linux)
LDFLAGS		+= -ldl
endif
ifeq ($(OS_ARCH), FreeBSD)
LDFLAGS		+= -pthread
endif
ifeq ($(OS_ARCH), OSF1)
LDFLAGS		+= -lc_r
endif
ifeq ($(OS_ARCH), QNX)
ifeq ($(OS_TARGET), NTO)
DASH_R		= -r
else
DASH_R		=
endif
endif
ifeq ($(OS_ARCH), SunOS)
ifeq ($(OS_RELEASE),4.1)
LDFLAGS         += -ldl -lnsl
else
LDFLAGS         += -lposix4 -ldl -lnsl -lsocket
endif
endif

# special rule for jsmath.o since we want to incrementally link
# against fdlibm to pull in only what is needed
jsmath.o: $(FDLIBM_LIBRARY) $(JSMATH_PRELINK)
	@$(MAKE_OBJDIR)
	$(LD) $(DASH_R) -o $@ $(JSMATH_PRELINK) $(FDLIBM_LIBRARY)

$(JSMATH_PRELINK): jsmath.c
	@$(MAKE_OBJDIR)
ifneq (,$(filter OS2 WINNT,$(OS_ARCH)))
	$(CC) -Fo$@ -c $(CFLAGS) $<
else
	$(CC) -o $@ -c $(CFLAGS) $<
endif

# An AIX Optimization bug causes PR_dtoa() & JS_dtoa to produce wrong result.
# This suppresses optimization for this single compilation unit.
ifeq ($(OS_ARCH), AIX)
$(OBJDIR)/jsdtoa.o: jsdtoa.c
	@$(MAKE_OBJDIR)
	$(CC) -o $@ -c $(filter-out -O, $(CFLAGS)) $<
endif

# ripped from $(topsrcdir)/config/rules.mk
$(FDLIBM_LIBRARY):
	set -e;					\
	set $(EXIT_ON_ERROR);			\
	echo "cd $(@D); $(MAKE) $(@F)";		\
	oldDir=`pwd`;				\
	cd $(@D); $(MAKE) $(@F); cd $$oldDir;	\
	set +e;

jsopcode.h jsopcode.c: jsopcode.tbl

$(OBJDIR)/jsautocfg.h: $(OBJDIR)/jscpucfg
	@rm -f $@ $(OBJDIR)/jsautocfg.tmp
	$(OBJDIR)/jscpucfg > $(OBJDIR)/jsautocfg.tmp
	mv $(OBJDIR)/jsautocfg.tmp $@

export:: $(OBJDIR)/jsautocfg.h
	$(INSTALL) -m 444 $< $(DIST)/include

