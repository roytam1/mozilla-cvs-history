/* 
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the mozilla.org LDAP XPCOM component.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are 
 * Copyright (C) 2000 Netscape Communications Corporation.  All
 * Rights Reserved.
 * 
 * Contributor(s): Dan Mosedale <dmose@mozilla.org>
 * 
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License Version 2 or later (the
 * "GPL"), in which case the provisions of the GPL are applicable 
 * instead of those above.  If you wish to allow use of your 
 * version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and
 * replace them with the notice and other provisions required by
 * the GPL.  If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsISupports.idl"
#include "nsILDAPOperation.idl"

// for the ldapMsgHandle typedef
//
%{C++
#include "ldap.h"
%}

[ptr] native ldapMsgHandle(LDAPMessage);

[scriptable, uuid(973ff50f-2002-4f0c-b57d-2242156139a2)]
interface nsILDAPMessage : nsISupports
{
    // initialize an operation
    //
    [noscript] void init(in nsILDAPOperation operation, 
			 in ldapMsgHandle msgHandle);

    // wrapper for ldap_get_dn
    //
    // XXX - currently must use ldap_mem_free to free
    //
    readonly attribute string dn;

    // wrappers for ldap_{first,next}_attribute
    //	
    // XXX - currently must use ldap_mem_free to free the results
    //
    string firstAttribute();
    string nextAttribute();

    // wrapper for ldap_get_values
    //
    // XXX - values must be freed with ldap_value_free
    //
    void getValues(in string attr, out unsigned long count, 
		   [retval, array, size_is(count)] out string values);

    // turn an error condition associated with this message into an LDAP 
    // errcode (wrapper around ldap_parse_result)
    //
    long getErrorCode();
    
};
