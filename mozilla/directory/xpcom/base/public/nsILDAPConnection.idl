/* 
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the mozilla.org LDAP XPCOM component.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are 
 * Copyright (C) 2000 Netscape Communications Corporation.  All
 * Rights Reserved.
 * 
 * Contributor(s): Dan Mosedale <dmose@mozilla.org>
 * 
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License Version 2 or later (the
 * "GPL"), in which case the provisions of the GPL are applicable 
 * instead of those above.  If you wish to allow use of your 
 * version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and
 * replace them with the notice and other provisions required by
 * the GPL.  If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsISupports.idl"

// for the ldapPtr typedef
//
%{C++
#include "ldap.h"
%}

[ptr] native ldapConnectionHandle(LDAP);

interface nsILDAPMessageListener;

[scriptable, uuid(337ad2fe-1dd2-11b2-89f8-aae1221ec86c)]
interface nsILDAPConnection : nsISupports
{
    // return the string version of lderrno
    readonly attribute string errorString;

    // who we're binding as
    readonly attribute string bindName;

    /**
     * Operations on this connection get their results called back to this
     * interface.  This really should (and eventually will be) implemented
     * implemented on a per operation-basis (to allow for shared 
     * nsILDAPConnections), but for now, this MUST be set BEFORE calling
     * init on this connection.
     */
    attribute nsILDAPMessageListener messageListener;

    // set up the connection.  the first two params are for ldap init, 
    // the third is for this connection
    //
    void init(in string aHost, in short aPort, in string aBindName);

    // wrapper for ldap_get_lderrno()
    long getLdErrno(out string matched, out string s);

    // really only for the internal use of nsLDAPOperation and friends
    //
    [noscript] readonly attribute ldapConnectionHandle connectionHandle;

};

