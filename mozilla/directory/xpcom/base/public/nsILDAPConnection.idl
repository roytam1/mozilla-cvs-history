/* 
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the mozilla.org LDAP XPCOM component.
 * 
 * The Initial Developer of the Original Code is Netscape
 * Communications Corporation.  Portions created by Netscape are 
 * Copyright (C) 2000 Netscape Communications Corporation.  All
 * Rights Reserved.
 * 
 * Contributor(s): Dan Mosedale <dmose@mozilla.org>
 * 
 * Alternatively, the contents of this file may be used under the
 * terms of the GNU General Public License Version 2 or later (the
 * "GPL"), in which case the provisions of the GPL are applicable 
 * instead of those above.  If you wish to allow use of your 
 * version of this file only under the terms of the GPL and not to
 * allow others to use your version of this file under the MPL,
 * indicate your decision by deleting the provisions above and
 * replace them with the notice and other provisions required by
 * the GPL.  If you do not delete the provisions above, a recipient
 * may use your version of this file under either the MPL or the
 * GPL.
 */

#include "nsISupports.idl"

// for the ldapPtr typedef
//
%{C++
#include "ldap.h"
%}

[ptr] native ldapConnectionHandle(LDAP);

interface nsILDAPOperation;

[scriptable, uuid(337ad2fe-1dd2-11b2-89f8-aae1221ec86c)]
interface nsILDAPConnection : nsISupports
{
    /**
     * the string version of lderrno
     */
    readonly attribute string errorString;

    /**
     * DN to bind as.  use the init() method to set this.
     *
     * @exception NS_ERROR_OUT_OF_MEMORY
     */
    readonly attribute string bindName;

    /** 
     * set up the connection.  
     *
     * @param aHost	 	server name for ldap_init()
     * @param aPort 		server port number for ldap_init()
     *                          0 == default port (389)
     * @param aBindName 	DN to bind as
     *
     * @exception NS_ERROR_ILLEGAL_VALUE	null pointer passed in
     * @exception NS_ERROR_OUT_OF_MEMORY	ran out of memory
     * @exception NS_ERROR_NOT_AVAILABLE	Couldn't create thread.
     * @exception NS_ERROR_FAILURE		
     * @exception NS_ERROR_UNEXPECTED		internal error
     */
    void init(in string aHost, in short aPort, in string aBindName);

    // wrapper for ldap_get_lderrno()
    long getLdErrno(out string matched, out string s);

    /**
     * really only for the internal use of nsLDAPOperation and friends
     * 
     * @exception NS_ERROR_ILLEGAL_VALUE pointer passed in was NULL
     */
    [noscript] readonly attribute ldapConnectionHandle connectionHandle;

    /** 
     * Add an nsILDAPOperation to the list of operations pending on
     * this connection.  This is also mainly intended for use by the
     * nsLDAPOperation code.  Used so that the thread waiting on messages
     * for this connection has an operation to callback to.
     *
     * @param aOperation		    operation to add
     * @exception NS_ERROR_ILLEGAL_VALUE    aOperation was NULL
     * @exception NS_ERROR_UNEXPECTED	    this operation's msgId was not
     *	                                    unique to this connection
     * @exception NS_ERROR_OUT_OF_MEMORY    out of memory
     */
    void addPendingOperation(in nsILDAPOperation aOperation);

    /**
     * Remove an nsILDAPOperation from the list of operations pending on this
     * connection.  Mainly intended for use by the nsLDAPOperation code.
     *
     * @param aOperation	operation to add
     * @exception NS_ERROR_INVALID_POINTER  aOperation was NULL
     * @exception NS_ERROR_OUT_OF_MEMORY    out of memory
     * @exception NS_ERROR_FAILURE	    could not delete the operation 
     */
    void removePendingOperation(in nsILDAPOperation aOperation);
};

