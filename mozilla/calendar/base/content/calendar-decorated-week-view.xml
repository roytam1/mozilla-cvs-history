<?xml version="1.0"?>
<!--
   - ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Calendar view code.
   -
   - The Initial Developer of the Original Code is
   -   Joey Minta <jminta@gmail.com>
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Dan Mosedale <dan.mosedale@oracle.com>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
-->

<!-- Note that we depend on some helper functions in calUtils.js here-->

<bindings id="calendar-specific-view-bindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="calendar-decorated-week-view"
             extends="chrome://calendar/content/calendar-decorated-multiday-base-view.xml#calendar-decorated-multiday-base-view">
        <content>
             <xul:vbox anonid="main-box" flex="1">
                <xul:calendar-navigation-buttons anonid="nav-control"/>
                <xul:box flex="1">
                    <xul:calendar-multiday-view anonid="view-element" flex="1" orient="vertical" xbl:inherits="context,item-context"/>
                </xul:box>
            </xul:vbox>
        </content>

        <implementation implements="calIDecoratedView">
            <constructor><![CDATA[
                this.mWeekStartOffset = getPrefSafe("calendar.week.start", 0);
                return;
            ]]></constructor>

            <field name="mWeekStartOffset">0</field>

            <property name="observerID">
                <getter><![CDATA[
                    return "week-view-observer";
                ]]></getter>
            </property>

            <method name="handlePreference">
                <parameter name="aSubject"/>
                <parameter name="aTopic"/>
                <parameter name="aPreference"/>
                <body><![CDATA[
                    aSubject.QueryInterface(Components.interfaces.nsIPrefBranch2);

                    switch (aPreference) {

                        case "calendar.week.start":
                            this.mWeekStartOffset = aSubject.getIntPref(aPreference);
                            this.viewElem.weekStartOffset = aSubject.getIntPref(aPreference);
                            if (!this.startDay || !this.endDay) {
                                // Don't refresh if we're not initialized
                                return;
                            }
                            // Refresh the view so the settings take effect
                            this.goToDay(this.selectedDay);
                            break;

                        default:
                            this.handleCommonPreference(aSubject, aTopic, aPreference);
                            break;
                    }
                    return;
                ]]></body>
            </method>

            <!--Public methods-->
            <method name="goToDay">
                <parameter name="aDate"/>
                <body><![CDATA[
                    var viewElement = document.getAnonymousElementByAttribute(this, "anonid", "view-element");
	            viewElement.tasksInView = this.mTasksInView;
                    viewElement.displayDaysOff = !this.mWorkdaysOnly;

                    aDate = aDate.getInTimezone(viewElement.timezone);

                    var d1 = aDate.startOfWeek.clone();
                    var d2 = aDate.endOfWeek.clone();

                    var weekStartOffset = this.mWeekStartOffset;

                    // startOfWeek always returns a Sunday.  Adjust if the user
                    // chose a different day to start weeks on.
                    if (weekStartOffset != 0) {
                        d1.day += weekStartOffset;
                        d2.day += weekStartOffset;
                        if (aDate.weekday < weekStartOffset) {
                            d1.day -= 7;
                            d2.day -= 7;
                        }
                        d1.normalize();
                        d2.normalize();
                    }
                    viewElement.setDateRange(d1, d2);
                    viewElement.selectedDay = aDate;
                    this.setNavLabels(aDate);
                ]]></body>
            </method>
            <method name="moveView">
                <parameter name="aNumber"/>
                <body><![CDATA[
                    var d1 = this.selectedDay.clone();
                    d1.day += 7*aNumber;
                    d1.normalize();
                    this.goToDay(d1);
                ]]></body>
            </method>
            <method name="setNavLabels">
                <parameter name="aDate"/>
                <body><![CDATA[
                    var nameArray = new Array();
                    var sbs = Components.classes["@mozilla.org/intl/stringbundle;1"]
                                        .getService(Components.interfaces.nsIStringBundleService);
                    var props = sbs.createBundle("chrome://calendar/locale/calendar.properties");
                    for (var i = -2; i < 3; i++) {
                        var date = aDate.clone();
                        // Add/subtract i number of weeks
                        date.day = aDate.day + i*7;
                        date.normalize();

                        var weekformatter =
                            Components.classes["@mozilla.org/calendar/weektitle-service;1"]
                                      .getService(Components.interfaces.calIWeekTitleService);
                        var weekno = weekformatter.getWeekTitle(date);

                        var weekTitle = 
                            props.formatStringFromName('WeekTitle', [weekno], 1);
                        nameArray.push(weekTitle);
                    }
                    document.getAnonymousElementByAttribute(this, "anonid", "nav-control").setNames(nameArray);
                ]]></body>
            </method>
        </implementation>
    </binding>
</bindings>
