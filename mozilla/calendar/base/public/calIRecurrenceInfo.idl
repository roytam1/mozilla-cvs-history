/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is
 *  Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir.vukicevic@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIArray;
interface nsIMutableArray;

interface calIDateTime;
interface calIItemOccurrence;

[scriptable, uuid(a6a458cf-052c-45d1-bee7-b700ad21109a)]
interface calIRecurrenceInfo : nsISupports
{
  //
  // recurrence
  //
  const long CAL_ITEM_RECUR_TYPE_NONE = 0;
  const long CAL_ITEM_RECUR_TYPE_MINUTELY = 1;
  const long CAL_ITEM_RECUR_TYPE_HOURLY = 2;
  const long CAL_ITEM_RECUR_TYPE_DAILY = 3;
  const long CAL_ITEM_RECUR_TYPE_MONTHLY = 4;
  const long CAL_ITEM_RECUR_TYPE_YEARLY = 5;

  readonly attribute long recurType;
  readonly attribute calIDateTime recurEnd; // if null, then forever
  // array of calIDateTime
  readonly attribute nsIArray recurrenceExceptions;
  // rest of recurrence in properties (?)

  // return the next display item for this event,
  // where the start time is >= aStartTime
  calIItemOccurrence getNextOccurrence (in calIDateTime aStartTime);

  // return the previous display item for this event,
  // where the start time is < aStartTime
  calIItemOccurrence getPreviousOccurrence (in calIDateTime aStartTime);

  // return array of calIItemOccurrence representing all
  // occurances of this event between start and end.
  nsIArray getAllOccurrences (in calIDateTime aStartTime,
                              in calIDateTime aEndTime);
};


[scriptable, uuid(ee300ea5-9bfa-4566-9ae1-23adf79088a8)]
interface calIMutableRecurrenceInfo : nsISupports
{
  attribute long recurType;
  attribute calIDateTime recurEnd; // if null, then forever
  // array of calIDateTime
  readonly attribute nsIMutableArray recurrenceExceptions;
  // rest of recurrence in properties (?)

  // return the next display item for this event,
  // where the start time is >= aStartTime
  calIItemOccurrence getNextOccurrence (in calIDateTime aStartTime);

  // return the previous display item for this event,
  // where the start time is < aStartTime
  calIItemOccurrence getPreviousOccurrence (in calIDateTime aStartTime);

  // return array of calIDisplayItems, representing all
  // occurances of this event between start and end.
  nsIArray getAllOccurrences (in calIDateTime aStartTime,
                              in calIDateTime aEndTime);
};
