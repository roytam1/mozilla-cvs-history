/* -*- Mode: idl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Oracle Corporation code.
 *
 * The Initial Developer of the Original Code is
 *  Oracle Corporation
 * Portions created by the Initial Developer are Copyright (C) 2004
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Vladimir Vukicevic <vladimir.vukicevic@oracle.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(5678d4a3-2543-4ece-afbb-079292f2866e)]
interface calIDateTime : nsISupports
{
  // returns true if this thing is able to be modified;
  // if the item is not mutable, attempts to modify
  // any data will throw CAL_ERROR_ITEM_IS_IMMUTABLE
  readonly attribute boolean isMutable;

  // makes this item immutable
  void makeImmutable();

  // clone always returns a mutable event
  calIDateTime clone();

  // true if this thing is set/valid
  readonly attribute boolean valid;

  // this thing's base PRTime value, either
  // as UTC or as local.  Setting this
  // will explode the PRTime value to
  // year/etc.
  attribute PRTime nativeTime;

  //
  // Date/Time components.  Setting any of these causes the DateTime
  // to become invalid, until normalize() is called.
  //

  // Year, fully exploded (e.g. "1989", "2004")
  attribute short year;

  // Month, 0-11
  attribute short month;

  // Day, 1 through whatever XXX - does libical want 1.. or 0..?
  attribute short day;

  // Hour, 0-23
  attribute short hour;

  // Minute, 0-59
  attribute short minute;

  // Second, 0-59
  attribute short second;

  // whether this thing indicates a time in UTC, or in the local time
  // zone
  attribute PRBool isUtc;

  // an associated timezone that's the preferred way of representing
  // this object.  If this is null/empty, then there is no preferred
  // timezone, and UTC or localtime is assumed (based on isUtc).
  attribute AUTF8String timezone;

  //
  // computed values
  //

  // Day of the week, 0-6, Sunday = 0
  readonly attribute short weekday;

  // Day of the year, 0-365/366
  readonly attribute short yearday;

  //
  // Methods
  //

  // return a string representation of this date/time
  // in the current locale
  AUTF8String toString();

  // normalize and validate the expanded-out values
  void normalize();

  // sets this thing to a time in the given timezone
  void setTimeInTimezone (in PRTime aTime, in string aTimezone);

  // gets a new calIDateTime object representing this
  // item in the given timezone
  calIDateTime getInTimezone (in string aTimezone);

  //
  // Some helper getters for calculating useful ranges
  //

  // the start/end of the current object's week
  readonly attribute calIDateTime startOfWeek;
  readonly attribute calIDateTime endOfWeek;

  // the start/end of the current object's month
  readonly attribute calIDateTime startOfMonth;
  readonly attribute calIDateTime endOfMonth;

  // the start/end of the current object's year
  readonly attribute calIDateTime startOfYear;
  readonly attribute calIDateTime endOfYear;
};
