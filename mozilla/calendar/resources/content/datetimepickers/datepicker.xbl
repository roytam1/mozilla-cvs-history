<?xml version="1.0"?>

<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is OEone Calendar Code, released October 31st, 2001.
 *
 * The Initial Developer of the Original Code is
 * OEone Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Garth Smedley <garths@oeone.com>
 *                 Mike Potter <mikep@oeone.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* DatePicker: text box + grid button XBL component.
    Editing text box sets date if parseable as date using current
    numerical short date format (in operating system).
    Clicking button shows datepicker-grid for picking date in month.

    Used in datetimepicker.xbl, calendar eventDialog.xul

    Requires:
      <?xml-stylesheet type="text/css"
      href="chrome://calendar/content/datetimepickers/datepicker.css" ?>
    May require (probably until bug 58757 fixed):
      <script type="application/x-javascript"
      src="chrome://global/content/strres.js" />
      <script type="application/x-javascript" 
      src="chrome://calendar/content/dateUtils.js"/>

    At site, can provide id, and code to run when value changed by picker.
      <datepicker id="my-date-picker" onchange="myDatePick( this );"/>

    May get/set value in javascript with 
      document.getElementById("my-date-picker").value = new Date();
    May disable/enable in javascript with
      document.getElementById("my-date-picker").disabled = true;
*/
-->
<bindings id="xulDatePicker"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <!-- this doesn't work, maybe bug 58757 -->
    <xul:script xul:type="application/x-javascript" 
     xul:src="chrome://calendar/content/dateUtils.js"/>

    <binding id="datepicker" extends="xul:box" xbl:inherits="value,onchange">
        <!-- ::::::::::::::::: CONTENT ::::::::::::::::::::::::: -->
    <!-- Desired behavior: when user is done editing the date field 
           and either leaves the field (onblur) or closes the dialog 
           (13 is enter/return key), parse the date and redisplay it
           in the date field using the current format to verify
           whether the date was parsed correctly.
         This cannot be done with textbox oninput, so use a workaround.
         This was done with textbox onkeypress="parseTextBoxDate(true)"
           and onblur="parseTextBoxDate(true)" which worked in Moz1.6, but
           no longer works in Moz1.7.
         Therefore constructor stores attribute kDatePicker on the textbox,
           and the onblur and onkeypress commands navigate to this kDatePicker.
           xul:Textbox contains an xul:hbox which contains html:input.
           Onkeypress and onblur are not documented attributes of xul:textbox,
           but become attributes of the html:input.
           Not clear how to navigate from the textbox to the input, otherwise 
           could put kDatePicker property on the input element.
           [document.getAnonymousNodes(textBox) fails as of Moz1.7b]).
           So navigate parents to textbox in order to call parseTextBoxDate.
         [this comment is outside the <content> so it won't become a
          node that interferes with navigation to interior nodes.] -->
        <content id="content">
        <xul:hbox flex="1" id="hbox" class="datepicker-box-class">
            <xul:textbox id="textbox" class="datepicker-text-class"
                xbl:inherits="disabled"
                onkeypress="if (event.keyCode == 13) this.kDatePicker.parseTextBoxDate(true);"
                onblur="this.parentNode.parentNode.kDatePicker.parseTextBoxDate(true);"/>

            <xul:menu class="datepicker-button-class"
                xbl:inherits="disabled">
                <xul:menupopup popupanchor="bottomright" popupalign="topright" 
                    onpopupshowing="onPopup()">
                    <xul:minimonth onchange="this.kDatePicker.clickDate(this); "/>
                </xul:menupopup>
            </xul:menu>

        </xul:hbox>
        </content>

        <!-- ::::::::::::::::: INTERFACE ::::::::::::::::::::::::: -->
        <implementation>
        <property name="value" 
            onset="this.update(val,false)"
            onget="return this.mValue"/>

        <!-- called from datetimepicker.datepickerdisabled and datetimepicker.setDisabled -->
        <property name="disabled"
         onget="return this.mDisabled;" 
         onset="this.setDisabled( val );" />

        <constructor>
            <![CDATA[
                //var hbox = document.getAnonymousElementByAttribute(this,"id","hbox");
                var hbox = document.getAnonymousNodes(this)[0];
                this.kTextBox = hbox.childNodes[0];
                this.kTextBox.kDatePicker = this; // enable call back to method in Moz1.7
                // Fails:
                //  this.kTextBoxInput = document.getAnonymousNodes(this.kTextBox).childNodes[0].childNodes[0];
                //  this.kTextBoxInput.kDatePicker = this;
                //document.getAnonymousElementByAttribute(this, "id", "button");
                this.kButton = hbox.childNodes[1];
                this.kPopup = kButton.childNodes[0];
                this.kMinimonth = this.kPopup.childNodes[0];
                this.kMinimonth.kDatePicker = this; // enable call back to method in Moz1.6
                this.kFormatter = new DateFormater();

                // whether currently disabled
                this.mDisabled = this.getAttribute("disabled") ? true : false;

                this.mValue = null;
                var val = this.getAttribute("value");
                if (val) {
                    this.value = new Date(val); // setting value property calls update
                } else {
                    this.value = new Date();
                }
                this.kCallback = null;
                val = this.getAttribute("onchange");
                if (val) this.kCallback = function() { eval(val); };
            ]]>
        </constructor>

        <method name="update">
            <parameter name="aValue"/>
            <parameter name="refresh"/>
            <body><![CDATA[
                if (aValue == null) {  // invalid date, revert to previous date
                // set textBox.value property, not attribute
                this.kTextBox.value = this.formatDate(this.mValue);
                } else {
                    this.mValue = aValue;
                    this.kTextBox.value = this.formatDate(this.mValue);
                    // called before constructor, so check aRefresh before kCallBack
                    if( refresh != false && this.kCallback )
                        this.kCallback();
                }
            ]]></body>
        </method>

        <method name="formatDate">
            <parameter name="aValue"/>
            <body><![CDATA[
                return this.kFormatter.getShortFormatedDate(aValue);
            ]]></body>
        </method>

        <method name="setDisabled">
          <parameter name="aDisabled" />
          <body><![CDATA[
            this.mDisabled = aDisabled;
            if (this.mDisabled) {
              this.kTextBox.setAttribute( "disabled", "true" );
              this.kButton.setAttribute( "disabled", "true" );
            } else {
              this.kTextBox.removeAttribute( "disabled" );
              this.kButton.removeAttribute( "disabled" );
            }
          ]]></body>
        </method>

        <method name="onPopup">
            <body><![CDATA[
                var cal = this.kPopup.childNodes[0];
                cal.update( this.mValue );
            ]]></body>
        </method>

        <method name="parseTextBoxDate">
            <parameter name="aRefresh"/>
            <body><![CDATA[
               this.update(this.kFormatter.parseShortDate(this.kTextBox.value),
                      aRefresh);
            ]]></body>
        </method>

        <method name="clickDate">
            <parameter name="aMiniMonthGrid" />
            <body><![CDATA[
                this.update(new Date(aMiniMonthGrid.value), true)
                aMiniMonthGrid.parentNode.hidePopup();
            ]]></body>
        </method>

        </implementation>

        <!-- ::::::::::::::::: HANDLERS ::::::::::::::::::::::::: -->
        <handlers>
            <handler event="bindingattached" action="this.initialize();"/>
        </handlers>

    </binding>
</bindings>

