/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: NPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Sun Microsystems, Inc.
 * Portions created by Sun Microsystems are Copyright (C) 2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * Original Author: Daniel Boelzle (daniel.boelzle@sun.com)
 *
 * Contributor(s):
 *
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the NPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the NPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "calICalendar.idl"
#include "calIWcapFreeBusyListener.idl"
#include "calIDateTime.idl"
#include "calIICSService.idl"

/** Adds WCAP specific capabilities.
 */
[scriptable, uuid(21A189DF-6C92-41f6-9E2B-1929EF25CAEE)]
interface calIWcapCalendar : calICalendar
{
    /**
     * Current userId; if the user is not logged in, a dialog will prompt for.
     */
    readonly attribute string userId;
    
    /**
     * Current calId the calendar instance acts on; defaults to userId.
     */
    attribute string calId;
    
    /**
     * Whether the currently selected calendar belongs to user.
     */
    readonly attribute boolean isOwnedCalendar;
    
    /**
     * Gets or sets this calendar's (calId) default timezone.
     */
    readonly attribute string defaultTimezone;    
    
    /**
     * Gets a text for an error code.
     *
     * @param rc error code defined in calIWcapErrors
     * @return error string
     * @exception Components.results.NS_ERROR_INVALID_ARG
     */
    string getWcapErrorString( in unsigned long rc );
    
    /**
     * Creates a new calendar for user.
     *
     * @param calId calendar's calId (portion);
     *        without user's id, e.g. "test-cal".
     *        valid characters for the calId parameter are:
     *        - Alphabet characters (A-Z, a-z)
     *        - Numeric characters (0-9)
     *        - Three special characters
     *        - Dash (-)
     *        - Underscore (_)
     *        - Period (.)
     * @param name calendar's name, e.g. "My Work Cal"
     * @param bAllowDoubleBooking whether double booking (events/todos) is
     *                            allowed
     * @param bSetCalProps whether properties of the new calendar are set
     * @param bAddToSubscribed allows a user to specify if the newly
     *                         created calendar should be added to the
     *                         user’s subscribed calendar list
     * @return calId of created calendar
     */
    string createCalendar(
        in string calId,
        in string name,
        in boolean bAllowDoubleBooking,
        in boolean bSetCalProps,
        in boolean bAddToSubscribed );
    
    /**
     * Deletes a calendar.
     *
     * @param calId full calId (incl. "<user>:")
     * @param bRemoveFromSubscribed whether calendar ought to be removed
     *                              from subscription list
     */
    void deleteCalendar(
        in string calId,
        in boolean bRemoveFromSubscribed );
    
    /**
     * Gets own calendars.
     *
     * @return owned calendars (string array of "calId1$Description1", ...)
     */
    void getOwnedCalendars(
        out unsigned long count,
        [array, size_is(count), retval] out string ownCalendars );
    
    /**
     * Gets subscribed calendars.
     *
     * @return subscribed calendars (string array of "calId1$Description1",...)
     */
    void getSubscribedCalendars(
        out unsigned long count,
        [array, size_is(count), retval] out string subscribedCalendars );
    
    /**
     * Subscribe to calendar(s).
     *
     * @param count number of calIds
     * @param calIds array of calIds (calid or "mailto:rfc822addr")
     */
    void subscribeToCalendars(
        in unsigned long count,
        [array, size_is(count)] in string calIds );
    
    /**
     * Unsubscribe from calendar(s).
     *
     * @param count number of calIds
     * @param calIds array of calIds (calid or "mailto:rfc822addr")
     */
    void unsubscribeFromCalendars(
        in unsigned long count,
        [array, size_is(count)] in string calIds );
    
    /**
     * Gets free-busy entries for calid.
     * Results are notifies to passed listener instance.
     * Errors are always notified to all registered calIObservers,
     * and rethrown in calling thread (only).
     *
     * @param calId a calid or "mailto:rfc822addr"
     * @param dtRangeStart start time of free-busy search
     * @param dtRangeEnd end time of free-busy search
     * @param bBusyOnly whether to return busy entries only
     * @param iListener listener receiving results
     * @param bAsync whether the listener receives results asynchronously
     * @param requestId request id to distinguish asynchronous requests
     */
    void getFreeBusyTimes(
        in string calId,
        in calIDateTime dtRangeStart,
        in calIDateTime dtRangeEnd,
        in boolean bBusyOnly,
        in calIWcapFreeBusyListener iListener,
        in boolean bAsync,
        in unsigned long requestId );
    
    /** xxx todo: to be moved to calIOperationListener?
     */
    const unsigned long SYNC = 5;
    
    /**
     * Syncs in changes since time <code>dtFrom</code>.
     * The passed <code>iListener</code> receives a
     * <code>SYNC</code> with timestamp as detail.
     *
     * @param destCal destination calendar to write changes to
     * @param dtFrom start time to sync changes from,
     *               if null all items are synced in
     * @param iListener operation listener for SYNC operation
     */
    void syncChangesTo(
        in calICalendar destCal,
        in calIDateTime dtFrom,
        in calIOperationListener iListener );
};

