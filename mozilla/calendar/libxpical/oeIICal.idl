/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is OEone Calendar Code, released October 31st, 2001.
 *
 * The Initial Developer of the Original Code is
 * OEone Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Mostafa Hosseini <mostafah@oeone.com>
 *                 Chris Charabaruk <ccharabaruk@meldstar.com>
 *                 ArentJan Banck <ajbanck@planet.nl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIMsgAttachment.idl"
#include "nsISupportsArray.idl"
interface nsISimpleEnumerator;

/**
 * The uuid is a unique number identifying the interface normally
 * called IID. It can be generated as follows:
 *
 * Windows: guidgen.exe
 * Unix: uuidgen which comes with e2fsprogs package
 * Mac: ???
 * All platform: Using irc, connect to irc.mozilla.org and type in
 *				/join #mozilla
 *				/msg mozbot uuid
 *
 */

typedef long eventMethodProperty;
typedef long eventStatusProperty;

[scriptable, uuid(db180127-cc56-40c6-a8ef-7e329e1c4142)]
interface oeIDateTime : nsISupports
{
    attribute short year;
    attribute short month;
    attribute short day;
    attribute short hour;
    attribute short minute;
    PRTime getTime();
    void setTime( in PRTime ms );
    string toString();
    void clear();
};

[scriptable, uuid(89c5cd5a-af2d-45e6-83c7-2f2420a13626)]
interface oeIICalEvent : nsISupports
{
    const eventMethodProperty ICAL_METHOD_X = 10011;
    const eventMethodProperty ICAL_METHOD_PUBLISH = 10012;
    const eventMethodProperty ICAL_METHOD_REQUEST = 10013;
    const eventStatusProperty ICAL_STATUS_X = 10028;
    const eventStatusProperty ICAL_STATUS_TENTATIVE = 10029;
    const eventStatusProperty ICAL_STATUS_CONFIRMED = 10030;
    const eventStatusProperty ICAL_STATUS_COMPLETED = 10031;
    const eventStatusProperty ICAL_STATUS_NEEDSACTION = 10032;
    const eventStatusProperty ICAL_STATUS_CANCELLED = 10033;
    const eventStatusProperty ICAL_STATUS_INPROCESS = 10034;
    const eventStatusProperty ICAL_STATUS_DRAFT = 10035;
    const eventStatusProperty ICAL_STATUS_FINAL = 10036;
    const eventStatusProperty ICAL_STATUS_NONE = 10037;

    readonly attribute oeIDateTime start;
    readonly attribute oeIDateTime end;
    readonly attribute oeIDateTime stamp;
    attribute string id;
    attribute string title;
    attribute string description;
    attribute string location;
    attribute string categories;
    attribute boolean privateEvent;
    attribute string syncId;
    attribute boolean allDay;
    attribute boolean alarm;
    attribute string alarmUnits;
    attribute unsigned long alarmLength;
    attribute string alarmEmailAddress;
    attribute string inviteEmailAddress;
    attribute unsigned long recurInterval;
    readonly attribute oeIDateTime recurEnd;
    attribute boolean recur;
    attribute string recurUnits;
    attribute boolean recurForever;
    attribute short recurWeekdays;
    attribute short recurWeekNumber;
    attribute PRTime lastAlarmAck;
    attribute string url;
    attribute short priority;
    attribute eventMethodProperty method;
    attribute eventStatusProperty status;
    boolean getNextRecurrence( in PRTime begin, out PRTime result);
    boolean getPreviousOccurrence( in PRTime beforethis, out PRTime result);
    string getIcalString();
    boolean parseIcalString(in string icalstr);
    void addException( in PRTime exdate );
	nsISimpleEnumerator getExceptions();
	void removeAllExceptions();
    void setSnoozeTime( in PRTime exdate );
    oeIICalEvent clone();

    readonly attribute nsISupportsArray attachmentsArray;
    void addAttachment(in nsIMsgAttachment attachment);
    void removeAttachment(in nsIMsgAttachment attachment);
    void removeAttachments();
};

[scriptable, uuid(f95df40e-0d5f-49ec-9ba8-4b88d3eb53e0)]
interface oeIICalEventDisplay : oeIICalEvent
{
    readonly attribute oeIICalEvent event;
    attribute PRTime displayDate;
};

[scriptable, uuid(d44987b4-1dd1-11b2-9783-8a78ed685caf)]
interface oeIICalTodo : oeIICalEvent
{
    readonly attribute oeIDateTime due;
    readonly attribute oeIDateTime completed;
    attribute short percent;
};

[scriptable, uuid(b8584baa-1507-40d4-b542-5a2758e1c86d)]
interface oeIICalObserver : nsISupports
{
    void onStartBatch();
    void onEndBatch();
    void onLoad();
    void onAddItem( in oeIICalEvent e);
    void onModifyItem( in oeIICalEvent e, in oeIICalEvent olde );
    void onDeleteItem( in oeIICalEvent e);
    void onAlarm( in oeIICalEvent e);
};

[scriptable, uuid(7a4fd625-69a8-4008-932e-cccc227b402c)]
interface oeIICalTodoObserver : nsISupports
{
    void onStartBatch();
    void onEndBatch();
    void onLoad();
    void onAddItem( in oeIICalTodo e);
    void onModifyItem( in oeIICalTodo e, in oeIICalTodo olde );
    void onDeleteItem( in oeIICalTodo e);
    void onAlarm( in oeIICalTodo e);
};

[scriptable, uuid(981ab93d-ad51-45bb-a4a2-e158c2cfdeb4)]
interface oeIICal : nsISupports
{
	void Test();

    attribute boolean batchMode;
    readonly attribute oeIICalTodo filter;

	void setServer( in string str );
    void addObserver( in oeIICalObserver observer );
    void removeObserver( in oeIICalObserver observer );
    void addTodoObserver( in oeIICalTodoObserver observer );
    void removeTodoObserver( in oeIICalTodoObserver observer );
	string addEvent( in oeIICalEvent icalevent );
	string modifyEvent( in oeIICalEvent icalevent );
	void deleteEvent( in string id );
	oeIICalEvent fetchEvent( in string id );
	nsISimpleEnumerator searchBySQL( in string sqlstr );
	nsISimpleEnumerator getAllEvents();
	nsISimpleEnumerator getEventsForMonth(in PRTime date, out nsISimpleEnumerator datelist );
	nsISimpleEnumerator getEventsForWeek(in PRTime date, out nsISimpleEnumerator datelist );
	nsISimpleEnumerator getEventsForDay(in PRTime date, out nsISimpleEnumerator datelist );
	nsISimpleEnumerator getEventsForRange(in PRTime begindate, in PRTime enddate, out nsISimpleEnumerator datelist );
	nsISimpleEnumerator getNextNEvents(in PRTime begindate, in long count, out nsISimpleEnumerator datelist );
	nsISimpleEnumerator getFirstEventsForRange(in PRTime begindate, in PRTime enddate );

	string addTodo( in oeIICalTodo icaltodo );
	string modifyTodo( in oeIICalTodo icaltodo );
	void deleteTodo( in string id );
	oeIICalTodo fetchTodo( in string id );
	nsISimpleEnumerator getAllTodos();

    void resetFilter();
};


%{ C++
extern nsresult
NS_NewICal(oeIICal** inst);
extern nsresult
NS_NewICalEvent(oeIICalEvent** inst);
extern nsresult
NS_NewICalTodo(oeIICalTodo** inst);
extern nsresult
NS_NewDateTime(oeIDateTime** inst);
extern nsresult
NS_NewICalEventDisplay( oeIICalEvent* event, oeIICalEventDisplay** inst );
%}
