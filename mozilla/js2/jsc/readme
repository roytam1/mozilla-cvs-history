R E A D M E   F I L E

ECMASCRIPT 3RD EDITION COMPACT PROFILE
Mountain View Compiler Company
Jeff Dyer, Jan-30-2001

OVERVIEW

ES3CP implements the ECMAScript 3rd Edition Specification,
Compact Profile subset. It translates (or will translate)
ECMAScript programs into Java class files.

STATUS

This code is an aggregation of existing ECMAScript
implementations I have written in Java. It is merely a
starting point for the development of production
ES3CP compilers in Java and C++. Some of the tasks
to be done are listed in the following section.

DEVELOPMENT SEQUENCE

This section offers a partial sequence of tasks required
to complete both the Java and C++ implementations.

A General
  1 Remove 4th Edition features
  2 Translate Java implementation into C++
B Code generator
  1 Class file emitter
  2 Load and store generation for references
  3 Expressions
  4 Closures
  5 Statements
  6 Function definitions
B Input buffer
C Lexer
D Parser
E Semantic Analyzer
  1 Constant evaluation
  2 Type inference

BUILDING

Before you start make sure you have a current version of the Java2 SDK
installed on your system. If it is correctly installed, you can type
'javac' at the command-line and see something like:

	Usage: javac <options> <source files>

followed by a bunch of other documentation text.

NOTE: I've only tried to build on NT40 using Java2 1.3.0_01. You may
get different results in different environments. 

Go to the directory ./build/java, and run your favorite make
utility, such as:

	make

If all goes well, the sanity test will run and you will see something
like

	../../test/sanity.js: 0 errors

on the last line of the console output. To run more extensive tests, 
use the build command:

	make test

There are also build targets for each of the components (input, lexer,
parser, semantics, and generator) of the compiler. Thus, a useful idiom
is to give 'make' two targets, the component you just modified followed
by the sanity test target like this:

	make parser sanity

To automatically rebuild the parser and run the sanity test. What's
missing is any kind of dependency rules, so using the root target 
always rebuilds everything. This, for the sake of keeping it simple.


RUNNING

From the ./build/java directory, use the following command:

	java -classpath Debug Main program.js

where 'program.js' is the name of the file to compile. ES3CP will
produce a new file given the name of the original source file
with the suffix '.jsil' appended to it. Errors are written to a 
file with the suffix '.err' appended to it.

CHANGES

Jan-30-2001: Initial set of files.
